// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/riscv64/inst.isle
// - src/isa/riscv64/inst_vector.isle
// - src/isa/riscv64/lower.isle
// - /Users/zwitterion/Documents/opensource/extism/target/debug/build/cranelift-codegen-b9d1117d8e9b911c/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> u32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<u32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: u32, arg1: u32) -> Option<u32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_reverse(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_inverse(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_reverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_inverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_u32(&mut self, arg0: Offset32) -> u32;
    fn u32_to_offset32(&mut self, arg0: u32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn xreg_new(&mut self, arg0: Reg) -> XReg;
    fn writable_xreg_new(&mut self, arg0: WritableReg) -> WritableXReg;
    fn writable_xreg_to_xreg(&mut self, arg0: WritableXReg) -> XReg;
    fn writable_xreg_to_writable_reg(&mut self, arg0: WritableXReg) -> WritableReg;
    fn xreg_to_reg(&mut self, arg0: XReg) -> Reg;
    fn freg_new(&mut self, arg0: Reg) -> FReg;
    fn writable_freg_new(&mut self, arg0: WritableReg) -> WritableFReg;
    fn writable_freg_to_freg(&mut self, arg0: WritableFReg) -> FReg;
    fn writable_freg_to_writable_reg(&mut self, arg0: WritableFReg) -> WritableReg;
    fn freg_to_reg(&mut self, arg0: FReg) -> Reg;
    fn vreg_new(&mut self, arg0: Reg) -> VReg;
    fn writable_vreg_new(&mut self, arg0: WritableReg) -> WritableVReg;
    fn writable_vreg_to_vreg(&mut self, arg0: WritableVReg) -> VReg;
    fn writable_vreg_to_writable_reg(&mut self, arg0: WritableVReg) -> WritableReg;
    fn vreg_to_reg(&mut self, arg0: VReg) -> Reg;
    fn u8_as_i32(&mut self, arg0: u8) -> i32;
    fn has_v(&mut self) -> bool;
    fn has_zbkb(&mut self) -> bool;
    fn has_zba(&mut self) -> bool;
    fn has_zbb(&mut self) -> bool;
    fn has_zbc(&mut self) -> bool;
    fn has_zbs(&mut self) -> bool;
    fn imm(&mut self, arg0: Type, arg1: u64) -> Reg;
    fn imm12_const(&mut self, arg0: i32) -> Imm12;
    fn imm_from_bits(&mut self, arg0: u64) -> Imm12;
    fn imm_from_neg_bits(&mut self, arg0: i64) -> Imm12;
    fn imm12_const_add(&mut self, arg0: i32, arg1: i32) -> Imm12;
    fn imm12_and(&mut self, arg0: Imm12, arg1: u64) -> Imm12;
    fn neg_imm12(&mut self, arg0: Imm12) -> Imm12;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn imm5_from_u64(&mut self, arg0: u64) -> Option<Imm5>;
    fn imm5_from_i8(&mut self, arg0: i8) -> Option<Imm5>;
    fn uimm5_from_u8(&mut self, arg0: u8) -> Option<UImm5>;
    fn uimm5_from_u64(&mut self, arg0: u64) -> Option<UImm5>;
    fn uimm5_bitcast_to_imm5(&mut self, arg0: UImm5) -> Imm5;
    fn gen_default_frm(&mut self) -> OptionFloatRoundingMode;
    fn pack_float_rounding_mode(&mut self, arg0: &FRM) -> OptionFloatRoundingMode;
    fn gen_shamt(&mut self, arg0: Type, arg1: XReg) -> ValueRegs;
    fn gen_amode(&mut self, arg0: Reg, arg1: Offset32, arg2: Type) -> AMode;
    fn gen_const_amode(&mut self, arg0: VCodeConstant) -> AMode;
    fn offset32_imm(&mut self, arg0: i32) -> Offset32;
    fn default_memflags(&mut self) -> MemFlags;
    fn offset32_add(&mut self, arg0: Offset32, arg1: i64) -> Offset32;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn atomic_amo(&mut self) -> AMO;
    fn gen_stack_addr(&mut self, arg0: StackSlot, arg1: Offset32) -> Reg;
    fn gen_select_reg(&mut self, arg0: &IntCC, arg1: XReg, arg2: XReg, arg3: Reg, arg4: Reg)
        -> Reg;
    fn load_u64_constant(&mut self, arg0: u64) -> Reg;
    fn vec_writable_clone(&mut self, arg0: &VecWritableReg) -> VecWritableReg;
    fn vec_writable_to_regs(&mut self, arg0: &VecWritableReg) -> ValueRegs;
    fn alloc_vec_writable(&mut self, arg0: Type) -> VecWritableReg;
    fn load_op(&mut self, arg0: Type) -> LoadOP;
    fn store_op(&mut self, arg0: Type) -> StoreOP;
    fn load_ext_name(&mut self, arg0: ExternalName, arg1: i64) -> Reg;
    fn int_convert_2_float_op(&mut self, arg0: Type, arg1: bool, arg2: Type) -> FpuOPRR;
    fn label_to_br_target(&mut self, arg0: MachLabel) -> BranchTarget;
    fn vec_label_get(&mut self, arg0: &VecMachLabel, arg1: u8) -> MachLabel;
    fn lower_br_icmp(
        &mut self,
        arg0: &IntCC,
        arg1: ValueRegs,
        arg2: ValueRegs,
        arg3: &VecMachLabel,
        arg4: Type,
    ) -> Unit;
    fn int_zero_reg(&mut self, arg0: Type) -> ValueRegs;
    fn lower_cond_br(
        &mut self,
        arg0: &IntCC,
        arg1: ValueRegs,
        arg2: &VecMachLabel,
        arg3: Type,
    ) -> Unit;
    fn intcc_to_extend_op(&mut self, arg0: &IntCC) -> ExtendOp;
    fn lower_br_table(&mut self, arg0: Reg, arg1: &VecMachLabel) -> Unit;
    fn load_ra(&mut self) -> Reg;
    fn shift_int_to_most_significant(&mut self, arg0: XReg, arg1: Type) -> XReg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn fp_reg(&mut self) -> PReg;
    fn sp_reg(&mut self) -> PReg;
    fn zero_reg(&mut self) -> Reg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn int_compare(&mut self, arg0: &IntCC, arg1: XReg, arg2: XReg) -> IntegerCompare;
    fn vec_alu_rr_dst_type(&mut self, arg0: &VecAluOpRR) -> Type;
    fn vstate_from_type(&mut self, arg0: Type) -> VState;
    fn min_vec_reg_size(&mut self) -> u64;
    fn ty_vec_fits_in_register(&mut self, arg0: Type) -> Option<Type>;
    fn is_atomic_rmw_max_etc(&mut self, arg0: &AtomicRmwOp) -> Option<(AtomicRmwOp, bool)>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 308.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 350.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 369.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 377.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/riscv64/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    Lui {
        rd: WritableReg,
        imm: Imm20,
    },
    LoadConst32 {
        rd: WritableReg,
        imm: u32,
    },
    LoadConst64 {
        rd: WritableReg,
        imm: u64,
    },
    Auipc {
        rd: WritableReg,
        imm: Imm20,
    },
    FpuRR {
        alu_op: FpuOPRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs: Reg,
    },
    AluRRR {
        alu_op: AluOPRRR,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRR {
        alu_op: FpuOPRRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRRR {
        alu_op: FpuOPRRRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        rs3: Reg,
    },
    AluRRImm12 {
        alu_op: AluOPRRI,
        rd: WritableReg,
        rs: Reg,
        imm12: Imm12,
    },
    Load {
        rd: WritableReg,
        op: LoadOP,
        flags: MemFlags,
        from: AMode,
    },
    Store {
        to: AMode,
        op: StoreOP,
        flags: MemFlags,
        src: Reg,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        rets: VecRetPair,
        stack_bytes_to_pop: u32,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    AdjustSp {
        amount: i64,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    TrapIf {
        test: Reg,
        trap_code: TrapCode,
    },
    TrapIfC {
        rs1: Reg,
        rs2: Reg,
        cc: IntCC,
        trap_code: TrapCode,
    },
    Jal {
        dest: BranchTarget,
    },
    CondBr {
        taken: BranchTarget,
        not_taken: BranchTarget,
        kind: IntegerCompare,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    VirtualSPOffsetAdj {
        amount: i64,
    },
    Mov {
        rd: WritableReg,
        rm: Reg,
        ty: Type,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Fence {
        pred: u8,
        succ: u8,
    },
    FenceI,
    ECall,
    EBreak,
    Udf {
        trap_code: TrapCode,
    },
    Jalr {
        rd: WritableReg,
        base: Reg,
        offset: Imm12,
    },
    Atomic {
        op: AtomicOP,
        rd: WritableReg,
        addr: Reg,
        src: Reg,
        amo: AMO,
    },
    AtomicStore {
        src: Reg,
        ty: Type,
        p: Reg,
    },
    AtomicLoad {
        rd: WritableReg,
        ty: Type,
        p: Reg,
    },
    AtomicRmwLoop {
        offset: Reg,
        op: AtomicRmwOp,
        dst: WritableReg,
        ty: Type,
        p: Reg,
        x: Reg,
        t0: WritableReg,
    },
    Select {
        dst: VecWritableReg,
        ty: Type,
        condition: Reg,
        x: ValueRegs,
        y: ValueRegs,
    },
    BrTable {
        index: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        targets: VecBranchTarget,
    },
    AtomicCas {
        offset: Reg,
        t0: WritableReg,
        dst: WritableReg,
        e: Reg,
        addr: Reg,
        v: Reg,
        ty: Type,
    },
    IntSelect {
        op: IntSelectOP,
        dst: VecWritableReg,
        x: ValueRegs,
        y: ValueRegs,
        ty: Type,
    },
    Icmp {
        cc: IntCC,
        rd: WritableReg,
        a: ValueRegs,
        b: ValueRegs,
        ty: Type,
    },
    SelectReg {
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        condition: IntegerCompare,
    },
    FcvtToInt {
        is_sat: bool,
        rd: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        is_signed: bool,
        in_type: Type,
        out_type: Type,
    },
    RawData {
        data: VecU8,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    FloatRound {
        op: FloatRoundOP,
        rd: WritableReg,
        int_tmp: WritableReg,
        f_tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    FloatSelect {
        op: FloatSelectOP,
        rd: WritableReg,
        tmp: WritableReg,
        rs1: Reg,
        rs2: Reg,
        ty: Type,
    },
    FloatSelectPseudo {
        op: FloatSelectOP,
        rd: WritableReg,
        tmp: WritableReg,
        rs1: Reg,
        rs2: Reg,
        ty: Type,
    },
    Popcnt {
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Cltz {
        leading: bool,
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Rev8 {
        rs: Reg,
        step: WritableReg,
        tmp: WritableReg,
        rd: WritableReg,
    },
    Brev8 {
        rs: Reg,
        ty: Type,
        step: WritableReg,
        tmp: WritableReg,
        tmp2: WritableReg,
        rd: WritableReg,
    },
    StackProbeLoop {
        guard_size: u32,
        probe_count: u32,
        tmp: WritableReg,
    },
    VecAluRRR {
        op: VecAluOpRRR,
        vd: WritableReg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRImm5 {
        op: VecAluOpRRImm5,
        vd: WritableReg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRR {
        op: VecAluOpRR,
        vd: WritableReg,
        vs: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRImm5 {
        op: VecAluOpRImm5,
        vd: WritableReg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecSetState {
        rd: WritableReg,
        vstate: VState,
    },
    VecLoad {
        eew: VecElementWidth,
        to: WritableReg,
        from: VecAMode,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecStore {
        eew: VecElementWidth,
        to: VecAMode,
        from: Reg,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
}

/// Internal type FloatSelectOP: defined at src/isa/riscv64/inst.isle line 379.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FloatSelectOP {
    Max,
    Min,
}

/// Internal type FloatRoundOP: defined at src/isa/riscv64/inst.isle line 384.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FloatRoundOP {
    Nearest,
    Ceil,
    Floor,
    Trunc,
}

/// Internal type IntSelectOP: defined at src/isa/riscv64/inst.isle line 391.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum IntSelectOP {
    Smax,
    Umax,
    Smin,
    Umin,
}

/// Internal type AtomicOP: defined at src/isa/riscv64/inst.isle line 398.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicOP {
    LrW,
    ScW,
    AmoswapW,
    AmoaddW,
    AmoxorW,
    AmoandW,
    AmoorW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    LrD,
    ScD,
    AmoswapD,
    AmoaddD,
    AmoxorD,
    AmoandD,
    AmoorD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
}

/// Internal type FpuOPRRRR: defined at src/isa/riscv64/inst.isle line 423.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRRR {
    FmaddS,
    FmsubS,
    FnmsubS,
    FnmaddS,
    FmaddD,
    FmsubD,
    FnmsubD,
    FnmaddD,
}

/// Internal type FClassResult: defined at src/isa/riscv64/inst.isle line 436.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FClassResult {
    NegInfinite,
    NegNormal,
    NegSubNormal,
    NegZero,
    PosZero,
    PosSubNormal,
    PosNormal,
    PosInfinite,
    SNaN,
    QNaN,
}

/// Internal type FpuOPRR: defined at src/isa/riscv64/inst.isle line 459.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRR {
    FsqrtS,
    FcvtWS,
    FcvtWuS,
    FmvXW,
    FclassS,
    FcvtSw,
    FcvtSwU,
    FmvWX,
    FcvtLS,
    FcvtLuS,
    FcvtSL,
    FcvtSLU,
    FcvtLD,
    FcvtLuD,
    FmvXD,
    FcvtDL,
    FcvtDLu,
    FmvDX,
    FsqrtD,
    FcvtSD,
    FcvtDS,
    FclassD,
    FcvtWD,
    FcvtWuD,
    FcvtDW,
    FcvtDWU,
}

/// Internal type LoadOP: defined at src/isa/riscv64/inst.isle line 499.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LoadOP {
    Lb,
    Lh,
    Lw,
    Lbu,
    Lhu,
    Lwu,
    Ld,
    Flw,
    Fld,
}

/// Internal type StoreOP: defined at src/isa/riscv64/inst.isle line 511.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum StoreOP {
    Sb,
    Sh,
    Sw,
    Sd,
    Fsw,
    Fsd,
}

/// Internal type AluOPRRR: defined at src/isa/riscv64/inst.isle line 520.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRR {
    Add,
    Sub,
    Sll,
    Slt,
    SltU,
    Sgt,
    Sgtu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    DivU,
    Rem,
    RemU,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    Adduw,
    Sh1add,
    Sh1adduw,
    Sh2add,
    Sh2adduw,
    Sh3add,
    Sh3adduw,
    Andn,
    Orn,
    Xnor,
    Max,
    Maxu,
    Min,
    Minu,
    Rol,
    Rolw,
    Ror,
    Rorw,
    Bclr,
    Bext,
    Binv,
    Bset,
    Clmul,
    Clmulh,
    Clmulr,
    Pack,
    Packw,
    Packh,
}

/// Internal type FpuOPRRR: defined at src/isa/riscv64/inst.isle line 600.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRR {
    FaddS,
    FsubS,
    FmulS,
    FdivS,
    FsgnjS,
    FsgnjnS,
    FsgnjxS,
    FminS,
    FmaxS,
    FeqS,
    FltS,
    FleS,
    FaddD,
    FsubD,
    FmulD,
    FdivD,
    FsgnjD,
    FsgnjnD,
    FsgnjxD,
    FminD,
    FmaxD,
    FeqD,
    FltD,
    FleD,
}

/// Internal type AluOPRRI: defined at src/isa/riscv64/inst.isle line 633.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRI {
    Addi,
    Slti,
    SltiU,
    Xori,
    Ori,
    Andi,
    Slli,
    Srli,
    Srai,
    Addiw,
    Slliw,
    SrliW,
    Sraiw,
    SlliUw,
    Clz,
    Clzw,
    Ctz,
    Ctzw,
    Cpop,
    Cpopw,
    Sextb,
    Sexth,
    Zexth,
    Rori,
    Roriw,
    Rev8,
    Brev8,
    Orcb,
    Bclri,
    Bexti,
    Binvi,
    Bseti,
}

/// Internal type FRM: defined at src/isa/riscv64/inst.isle line 676.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FRM {
    RNE,
    RTZ,
    RDN,
    RUP,
    RMM,
    Fcsr,
}

/// Internal type FFlagsException: defined at src/isa/riscv64/inst.isle line 692.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FFlagsException {
    NV,
    DZ,
    OF,
    UF,
    NX,
}

/// Internal type ExtendOp: defined at src/isa/riscv64/inst.isle line 1843.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendOp {
    Zero,
    Signed,
}

/// Internal type CmpResult: defined at src/isa/riscv64/inst.isle line 2797.
#[derive(Clone, Debug)]
pub enum CmpResult {
    Result { result: XReg, invert: bool },
}

/// Internal type VecElementWidth: defined at src/isa/riscv64/inst_vector.isle line 2.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecElementWidth {
    E8,
    E16,
    E32,
    E64,
}

/// Internal type VecLmul: defined at src/isa/riscv64/inst_vector.isle line 15.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLmul {
    LmulF8,
    LmulF4,
    LmulF2,
    Lmul1,
    Lmul2,
    Lmul4,
    Lmul8,
}

/// Internal type VecTailMode: defined at src/isa/riscv64/inst_vector.isle line 28.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecTailMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecMaskMode: defined at src/isa/riscv64/inst_vector.isle line 38.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMaskMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecAvl: defined at src/isa/riscv64/inst_vector.isle line 50.
#[derive(Clone, Debug)]
pub enum VecAvl {
    Static { size: UImm5 },
}

/// Internal type VecOpCategory: defined at src/isa/riscv64/inst_vector.isle line 64.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecOpCategory {
    OPIVV,
    OPFVV,
    OPMVV,
    OPIVI,
    OPIVX,
    OPFVF,
    OPMVX,
    OPCFG,
}

/// Internal type VecOpMasking: defined at src/isa/riscv64/inst_vector.isle line 79.
#[derive(Clone, Debug)]
pub enum VecOpMasking {
    Enabled { reg: Reg },
    Disabled,
}

/// Internal type VecAluOpRRR: defined at src/isa/riscv64/inst_vector.isle line 91.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRR {
    VaddVV,
    VsaddVV,
    VsadduVV,
    VsubVV,
    VssubVV,
    VssubuVV,
    VmulVV,
    VmulhVV,
    VmulhuVV,
    VsllVV,
    VsrlVV,
    VsraVV,
    VandVV,
    VorVV,
    VxorVV,
    VmaxVV,
    VmaxuVV,
    VminVV,
    VminuVV,
    VfaddVV,
    VfsubVV,
    VfmulVV,
    VfdivVV,
    VfsgnjnVV,
    VmergeVVM,
    VredmaxuVS,
    VredminuVS,
    VaddVX,
    VsaddVX,
    VsadduVX,
    VsubVX,
    VrsubVX,
    VssubVX,
    VssubuVX,
    VsllVX,
    VsrlVX,
    VsraVX,
    VandVX,
    VorVX,
    VxorVX,
    VmaxVX,
    VmaxuVX,
    VminVX,
    VminuVX,
    VslidedownVX,
    VfaddVF,
    VfsubVF,
    VfrsubVF,
    VfmulVF,
    VfdivVF,
    VfrdivVF,
    VmergeVXM,
    VfmergeVFM,
    VmsltVX,
}

/// Internal type VecAluOpRRImm5: defined at src/isa/riscv64/inst_vector.isle line 152.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRImm5 {
    VaddVI,
    VsaddVI,
    VsadduVI,
    VrsubVI,
    VsllVI,
    VsrlVI,
    VsraVI,
    VandVI,
    VorVI,
    VxorVI,
    VslidedownVI,
    VmergeVIM,
}

/// Internal type VecAluOpRImm5: defined at src/isa/riscv64/inst_vector.isle line 169.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRImm5 {
    VmvVI,
}

/// Internal type VecAluOpRR: defined at src/isa/riscv64/inst_vector.isle line 176.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRR {
    VmvSX,
    VmvXS,
    VfmvSF,
    VfmvFS,
    VmvVV,
    VmvVX,
    VfmvVF,
    VfsqrtV,
}

/// Internal type VecAMode: defined at src/isa/riscv64/inst_vector.isle line 194.
#[derive(Clone, Debug)]
pub enum VecAMode {
    UnitStride { base: AMode },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 65.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 69.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 89.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 138.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 149.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 160.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 159"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 165.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 164"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 170.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 169"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 318.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 320.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 323.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 317"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 331.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 336.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 338.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 340.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 335"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 365.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 364"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 395.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 396.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 394"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 401.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 403.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 400"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 416.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 410.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 409"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 447.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 453.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 465.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 481.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 488.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 501.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 441.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 433.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 431"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 519.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 526.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 537.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 542.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 547.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 552.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 557.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 535"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 566.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 574.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 583.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 591.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 600.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 660.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 668.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 677.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 685.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 694.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 613.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 621.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 630.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 638.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 647.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 707.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 715.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 724.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 732.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 741.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 753.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 761.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 778.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 770.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 786.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 795.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 563"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 990.
    return v2;
}

// Generated as internal constructor for term put_in_xreg.
pub fn constructor_put_in_xreg<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 758.
    return v2;
}

// Generated as internal constructor for term output_xreg.
pub fn constructor_output_xreg<C: Context>(ctx: &mut C, arg0: XReg) -> InstOutput {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 763.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_reg.
pub fn constructor_writable_xreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableXReg) -> Reg {
    let v1 = C::writable_xreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 778.
    return v2;
}

// Generated as internal constructor for term xreg_to_value_regs.
pub fn constructor_xreg_to_value_regs<C: Context>(ctx: &mut C, arg0: XReg) -> ValueRegs {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 788.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_value_regs.
pub fn constructor_writable_xreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXReg,
) -> ValueRegs {
    let v1 = constructor_writable_xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 793.
    return v2;
}

// Generated as internal constructor for term temp_writable_xreg.
pub fn constructor_temp_writable_xreg<C: Context>(ctx: &mut C) -> WritableXReg {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::writable_xreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 798.
    return v2;
}

// Generated as internal constructor for term put_in_freg.
pub fn constructor_put_in_freg<C: Context>(ctx: &mut C, arg0: Value) -> FReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::freg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 819.
    return v2;
}

// Generated as internal constructor for term output_freg.
pub fn constructor_output_freg<C: Context>(ctx: &mut C, arg0: FReg) -> InstOutput {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 824.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_reg.
pub fn constructor_writable_freg_to_reg<C: Context>(ctx: &mut C, arg0: WritableFReg) -> Reg {
    let v1 = C::writable_freg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 839.
    return v2;
}

// Generated as internal constructor for term freg_to_value_regs.
pub fn constructor_freg_to_value_regs<C: Context>(ctx: &mut C, arg0: FReg) -> ValueRegs {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 849.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_value_regs.
pub fn constructor_writable_freg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableFReg,
) -> ValueRegs {
    let v1 = constructor_writable_freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 854.
    return v2;
}

// Generated as internal constructor for term temp_writable_freg.
pub fn constructor_temp_writable_freg<C: Context>(ctx: &mut C) -> WritableFReg {
    let v1 = C::temp_writable_reg(ctx, F64);
    let v2 = C::writable_freg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 859.
    return v2;
}

// Generated as internal constructor for term put_in_vreg.
pub fn constructor_put_in_vreg<C: Context>(ctx: &mut C, arg0: Value) -> VReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::vreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 881.
    return v2;
}

// Generated as internal constructor for term output_vreg.
pub fn constructor_output_vreg<C: Context>(ctx: &mut C, arg0: VReg) -> InstOutput {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 886.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_reg.
pub fn constructor_writable_vreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableVReg) -> Reg {
    let v1 = C::writable_vreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 901.
    return v2;
}

// Generated as internal constructor for term vreg_to_value_regs.
pub fn constructor_vreg_to_value_regs<C: Context>(ctx: &mut C, arg0: VReg) -> ValueRegs {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 911.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_value_regs.
pub fn constructor_writable_vreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableVReg,
) -> ValueRegs {
    let v1 = constructor_writable_vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 916.
    return v2;
}

// Generated as internal constructor for term temp_writable_vreg.
pub fn constructor_temp_writable_vreg<C: Context>(ctx: &mut C) -> WritableVReg {
    let v1 = C::temp_writable_reg(ctx, I8X16);
    let v2 = C::writable_vreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 921.
    return v2;
}

// Generated as internal constructor for term gen_float_round.
pub fn constructor_gen_float_round<C: Context>(
    ctx: &mut C,
    arg0: &FloatRoundOP,
    arg1: Reg,
    arg2: Type,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg2);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_freg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v7 = C::writable_freg_to_writable_reg(ctx, v5);
    let v8 = MInst::FloatRound {
        op: arg0.clone(),
        rd: v3,
        int_tmp: v6,
        f_tmp: v7,
        rs: arg1,
        ty: arg2,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 952.
    return v10;
}

// Generated as internal constructor for term gen_float_select_pseudo.
pub fn constructor_gen_float_select_pseudo<C: Context>(
    ctx: &mut C,
    arg0: &FloatSelectOP,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg3);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = MInst::FloatSelectPseudo {
        op: arg0.clone(),
        rd: v4,
        tmp: v6,
        rs1: arg1,
        rs2: arg2,
        ty: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 962.
    return v9;
}

// Generated as internal constructor for term gen_float_select.
pub fn constructor_gen_float_select<C: Context>(
    ctx: &mut C,
    arg0: &FloatSelectOP,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg3);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = MInst::FloatSelect {
        op: arg0.clone(),
        rd: v4,
        tmp: v6,
        rs1: arg1,
        rs2: arg2,
        ty: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 971.
    return v9;
}

// Generated as internal constructor for term rv_add.
pub fn constructor_rv_add<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Add, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 986.
    return v6;
}

// Generated as internal constructor for term rv_addi.
pub fn constructor_rv_addi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 992.
    return v5;
}

// Generated as internal constructor for term rv_sub.
pub fn constructor_rv_sub<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 998.
    return v6;
}

// Generated as internal constructor for term rv_neg.
pub fn constructor_rv_neg<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v2, v3);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1004.
    return v5;
}

// Generated as internal constructor for term rv_sll.
pub fn constructor_rv_sll<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1010.
    return v6;
}

// Generated as internal constructor for term rv_slli.
pub fn constructor_rv_slli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1016.
    return v5;
}

// Generated as internal constructor for term rv_srl.
pub fn constructor_rv_srl<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1022.
    return v6;
}

// Generated as internal constructor for term rv_srli.
pub fn constructor_rv_srli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1028.
    return v5;
}

// Generated as internal constructor for term rv_sra.
pub fn constructor_rv_sra<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sra, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1034.
    return v6;
}

// Generated as internal constructor for term rv_srai.
pub fn constructor_rv_srai<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srai, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1040.
    return v5;
}

// Generated as internal constructor for term rv_or.
pub fn constructor_rv_or<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1046.
    return v6;
}

// Generated as internal constructor for term rv_ori.
pub fn constructor_rv_ori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Ori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1052.
    return v5;
}

// Generated as internal constructor for term rv_xor.
pub fn constructor_rv_xor<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Xor, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1058.
    return v6;
}

// Generated as internal constructor for term rv_xori.
pub fn constructor_rv_xori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Xori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1064.
    return v5;
}

// Generated as internal constructor for term rv_not.
pub fn constructor_rv_not<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, -0x1);
    let v3 = constructor_rv_xori(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1070.
    return v3;
}

// Generated as internal constructor for term rv_and.
pub fn constructor_rv_and<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::And, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1076.
    return v6;
}

// Generated as internal constructor for term rv_andi.
pub fn constructor_rv_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Andi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1082.
    return v5;
}

// Generated as internal constructor for term rv_sltu.
pub fn constructor_rv_sltu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::SltU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1088.
    return v6;
}

// Generated as internal constructor for term rv_snez.
pub fn constructor_rv_snez<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::xreg_new(ctx, v1);
    let v3 = constructor_rv_sltu(ctx, v2, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1094.
    return v3;
}

// Generated as internal constructor for term rv_sltiu.
pub fn constructor_rv_sltiu<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SltiU, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1100.
    return v5;
}

// Generated as internal constructor for term rv_seqz.
pub fn constructor_rv_seqz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 0x1);
    let v3 = constructor_rv_sltiu(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1106.
    return v3;
}

// Generated as internal constructor for term rv_addw.
pub fn constructor_rv_addw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Addw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1116.
    return v6;
}

// Generated as internal constructor for term rv_addiw.
pub fn constructor_rv_addiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1122.
    return v5;
}

// Generated as internal constructor for term rv_sextw.
pub fn constructor_rv_sextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 0x0);
    let v3 = constructor_rv_addiw(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1128.
    return v3;
}

// Generated as internal constructor for term rv_subw.
pub fn constructor_rv_subw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Subw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1134.
    return v6;
}

// Generated as internal constructor for term rv_sllw.
pub fn constructor_rv_sllw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sllw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1140.
    return v6;
}

// Generated as internal constructor for term rv_slliw.
pub fn constructor_rv_slliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slliw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1146.
    return v5;
}

// Generated as internal constructor for term rv_srlw.
pub fn constructor_rv_srlw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srlw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1152.
    return v6;
}

// Generated as internal constructor for term rv_srliw.
pub fn constructor_rv_srliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SrliW, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1158.
    return v5;
}

// Generated as internal constructor for term rv_sraw.
pub fn constructor_rv_sraw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sraw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1164.
    return v6;
}

// Generated as internal constructor for term rv_sraiw.
pub fn constructor_rv_sraiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sraiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1170.
    return v5;
}

// Generated as internal constructor for term rv_mul.
pub fn constructor_rv_mul<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mul, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1180.
    return v6;
}

// Generated as internal constructor for term rv_mulh.
pub fn constructor_rv_mulh<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulh, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1186.
    return v6;
}

// Generated as internal constructor for term rv_mulhu.
pub fn constructor_rv_mulhu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulhu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1192.
    return v6;
}

// Generated as internal constructor for term rv_div.
pub fn constructor_rv_div<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Div, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1198.
    return v6;
}

// Generated as internal constructor for term rv_divu.
pub fn constructor_rv_divu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::DivU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1204.
    return v6;
}

// Generated as internal constructor for term rv_rem.
pub fn constructor_rv_rem<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rem, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1210.
    return v6;
}

// Generated as internal constructor for term rv_remu.
pub fn constructor_rv_remu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::RemU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1216.
    return v6;
}

// Generated as internal constructor for term rv_mulw.
pub fn constructor_rv_mulw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1227.
    return v6;
}

// Generated as internal constructor for term rv_divw.
pub fn constructor_rv_divw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1233.
    return v6;
}

// Generated as internal constructor for term rv_divuw.
pub fn constructor_rv_divuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1239.
    return v6;
}

// Generated as internal constructor for term rv_remw.
pub fn constructor_rv_remw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1245.
    return v6;
}

// Generated as internal constructor for term rv_remuw.
pub fn constructor_rv_remuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1251.
    return v6;
}

// Generated as internal constructor for term rv_fadd.
pub fn constructor_rv_fadd<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1260.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1261.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fadd", "src/isa/riscv64/inst.isle line 1259"
    )
}

// Generated as internal constructor for term rv_fsub.
pub fn constructor_rv_fsub<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1265.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1266.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsub", "src/isa/riscv64/inst.isle line 1264"
    )
}

// Generated as internal constructor for term rv_fmul.
pub fn constructor_rv_fmul<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1270.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1271.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmul", "src/isa/riscv64/inst.isle line 1269"
    )
}

// Generated as internal constructor for term rv_fdiv.
pub fn constructor_rv_fdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1275.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1276.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fdiv", "src/isa/riscv64/inst.isle line 1274"
    )
}

// Generated as internal constructor for term rv_fsqrt.
pub fn constructor_rv_fsqrt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v4 = C::freg_to_reg(ctx, arg1);
            let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtS, F32, v4);
            let v6 = C::freg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 1280.
            return v6;
        }
        F64 => {
            let v4 = C::freg_to_reg(ctx, arg1);
            let v9 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtD, F64, v4);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 1281.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsqrt", "src/isa/riscv64/inst.isle line 1279"
    )
}

// Generated as internal constructor for term rv_fmadd.
pub fn constructor_rv_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddS, F32, v6, v7, v8);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 1285.
            return v10;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v13 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddD, F64, v6, v7, v8);
            let v14 = C::freg_new(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 1286.
            return v14;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmadd", "src/isa/riscv64/inst.isle line 1284"
    )
}

// Generated as internal constructor for term rv_fmvxw.
pub fn constructor_rv_fmvxw<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvXW, I32, v3);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1290.
    return v5;
}

// Generated as internal constructor for term rv_fmvxd.
pub fn constructor_rv_fmvxd<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvXD, I64, v3);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1294.
    return v5;
}

// Generated as internal constructor for term rv_fmvwx.
pub fn constructor_rv_fmvwx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvWX, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1298.
    return v5;
}

// Generated as internal constructor for term rv_fmvdx.
pub fn constructor_rv_fmvdx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvDX, F64, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1302.
    return v5;
}

// Generated as internal constructor for term rv_fcvtds.
pub fn constructor_rv_fcvtds<C: Context>(ctx: &mut C, arg0: FReg) -> FReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDS, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1306.
    return v5;
}

// Generated as internal constructor for term rv_fcvtsd.
pub fn constructor_rv_fcvtsd<C: Context>(ctx: &mut C, arg0: FReg) -> FReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSD, F64, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1310.
    return v5;
}

// Generated as internal constructor for term rv_fsgnj.
pub fn constructor_rv_fsgnj<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1316.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1317.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnj", "src/isa/riscv64/inst.isle line 1315"
    )
}

// Generated as internal constructor for term rv_fsgnjn.
pub fn constructor_rv_fsgnjn<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1323.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1324.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjn", "src/isa/riscv64/inst.isle line 1322"
    )
}

// Generated as internal constructor for term rv_fneg.
pub fn constructor_rv_fneg<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjn(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1329.
    return v2;
}

// Generated as internal constructor for term rv_fsgnjx.
pub fn constructor_rv_fsgnjx<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1335.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1336.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjx", "src/isa/riscv64/inst.isle line 1334"
    )
}

// Generated as internal constructor for term rv_fabs.
pub fn constructor_rv_fabs<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjx(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1341.
    return v2;
}

// Generated as internal constructor for term rv_feq.
pub fn constructor_rv_feq<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqS, I64, v5, v6);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1345.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqD, I64, v5, v6);
            let v11 = C::xreg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1346.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_feq", "src/isa/riscv64/inst.isle line 1344"
    )
}

// Generated as internal constructor for term rv_flt.
pub fn constructor_rv_flt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltS, I64, v5, v6);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1350.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltD, I64, v5, v6);
            let v11 = C::xreg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1351.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_flt", "src/isa/riscv64/inst.isle line 1349"
    )
}

// Generated as internal constructor for term rv_fle.
pub fn constructor_rv_fle<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleS, I64, v5, v6);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1355.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleD, I64, v5, v6);
            let v11 = C::xreg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1356.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fle", "src/isa/riscv64/inst.isle line 1354"
    )
}

// Generated as internal constructor for term rv_fgt.
pub fn constructor_rv_fgt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_flt(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1361.
    return v3;
}

// Generated as internal constructor for term rv_fge.
pub fn constructor_rv_fge<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_fle(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1366.
    return v3;
}

// Generated as internal constructor for term rv_adduw.
pub fn constructor_rv_adduw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Adduw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1374.
    return v6;
}

// Generated as internal constructor for term rv_zextw.
pub fn constructor_rv_zextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::xreg_new(ctx, v1);
    let v3 = constructor_rv_adduw(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1381.
    return v3;
}

// Generated as internal constructor for term rv_slliuw.
pub fn constructor_rv_slliuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SlliUw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1387.
    return v5;
}

// Generated as internal constructor for term rv_andn.
pub fn constructor_rv_andn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Andn, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1396.
    return v6;
}

// Generated as internal constructor for term rv_orn.
pub fn constructor_rv_orn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Orn, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1402.
    return v6;
}

// Generated as internal constructor for term rv_clz.
pub fn constructor_rv_clz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1407.
    return v4;
}

// Generated as internal constructor for term rv_clzw.
pub fn constructor_rv_clzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1412.
    return v4;
}

// Generated as internal constructor for term rv_ctz.
pub fn constructor_rv_ctz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1417.
    return v4;
}

// Generated as internal constructor for term rv_ctzw.
pub fn constructor_rv_ctzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1422.
    return v4;
}

// Generated as internal constructor for term rv_cpop.
pub fn constructor_rv_cpop<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpop, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1427.
    return v4;
}

// Generated as internal constructor for term rv_max.
pub fn constructor_rv_max<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Max, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1432.
    return v6;
}

// Generated as internal constructor for term rv_sextb.
pub fn constructor_rv_sextb<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sextb, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1437.
    return v6;
}

// Generated as internal constructor for term rv_sexth.
pub fn constructor_rv_sexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1442.
    return v6;
}

// Generated as internal constructor for term rv_zexth.
pub fn constructor_rv_zexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Zexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1447.
    return v6;
}

// Generated as internal constructor for term rv_rol.
pub fn constructor_rv_rol<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rol, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1452.
    return v6;
}

// Generated as internal constructor for term rv_rolw.
pub fn constructor_rv_rolw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rolw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1457.
    return v6;
}

// Generated as internal constructor for term rv_ror.
pub fn constructor_rv_ror<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Ror, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1462.
    return v6;
}

// Generated as internal constructor for term rv_rorw.
pub fn constructor_rv_rorw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rorw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1467.
    return v6;
}

// Generated as internal constructor for term rv_rev8.
pub fn constructor_rv_rev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Rev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1472.
    return v4;
}

// Generated as internal constructor for term rv_brev8.
pub fn constructor_rv_brev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Brev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1480.
    return v4;
}

// Generated as internal constructor for term rv_bseti.
pub fn constructor_rv_bseti<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bseti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1485.
    return v5;
}

// Generated as internal constructor for term rv_pack.
pub fn constructor_rv_pack<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Pack, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1493.
    return v6;
}

// Generated as internal constructor for term rv_packw.
pub fn constructor_rv_packw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Packw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1498.
    return v6;
}

// Generated as internal constructor for term shift_mask.
pub fn constructor_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src/isa/riscv64/inst.isle line 1506.
    return v5;
}

// Generated as internal constructor for term imm12_zero.
pub fn constructor_imm12_zero<C: Context>(ctx: &mut C) -> Imm12 {
    let v1 = C::imm12_const(ctx, 0x0);
    // Rule at src/isa/riscv64/inst.isle line 1516.
    return v1;
}

// Generated as internal constructor for term load_imm12.
pub fn constructor_load_imm12<C: Context>(ctx: &mut C, arg0: i32) -> Reg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::xreg_new(ctx, v1);
    let v3 = C::imm12_const(ctx, arg0);
    let v4 = constructor_rv_addi(ctx, v2, v3);
    let v5 = C::xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1524.
    return v5;
}

// Generated as internal constructor for term u64_to_imm12.
pub fn constructor_u64_to_imm12<C: Context>(ctx: &mut C, arg0: u64) -> Option<Imm12> {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1556.
        return Some(v2);
    }
    None
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(ctx: &mut C, arg0: &FpuOPRR, arg1: Type, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg1);
    let v4 = C::gen_default_frm(ctx);
    let v5 = MInst::FpuRR {
        alu_op: arg0.clone(),
        frm: v4,
        rd: v3,
        rs: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1599.
    return v7;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(ctx: &mut C, arg0: &AluOPRRR, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRR {
        alu_op: arg0.clone(),
        rd: v4,
        rs1: arg1,
        rs2: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1606.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRR,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg1);
    let v5 = C::gen_default_frm(ctx);
    let v6 = MInst::FpuRRR {
        alu_op: arg0.clone(),
        frm: v5,
        rd: v4,
        rs1: arg2,
        rs2: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1617.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRRR,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg1);
    let v6 = C::gen_default_frm(ctx);
    let v7 = MInst::FpuRRRR {
        alu_op: arg0.clone(),
        frm: v6,
        rd: v5,
        rs1: arg2,
        rs2: arg3,
        rs3: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1625.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRI,
    arg1: Reg,
    arg2: Imm12,
) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v4,
        rs: arg1,
        imm12: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1633.
    return v7;
}

// Generated as internal constructor for term alu_rr_funct12.
pub fn constructor_alu_rr_funct12<C: Context>(ctx: &mut C, arg0: &AluOPRRI, arg1: Reg) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = constructor_imm12_zero(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v3,
        rs: arg1,
        imm12: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v2);
    // Rule at src/isa/riscv64/inst.isle line 1641.
    return v7;
}

// Generated as internal constructor for term select_addi.
pub fn constructor_select_addi<C: Context>(ctx: &mut C, arg0: Type) -> AluOPRRI {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1647.
        return AluOPRRI::Addiw;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/riscv64/inst.isle line 1648.
        return AluOPRRI::Addi;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_addi", "src/isa/riscv64/inst.isle line 1646"
    )
}

// Generated as internal constructor for term gen_bnot.
pub fn constructor_gen_bnot<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> ValueRegs {
    let v1 = C::ty_scalar_float(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v6 = C::freg_new(ctx, v5);
        let v7 = constructor_move_f_to_x(ctx, v6, v2);
        let v8 = constructor_rv_not(ctx, v7);
        let v9 = constructor_float_int_of_same_size(ctx, v2);
        let v10 = constructor_move_x_to_f(ctx, v8, v9);
        let v11 = C::freg_to_reg(ctx, v10);
        let v12 = C::value_reg(ctx, v11);
        // Rule at src/isa/riscv64/inst.isle line 1652.
        return v12;
    }
    if arg0 == I128 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v13 = C::xreg_new(ctx, v5);
        let v14 = constructor_rv_not(ctx, v13);
        let v16 = C::value_regs_get(ctx, arg1, 0x1);
        let v17 = C::xreg_new(ctx, v16);
        let v18 = constructor_rv_not(ctx, v17);
        let v19 = C::xreg_to_reg(ctx, v14);
        let v20 = C::xreg_to_reg(ctx, v18);
        let v21 = C::value_regs(ctx, v19, v20);
        // Rule at src/isa/riscv64/inst.isle line 1659.
        return v21;
    }
    let v22 = C::ty_int_ref_scalar_64_extract(ctx, arg0);
    if let Some(v23) = v22 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v13 = C::xreg_new(ctx, v5);
        let v14 = constructor_rv_not(ctx, v13);
        let v19 = C::xreg_to_reg(ctx, v14);
        let v24 = C::value_reg(ctx, v19);
        // Rule at src/isa/riscv64/inst.isle line 1664.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bnot", "src/isa/riscv64/inst.isle line 1651"
    )
}

// Generated as internal constructor for term gen_and.
pub fn constructor_gen_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_and(ctx, v5, v7);
        let v11 = C::value_regs_get(ctx, arg1, 0x1);
        let v12 = C::xreg_new(ctx, v11);
        let v13 = C::value_regs_get(ctx, arg2, 0x1);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_and(ctx, v12, v14);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v16 = C::xreg_to_reg(ctx, v15);
        let v17 = C::value_regs(ctx, v9, v16);
        // Rule at src/isa/riscv64/inst.isle line 1669.
        return v17;
    }
    let v18 = C::fits_in_64(ctx, arg0);
    if let Some(v19) = v18 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_and(ctx, v5, v7);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v20 = C::value_reg(ctx, v9);
        // Rule at src/isa/riscv64/inst.isle line 1674.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_and", "src/isa/riscv64/inst.isle line 1668"
    )
}

// Generated as internal constructor for term gen_andi.
pub fn constructor_gen_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: u64) -> XReg {
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = constructor_rv_andi(ctx, arg0, v3);
        // Rule at src/isa/riscv64/inst.isle line 1679.
        return v4;
    }
    let v6 = C::imm(ctx, I64, arg1);
    let v7 = C::xreg_new(ctx, v6);
    let v8 = constructor_rv_and(ctx, arg0, v7);
    // Rule at src/isa/riscv64/inst.isle line 1682.
    return v8;
}

// Generated as internal constructor for term gen_or.
pub fn constructor_gen_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v11 = C::value_regs_get(ctx, arg1, 0x1);
        let v12 = C::xreg_new(ctx, v11);
        let v13 = C::value_regs_get(ctx, arg2, 0x1);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_or(ctx, v12, v14);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v16 = C::xreg_to_reg(ctx, v15);
        let v17 = C::value_regs(ctx, v9, v16);
        // Rule at src/isa/riscv64/inst.isle line 1687.
        return v17;
    }
    let v18 = C::fits_in_64(ctx, arg0);
    if let Some(v19) = v18 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v20 = C::value_reg(ctx, v9);
        // Rule at src/isa/riscv64/inst.isle line 1692.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_or", "src/isa/riscv64/inst.isle line 1686"
    )
}

// Generated as internal constructor for term lower_bit_reverse.
pub fn constructor_lower_bit_reverse<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    match arg1 {
        I8 => {
            let v3 = constructor_gen_brev8(ctx, arg0, I8);
            // Rule at src/isa/riscv64/inst.isle line 1699.
            return v3;
        }
        I16 => {
            let v5 = constructor_gen_brev8(ctx, arg0, I16);
            let v6 = C::xreg_new(ctx, v5);
            let v7 = constructor_gen_rev8(ctx, v6);
            let v9 = C::imm12_const(ctx, 0x30);
            let v10 = constructor_rv_srli(ctx, v7, v9);
            let v11 = C::xreg_to_reg(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1703.
            return v11;
        }
        I32 => {
            let v13 = constructor_gen_brev8(ctx, arg0, I32);
            let v14 = C::xreg_new(ctx, v13);
            let v15 = constructor_gen_rev8(ctx, v14);
            let v17 = C::imm12_const(ctx, 0x20);
            let v18 = constructor_rv_srli(ctx, v15, v17);
            let v19 = C::xreg_to_reg(ctx, v18);
            // Rule at src/isa/riscv64/inst.isle line 1711.
            return v19;
        }
        I64 => {
            let v20 = C::xreg_new(ctx, arg0);
            let v21 = constructor_gen_rev8(ctx, v20);
            let v22 = C::xreg_to_reg(ctx, v21);
            let v24 = constructor_gen_brev8(ctx, v22, I64);
            // Rule at src/isa/riscv64/inst.isle line 1719.
            return v24;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bit_reverse", "src/isa/riscv64/inst.isle line 1696"
    )
}

// Generated as internal constructor for term lower_ctz.
pub fn constructor_lower_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::has_zbb(ctx);
    if v8 == true {
        match arg0 {
            I32 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v15 = constructor_rv_ctzw(ctx, v3);
                let v16 = C::xreg_to_reg(ctx, v15);
                // Rule at src/isa/riscv64/inst.isle line 1734.
                return v16;
            }
            I64 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v17 = constructor_rv_ctz(ctx, v3);
                let v18 = C::xreg_to_reg(ctx, v17);
                // Rule at src/isa/riscv64/inst.isle line 1738.
                return v18;
            }
            _ => {}
        }
        let v6 = C::fits_in_16(ctx, arg0);
        if let Some(v7) = v6 {
            let v9 = C::ty_bits(ctx, v7);
            let v10 = C::u8_as_u64(ctx, v9);
            let v11 = constructor_gen_bseti(ctx, arg1, v10);
            let v12 = C::xreg_new(ctx, v11);
            let v13 = constructor_rv_ctzw(ctx, v12);
            let v14 = C::xreg_to_reg(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 1729.
            return v14;
        }
    }
    let v3 = C::xreg_new(ctx, arg1);
    let v4 = constructor_gen_cltz(ctx, false, v3, arg0);
    let v5 = C::xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1726.
    return v5;
}

// Generated as internal constructor for term lower_ctz_128.
pub fn constructor_lower_ctz_128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::xreg_new(ctx, v5);
    let v8 = C::xreg_to_reg(ctx, v6);
    let v9 = constructor_lower_ctz(ctx, I64, v8);
    let v10 = C::xreg_new(ctx, v9);
    let v11 = C::xreg_to_reg(ctx, v3);
    let v12 = constructor_lower_ctz(ctx, I64, v11);
    let v13 = C::xreg_new(ctx, v12);
    let v15 = C::zero_reg(ctx);
    let v16 = C::xreg_new(ctx, v15);
    let v18 = C::zero_reg(ctx);
    let v17 = C::xreg_to_reg(ctx, v10);
    let v19 = C::gen_select_reg(ctx, &IntCC::Equal, v3, v16, v17, v18);
    let v20 = C::xreg_new(ctx, v19);
    let v21 = constructor_rv_add(ctx, v13, v20);
    let v22 = C::xreg_to_reg(ctx, v21);
    let v23 = C::value_reg(ctx, v22);
    let v26 = constructor_extend(ctx, v23, &ExtendOp::Zero, I64, I128);
    // Rule at src/isa/riscv64/inst.isle line 1745.
    return v26;
}

// Generated as internal constructor for term lower_clz.
pub fn constructor_lower_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    let v6 = C::has_zbb(ctx);
    if v6 == true {
        match arg0 {
            I32 => {
                let v15 = constructor_rv_clzw(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 1768.
                return v15;
            }
            I64 => {
                let v16 = constructor_rv_clz(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 1772.
                return v16;
            }
            _ => {}
        }
        let v4 = C::fits_in_16(ctx, arg0);
        if let Some(v5) = v4 {
            let v8 = constructor_zext(ctx, arg1, v5, I64);
            let v9 = constructor_rv_clz(ctx, v8);
            let v10 = C::ty_bits(ctx, v5);
            let v11 = C::u8_as_i32(ctx, v10);
            let v13 = C::imm12_const_add(ctx, v11, -0x40);
            let v14 = constructor_rv_addi(ctx, v9, v13);
            // Rule at src/isa/riscv64/inst.isle line 1760.
            return v14;
        }
    }
    let v3 = constructor_gen_cltz(ctx, true, arg1, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1757.
    return v3;
}

// Generated as internal constructor for term lower_clz_i128.
pub fn constructor_lower_clz_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::xreg_new(ctx, v5);
    let v8 = constructor_lower_clz(ctx, I64, v6);
    let v9 = constructor_lower_clz(ctx, I64, v3);
    let v11 = C::zero_reg(ctx);
    let v12 = C::xreg_new(ctx, v11);
    let v14 = C::zero_reg(ctx);
    let v13 = C::xreg_to_reg(ctx, v9);
    let v15 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v12, v13, v14);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_add(ctx, v8, v16);
    let v18 = C::xreg_to_reg(ctx, v17);
    let v19 = C::value_reg(ctx, v18);
    let v22 = constructor_extend(ctx, v19, &ExtendOp::Zero, I64, I128);
    // Rule at src/isa/riscv64/inst.isle line 1780.
    return v22;
}

// Generated as internal constructor for term lower_cls.
pub fn constructor_lower_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    let v3 = constructor_sext(ctx, arg1, arg0, I64);
    let v5 = C::zero_reg(ctx);
    let v6 = C::xreg_new(ctx, v5);
    let v7 = constructor_rv_not(ctx, v3);
    let v8 = C::xreg_to_reg(ctx, v7);
    let v9 = C::xreg_to_reg(ctx, v3);
    let v10 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v3, v6, v8, v9);
    let v11 = C::xreg_new(ctx, v10);
    let v12 = constructor_lower_clz(ctx, arg0, v11);
    let v14 = C::imm12_const(ctx, -0x1);
    let v15 = constructor_rv_addi(ctx, v12, v14);
    // Rule at src/isa/riscv64/inst.isle line 1793.
    return v15;
}

// Generated as internal constructor for term lower_cls_i128.
pub fn constructor_lower_cls_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::xreg_new(ctx, v5);
    let v8 = C::zero_reg(ctx);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_not(ctx, v3);
    let v11 = C::xreg_to_reg(ctx, v10);
    let v12 = C::xreg_to_reg(ctx, v3);
    let v13 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v6, v9, v11, v12);
    let v14 = C::xreg_new(ctx, v13);
    let v15 = C::zero_reg(ctx);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_not(ctx, v6);
    let v18 = C::xreg_to_reg(ctx, v17);
    let v19 = C::xreg_to_reg(ctx, v6);
    let v20 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v6, v16, v18, v19);
    let v21 = C::xreg_new(ctx, v20);
    let v22 = C::xreg_to_reg(ctx, v14);
    let v23 = C::xreg_to_reg(ctx, v21);
    let v24 = C::value_regs(ctx, v22, v23);
    let v25 = constructor_lower_clz_i128(ctx, v24);
    let v26 = C::value_regs_get(ctx, v25, 0x0);
    let v27 = C::xreg_new(ctx, v26);
    let v29 = C::imm12_const(ctx, -0x1);
    let v30 = constructor_rv_addi(ctx, v27, v29);
    let v31 = C::xreg_to_reg(ctx, v30);
    let v32 = C::value_reg(ctx, v31);
    let v36 = constructor_extend(ctx, v32, &ExtendOp::Zero, I64, I128);
    // Rule at src/isa/riscv64/inst.isle line 1803.
    return v36;
}

// Generated as internal constructor for term gen_cltz.
pub fn constructor_gen_cltz<C: Context>(ctx: &mut C, arg0: bool, arg1: XReg, arg2: Type) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v9 = C::xreg_to_reg(ctx, arg1);
    let v10 = MInst::Cltz {
        leading: arg0,
        sum: v6,
        step: v7,
        tmp: v8,
        rs: v9,
        ty: arg2,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_xreg_to_xreg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1815.
    return v12;
}

// Generated as internal constructor for term ext_int_if_need.
pub fn constructor_ext_int_if_need<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: ValueRegs,
    arg2: Type,
) -> ValueRegs {
    match arg2 {
        I64 => {
            // Rule at src/isa/riscv64/inst.isle line 1831.
            return arg1;
        }
        I128 => {
            // Rule at src/isa/riscv64/inst.isle line 1832.
            return arg1;
        }
        _ => {}
    }
    match arg0 {
        true => {
            let v3 = C::fits_in_32(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = C::ty_int(ctx, v4);
                if let Some(v6) = v5 {
                    let v9 = constructor_extend(ctx, arg1, &ExtendOp::Signed, v6, I64);
                    // Rule at src/isa/riscv64/inst.isle line 1826.
                    return v9;
                }
            }
        }
        false => {
            let v3 = C::fits_in_32(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = C::ty_int(ctx, v4);
                if let Some(v6) = v5 {
                    let v11 = constructor_extend(ctx, arg1, &ExtendOp::Zero, v6, I64);
                    // Rule at src/isa/riscv64/inst.isle line 1828.
                    return v11;
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ext_int_if_need", "src/isa/riscv64/inst.isle line 1824"
    )
}

// Generated as internal constructor for term zext.
pub fn constructor_zext<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type, arg2: Type) -> XReg {
    let v3 = C::fits_in_64(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::xreg_to_reg(ctx, arg0);
        let v6 = C::value_reg(ctx, v5);
        let v8 = constructor_extend(ctx, v6, &ExtendOp::Zero, arg1, v4);
        let v10 = C::value_regs_get(ctx, v8, 0x0);
        let v11 = C::xreg_new(ctx, v10);
        // Rule at src/isa/riscv64/inst.isle line 1837.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext", "src/isa/riscv64/inst.isle line 1836"
    )
}

// Generated as internal constructor for term sext.
pub fn constructor_sext<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type, arg2: Type) -> XReg {
    let v3 = C::fits_in_64(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::xreg_to_reg(ctx, arg0);
        let v6 = C::value_reg(ctx, v5);
        let v8 = constructor_extend(ctx, v6, &ExtendOp::Signed, arg1, v4);
        let v10 = C::value_regs_get(ctx, v8, 0x0);
        let v11 = C::xreg_new(ctx, v10);
        // Rule at src/isa/riscv64/inst.isle line 1841.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext", "src/isa/riscv64/inst.isle line 1840"
    )
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: &ExtendOp,
    arg2: Type,
    arg3: Type,
) -> ValueRegs {
    if arg2 == arg3 {
        // Rule at src/isa/riscv64/inst.isle line 1935.
        return arg0;
    }
    match arg1 {
        &ExtendOp::Zero => {
            match arg3 {
                I64 => {
                    if arg2 == I32 {
                        let v50 = C::has_zba(ctx);
                        if v50 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v51 = constructor_rv_zextw(ctx, v10);
                            let v52 = C::xreg_to_reg(ctx, v51);
                            let v53 = C::value_reg(ctx, v52);
                            // Rule at src/isa/riscv64/inst.isle line 1913.
                            return v53;
                        }
                    }
                }
                I128 => {
                    let v54 = C::fits_in_64(ctx, arg2);
                    if let Some(v55) = v54 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v10 = C::xreg_new(ctx, v9);
                        let v64 = constructor_zext(ctx, v10, v55, I64);
                        let v66 = C::load_u64_constant(ctx, 0x0);
                        let v67 = C::xreg_new(ctx, v66);
                        let v68 = C::xreg_to_reg(ctx, v64);
                        let v69 = C::xreg_to_reg(ctx, v67);
                        let v70 = C::value_regs(ctx, v68, v69);
                        // Rule at src/isa/riscv64/inst.isle line 1928.
                        return v70;
                    }
                }
                _ => {}
            }
            match arg2 {
                I8 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v10 = C::xreg_new(ctx, v9);
                        let v24 = C::imm12_const(ctx, 0xFF);
                        let v25 = constructor_rv_andi(ctx, v10, v24);
                        let v26 = C::xreg_to_reg(ctx, v25);
                        let v27 = C::value_reg(ctx, v26);
                        // Rule at src/isa/riscv64/inst.isle line 1867.
                        return v27;
                    }
                }
                I16 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v40 = C::has_zbb(ctx);
                        if v40 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v47 = constructor_rv_zexth(ctx, v10);
                            let v48 = C::xreg_to_reg(ctx, v47);
                            let v49 = C::value_reg(ctx, v48);
                            // Rule at src/isa/riscv64/inst.isle line 1907.
                            return v49;
                        }
                        let v31 = C::has_zbkb(ctx);
                        if v31 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v32 = C::zero_reg(ctx);
                            let v33 = C::xreg_new(ctx, v32);
                            let v34 = constructor_rv_packw(ctx, v10, v33);
                            let v35 = C::xreg_to_reg(ctx, v34);
                            let v36 = C::value_reg(ctx, v35);
                            // Rule at src/isa/riscv64/inst.isle line 1882.
                            return v36;
                        }
                    }
                }
                I32 => {
                    if arg3 == I64 {
                        let v31 = C::has_zbkb(ctx);
                        if v31 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v32 = C::zero_reg(ctx);
                            let v33 = C::xreg_new(ctx, v32);
                            let v37 = constructor_rv_pack(ctx, v10, v33);
                            let v38 = C::xreg_to_reg(ctx, v37);
                            let v39 = C::value_reg(ctx, v38);
                            // Rule at src/isa/riscv64/inst.isle line 1888.
                            return v39;
                        }
                    }
                }
                _ => {}
            }
        }
        &ExtendOp::Signed => {
            match arg3 {
                I64 => {
                    if arg2 == I32 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v10 = C::xreg_new(ctx, v9);
                        let v28 = constructor_rv_sextw(ctx, v10);
                        let v29 = C::xreg_to_reg(ctx, v28);
                        let v30 = C::value_reg(ctx, v29);
                        // Rule at src/isa/riscv64/inst.isle line 1873.
                        return v30;
                    }
                }
                I128 => {
                    let v54 = C::fits_in_64(ctx, arg2);
                    if let Some(v55) = v54 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v10 = C::xreg_new(ctx, v9);
                        let v57 = constructor_sext(ctx, v10, v55, I64);
                        let v59 = C::imm12_const(ctx, 0x3F);
                        let v60 = constructor_rv_srai(ctx, v57, v59);
                        let v61 = C::xreg_to_reg(ctx, v57);
                        let v62 = C::xreg_to_reg(ctx, v60);
                        let v63 = C::value_regs(ctx, v61, v62);
                        // Rule at src/isa/riscv64/inst.isle line 1920.
                        return v63;
                    }
                }
                _ => {}
            }
            match arg2 {
                I8 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v40 = C::has_zbb(ctx);
                        if v40 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v41 = constructor_rv_sextb(ctx, v10);
                            let v42 = C::xreg_to_reg(ctx, v41);
                            let v43 = C::value_reg(ctx, v42);
                            // Rule at src/isa/riscv64/inst.isle line 1895.
                            return v43;
                        }
                    }
                }
                I16 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v40 = C::has_zbb(ctx);
                        if v40 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v44 = constructor_rv_sexth(ctx, v10);
                            let v45 = C::xreg_to_reg(ctx, v44);
                            let v46 = C::value_reg(ctx, v45);
                            // Rule at src/isa/riscv64/inst.isle line 1901.
                            return v46;
                        }
                    }
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v3 = C::fits_in_32(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = C::fits_in_64(ctx, arg3);
        if let Some(v7) = v6 {
            let v9 = C::value_regs_get(ctx, arg0, 0x0);
            let v10 = C::xreg_new(ctx, v9);
            let v12 = C::ty_bits(ctx, v4);
            let v13 = C::u8_as_u64(ctx, v12);
            let v14 = C::u64_sub(ctx, 0x40, v13);
            let v15 = C::imm_from_bits(ctx, v14);
            let v16 = constructor_rv_slli(ctx, v10, v15);
            let v17 = &constructor_extend_shift_op(ctx, arg1);
            let v18 = C::xreg_to_reg(ctx, v16);
            let v19 = constructor_alu_rr_imm12(ctx, v17, v18, v15);
            let v20 = C::xreg_new(ctx, v19);
            let v21 = C::xreg_to_reg(ctx, v20);
            let v22 = C::value_reg(ctx, v21);
            // Rule at src/isa/riscv64/inst.isle line 1858.
            return v22;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "extend", "src/isa/riscv64/inst.isle line 1849"
    )
}

// Generated as internal constructor for term extend_shift_op.
pub fn constructor_extend_shift_op<C: Context>(ctx: &mut C, arg0: &ExtendOp) -> AluOPRRI {
    match arg0 {
        &ExtendOp::Zero => {
            // Rule at src/isa/riscv64/inst.isle line 1853.
            return AluOPRRI::Srli;
        }
        &ExtendOp::Signed => {
            // Rule at src/isa/riscv64/inst.isle line 1854.
            return AluOPRRI::Srai;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "extend_shift_op", "src/isa/riscv64/inst.isle line 1852"
    )
}

// Generated as internal constructor for term lower_b128_binary.
pub fn constructor_lower_b128_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::value_regs_get(ctx, arg2, 0x0);
    let v6 = constructor_alu_rrr(ctx, arg0, v4, v5);
    let v7 = C::xreg_new(ctx, v6);
    let v9 = C::value_regs_get(ctx, arg1, 0x1);
    let v10 = C::value_regs_get(ctx, arg2, 0x1);
    let v11 = constructor_alu_rrr(ctx, arg0, v9, v10);
    let v12 = C::xreg_new(ctx, v11);
    let v13 = C::xreg_to_reg(ctx, v7);
    let v14 = C::xreg_to_reg(ctx, v12);
    let v15 = C::value_regs(ctx, v13, v14);
    // Rule at src/isa/riscv64/inst.isle line 1941.
    return v15;
}

// Generated as internal constructor for term lower_umlhi.
pub fn constructor_lower_umlhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    if arg0 == I64 {
        let v3 = constructor_rv_mulhu(ctx, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 1950.
        return v3;
    }
    let v5 = constructor_zext(ctx, arg1, arg0, I64);
    let v6 = constructor_zext(ctx, arg2, arg0, I64);
    let v7 = constructor_rv_mul(ctx, v5, v6);
    let v8 = C::ty_bits(ctx, arg0);
    let v9 = C::u8_as_i32(ctx, v8);
    let v10 = C::imm12_const(ctx, v9);
    let v11 = constructor_rv_srli(ctx, v7, v10);
    // Rule at src/isa/riscv64/inst.isle line 1953.
    return v11;
}

// Generated as internal constructor for term lower_smlhi.
pub fn constructor_lower_smlhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    if arg0 == I64 {
        let v3 = constructor_rv_mulh(ctx, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 1959.
        return v3;
    }
    let v4 = constructor_rv_mul(ctx, arg1, arg2);
    let v5 = C::ty_bits(ctx, arg0);
    let v6 = C::u8_as_i32(ctx, v5);
    let v7 = C::imm12_const(ctx, v6);
    let v8 = constructor_rv_srli(ctx, v4, v7);
    // Rule at src/isa/riscv64/inst.isle line 1964.
    return v8;
}

// Generated as internal constructor for term lower_rotl.
pub fn constructor_lower_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg, arg2: XReg) -> XReg {
    match arg0 {
        I32 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v7 = constructor_rv_rolw(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1982.
                    return v7;
                }
                false => {
                    let v9 = constructor_lower_rotl_shift(ctx, I32, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1988.
                    return v9;
                }
                _ => {}
            }
        }
        I64 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v4 = constructor_rv_rol(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1972.
                    return v4;
                }
                false => {
                    let v6 = constructor_lower_rotl_shift(ctx, I64, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1978.
                    return v6;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v10 = constructor_lower_rotl_shift(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 1992.
    return v10;
}

// Generated as internal constructor for term lower_rotl_shift.
pub fn constructor_lower_rotl_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = C::gen_shamt(ctx, arg0, arg2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v7 = C::value_regs_get(ctx, v3, 0x1);
    let v8 = C::xreg_new(ctx, v5);
    let v9 = constructor_rv_sll(ctx, arg1, v8);
    let v11 = C::xreg_new(ctx, v7);
    let v12 = constructor_rv_srl(ctx, arg1, v11);
    let v15 = C::xreg_new(ctx, v5);
    let v16 = C::zero_reg(ctx);
    let v17 = C::xreg_new(ctx, v16);
    let v18 = C::zero_reg(ctx);
    let v13 = C::xreg_to_reg(ctx, v12);
    let v19 = C::gen_select_reg(ctx, &IntCC::Equal, v15, v17, v18, v13);
    let v10 = C::xreg_to_reg(ctx, v9);
    let v20 = C::xreg_new(ctx, v10);
    let v21 = C::xreg_new(ctx, v19);
    let v22 = constructor_rv_or(ctx, v20, v21);
    // Rule at src/isa/riscv64/inst.isle line 2001.
    return v22;
}

// Generated as internal constructor for term lower_rotr.
pub fn constructor_lower_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg, arg2: XReg) -> XReg {
    match arg0 {
        I32 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v7 = constructor_rv_rorw(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2031.
                    return v7;
                }
                false => {
                    let v9 = constructor_lower_rotr_shift(ctx, I32, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2037.
                    return v9;
                }
                _ => {}
            }
        }
        I64 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v4 = constructor_rv_ror(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2022.
                    return v4;
                }
                false => {
                    let v6 = constructor_lower_rotr_shift(ctx, I64, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2027.
                    return v6;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v10 = constructor_lower_rotr_shift(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2041.
    return v10;
}

// Generated as internal constructor for term lower_rotr_shift.
pub fn constructor_lower_rotr_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = C::gen_shamt(ctx, arg0, arg2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v6 = C::xreg_new(ctx, v5);
    let v8 = C::value_regs_get(ctx, v3, 0x1);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_srl(ctx, arg1, v6);
    let v11 = constructor_rv_sll(ctx, arg1, v9);
    let v13 = C::zero_reg(ctx);
    let v14 = C::xreg_new(ctx, v13);
    let v15 = C::zero_reg(ctx);
    let v16 = C::xreg_to_reg(ctx, v11);
    let v17 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v14, v15, v16);
    let v18 = C::xreg_new(ctx, v17);
    let v19 = constructor_rv_or(ctx, v10, v18);
    // Rule at src/isa/riscv64/inst.isle line 2049.
    return v19;
}

// Generated as internal constructor for term gen_bseti.
pub fn constructor_gen_bseti<C: Context>(ctx: &mut C, arg0: Reg, arg1: u64) -> Reg {
    let v2 = C::has_zbs(ctx);
    match v2 {
        true => {
            let v12 = C::xreg_new(ctx, arg0);
            let v17 = C::u64_as_i32(ctx, arg1);
            let v18 = C::imm12_const(ctx, v17);
            let v19 = constructor_rv_bseti(ctx, v12, v18);
            let v20 = C::xreg_to_reg(ctx, v19);
            // Rule at src/isa/riscv64/inst.isle line 2077.
            return v20;
        }
        false => {
            let v4 = C::u64_le(ctx, arg1, 0xC);
            match v4 {
                true => {
                    let v12 = C::xreg_new(ctx, arg0);
                    let v6 = C::u64_shl(ctx, 0x1, arg1);
                    let v13 = C::u64_as_i32(ctx, v6);
                    let v14 = C::imm12_const(ctx, v13);
                    let v15 = constructor_rv_ori(ctx, v12, v14);
                    let v16 = C::xreg_to_reg(ctx, v15);
                    // Rule at src/isa/riscv64/inst.isle line 2072.
                    return v16;
                }
                false => {
                    let v6 = C::u64_shl(ctx, 0x1, arg1);
                    let v7 = C::load_u64_constant(ctx, v6);
                    let v8 = C::xreg_new(ctx, v7);
                    let v9 = C::xreg_new(ctx, arg0);
                    let v10 = constructor_rv_or(ctx, v9, v8);
                    let v11 = C::xreg_to_reg(ctx, v10);
                    // Rule at src/isa/riscv64/inst.isle line 2066.
                    return v11;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bseti", "src/isa/riscv64/inst.isle line 2065"
    )
}

// Generated as internal constructor for term gen_popcnt.
pub fn constructor_gen_popcnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v7 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v8 = MInst::Popcnt {
        sum: v5,
        step: v6,
        tmp: v7,
        rs: arg0,
        ty: arg1,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2084.
    return v10;
}

// Generated as internal constructor for term lower_popcnt.
pub fn constructor_lower_popcnt<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::has_zbb(ctx);
    match v2 {
        true => {
            let v4 = constructor_zext(ctx, arg0, arg1, I64);
            let v5 = constructor_rv_cpop(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2093.
            return v5;
        }
        false => {
            let v6 = C::xreg_to_reg(ctx, arg0);
            let v7 = constructor_gen_popcnt(ctx, v6, arg1);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 2097.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_popcnt", "src/isa/riscv64/inst.isle line 2092"
    )
}

// Generated as internal constructor for term lower_popcnt_i128.
pub fn constructor_lower_popcnt_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = constructor_lower_popcnt(ctx, v3, I64);
    let v7 = C::value_regs_get(ctx, arg0, 0x1);
    let v8 = C::xreg_new(ctx, v7);
    let v9 = constructor_lower_popcnt(ctx, v8, I64);
    let v10 = constructor_rv_add(ctx, v5, v9);
    let v13 = C::load_u64_constant(ctx, 0x0);
    let v11 = C::xreg_to_reg(ctx, v10);
    let v14 = C::value_regs(ctx, v11, v13);
    // Rule at src/isa/riscv64/inst.isle line 2103.
    return v14;
}

// Generated as internal constructor for term lower_i128_rotl.
pub fn constructor_lower_i128_rotl<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::xreg_new(ctx, v4);
    let v6 = C::gen_shamt(ctx, I128, v5);
    let v7 = C::value_regs_get(ctx, v6, 0x0);
    let v8 = C::xreg_new(ctx, v7);
    let v10 = C::value_regs_get(ctx, v6, 0x1);
    let v11 = C::xreg_new(ctx, v10);
    let v12 = C::value_regs_get(ctx, arg0, 0x0);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = constructor_rv_sll(ctx, v13, v8);
    let v15 = C::value_regs_get(ctx, arg0, 0x1);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_srl(ctx, v16, v11);
    let v19 = C::zero_reg(ctx);
    let v20 = C::xreg_new(ctx, v19);
    let v21 = C::zero_reg(ctx);
    let v22 = C::xreg_to_reg(ctx, v17);
    let v23 = C::gen_select_reg(ctx, &IntCC::Equal, v8, v20, v21, v22);
    let v24 = C::xreg_new(ctx, v23);
    let v25 = constructor_rv_or(ctx, v14, v24);
    let v26 = C::value_regs_get(ctx, arg0, 0x1);
    let v27 = C::xreg_new(ctx, v26);
    let v28 = constructor_rv_sll(ctx, v27, v8);
    let v29 = C::value_regs_get(ctx, arg0, 0x0);
    let v30 = C::xreg_new(ctx, v29);
    let v31 = constructor_rv_srl(ctx, v30, v11);
    let v32 = C::zero_reg(ctx);
    let v33 = C::xreg_new(ctx, v32);
    let v34 = C::zero_reg(ctx);
    let v35 = C::xreg_to_reg(ctx, v31);
    let v36 = C::gen_select_reg(ctx, &IntCC::Equal, v8, v33, v34, v35);
    let v37 = C::xreg_new(ctx, v36);
    let v38 = constructor_rv_or(ctx, v28, v37);
    let v40 = C::load_u64_constant(ctx, 0x40);
    let v41 = C::xreg_new(ctx, v40);
    let v42 = C::value_regs_get(ctx, arg1, 0x0);
    let v43 = C::xreg_new(ctx, v42);
    let v45 = C::imm12_const(ctx, 0x7F);
    let v46 = constructor_rv_andi(ctx, v43, v45);
    let v48 = C::xreg_to_reg(ctx, v38);
    let v49 = C::xreg_to_reg(ctx, v25);
    let v50 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v46, v41, v48, v49);
    let v51 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v46, v41, v49, v48);
    let v52 = C::value_regs(ctx, v50, v51);
    // Rule at src/isa/riscv64/inst.isle line 2115.
    return v52;
}

// Generated as internal constructor for term lower_i128_rotr.
pub fn constructor_lower_i128_rotr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::xreg_new(ctx, v4);
    let v6 = C::gen_shamt(ctx, I128, v5);
    let v7 = C::value_regs_get(ctx, v6, 0x0);
    let v8 = C::xreg_new(ctx, v7);
    let v10 = C::value_regs_get(ctx, v6, 0x1);
    let v11 = C::xreg_new(ctx, v10);
    let v12 = C::value_regs_get(ctx, arg0, 0x0);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = constructor_rv_srl(ctx, v13, v8);
    let v15 = C::value_regs_get(ctx, arg0, 0x1);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_sll(ctx, v16, v11);
    let v19 = C::zero_reg(ctx);
    let v20 = C::xreg_new(ctx, v19);
    let v21 = C::zero_reg(ctx);
    let v22 = C::xreg_to_reg(ctx, v17);
    let v23 = C::gen_select_reg(ctx, &IntCC::Equal, v8, v20, v21, v22);
    let v24 = C::xreg_new(ctx, v23);
    let v25 = constructor_rv_or(ctx, v14, v24);
    let v26 = C::value_regs_get(ctx, arg0, 0x1);
    let v27 = C::xreg_new(ctx, v26);
    let v28 = constructor_rv_srl(ctx, v27, v8);
    let v29 = C::value_regs_get(ctx, arg0, 0x0);
    let v30 = C::xreg_new(ctx, v29);
    let v31 = constructor_rv_sll(ctx, v30, v11);
    let v32 = C::zero_reg(ctx);
    let v33 = C::xreg_new(ctx, v32);
    let v34 = C::zero_reg(ctx);
    let v35 = C::xreg_to_reg(ctx, v31);
    let v36 = C::gen_select_reg(ctx, &IntCC::Equal, v8, v33, v34, v35);
    let v37 = C::xreg_new(ctx, v36);
    let v38 = constructor_rv_or(ctx, v28, v37);
    let v40 = C::load_u64_constant(ctx, 0x40);
    let v41 = C::xreg_new(ctx, v40);
    let v42 = C::value_regs_get(ctx, arg1, 0x0);
    let v43 = C::xreg_new(ctx, v42);
    let v45 = C::imm12_const(ctx, 0x7F);
    let v46 = constructor_rv_andi(ctx, v43, v45);
    let v48 = C::xreg_to_reg(ctx, v38);
    let v49 = C::xreg_to_reg(ctx, v25);
    let v50 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v46, v41, v48, v49);
    let v51 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v46, v41, v49, v48);
    let v52 = C::value_regs(ctx, v50, v51);
    // Rule at src/isa/riscv64/inst.isle line 2144.
    return v52;
}

// Generated as internal constructor for term gen_load.
pub fn constructor_gen_load<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: &LoadOP,
    arg3: MemFlags,
    arg4: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg4);
    let v7 = C::gen_amode(ctx, arg0, arg1, I64);
    let v8 = MInst::Load {
        rd: v5,
        op: arg2.clone(),
        flags: arg3,
        from: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2184.
    return v10;
}

// Generated as internal constructor for term gen_load_128.
pub fn constructor_gen_load_128<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: MemFlags,
) -> ValueRegs {
    let v5 = constructor_gen_load(ctx, arg0, arg1, &LoadOP::Ld, arg2, I64);
    let v7 = C::offset32_add(ctx, arg1, 0x8);
    let v8 = constructor_gen_load(ctx, arg0, v7, &LoadOP::Ld, arg2, I64);
    let v9 = C::value_regs(ctx, v5, v8);
    // Rule at src/isa/riscv64/inst.isle line 2192.
    return v9;
}

// Generated as internal constructor for term gen_store.
pub fn constructor_gen_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: &StoreOP,
    arg3: MemFlags,
    arg4: Reg,
) -> InstOutput {
    let v6 = C::gen_amode(ctx, arg0, arg1, I64);
    let v7 = MInst::Store {
        to: v6,
        op: arg2.clone(),
        flags: arg3,
        src: arg4,
    };
    let v8 = SideEffectNoResult::Inst { inst: v7 };
    let v9 = constructor_side_effect(ctx, &v8);
    // Rule at src/isa/riscv64/inst.isle line 2207.
    return v9;
}

// Generated as internal constructor for term gen_store_128.
pub fn constructor_gen_store_128<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: MemFlags,
    arg3: ValueRegs,
) -> InstOutput {
    let v5 = C::gen_amode(ctx, arg0, arg1, I64);
    let v8 = C::value_regs_get(ctx, arg3, 0x0);
    let v11 = C::offset32_add(ctx, arg1, 0x8);
    let v12 = C::gen_amode(ctx, arg0, v11, I64);
    let v14 = C::value_regs_get(ctx, arg3, 0x1);
    let v9 = MInst::Store {
        to: v5,
        op: StoreOP::Sd,
        flags: arg2,
        src: v8,
    };
    let v15 = MInst::Store {
        to: v12,
        op: StoreOP::Sd,
        flags: arg2,
        src: v14,
    };
    let v16 = SideEffectNoResult::Inst2 {
        inst1: v9,
        inst2: v15,
    };
    let v17 = constructor_side_effect(ctx, &v16);
    // Rule at src/isa/riscv64/inst.isle line 2213.
    return v17;
}

// Generated as internal constructor for term gen_atomic.
pub fn constructor_gen_atomic<C: Context>(
    ctx: &mut C,
    arg0: &AtomicOP,
    arg1: Reg,
    arg2: Reg,
    arg3: AMO,
) -> Reg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = MInst::Atomic {
        op: arg0.clone(),
        rd: v5,
        addr: arg1,
        src: arg2,
        amo: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2226.
    return v8;
}

// Generated as internal constructor for term get_atomic_rmw_op.
pub fn constructor_get_atomic_rmw_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AtomicRmwOp,
) -> AtomicOP {
    match arg0 {
        I32 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 2235.
                    return AtomicOP::AmoaddW;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2242.
                    return AtomicOP::AmoandW;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2250.
                    return AtomicOP::AmoorW;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2258.
                    return AtomicOP::AmomaxW;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2266.
                    return AtomicOP::AmominW;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2274.
                    return AtomicOP::AmomaxuW;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2283.
                    return AtomicOP::AmominuW;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2291.
                    return AtomicOP::AmoswapW;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2299.
                    return AtomicOP::AmoxorW;
                }
                _ => {}
            }
        }
        I64 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 2238.
                    return AtomicOP::AmoaddD;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2246.
                    return AtomicOP::AmoandD;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2254.
                    return AtomicOP::AmoorD;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2262.
                    return AtomicOP::AmomaxD;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2270.
                    return AtomicOP::AmominD;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2279.
                    return AtomicOP::AmomaxuD;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2287.
                    return AtomicOP::AmominuD;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2295.
                    return AtomicOP::AmoswapD;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2303.
                    return AtomicOP::AmoxorD;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "get_atomic_rmw_op", "src/isa/riscv64/inst.isle line 2233"
    )
}

// Generated as internal constructor for term gen_atomic_load.
pub fn constructor_gen_atomic_load<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = MInst::AtomicLoad {
        rd: v3,
        ty: arg1,
        p: arg0,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 2312.
    return v6;
}

// Generated as internal constructor for term gen_atomic_store.
pub fn constructor_gen_atomic_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
    arg2: Reg,
) -> InstOutput {
    let v3 = MInst::AtomicStore {
        src: arg2,
        ty: arg1,
        p: arg0,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    let v5 = constructor_side_effect(ctx, &v4);
    // Rule at src/isa/riscv64/inst.isle line 2321.
    return v5;
}

// Generated as internal constructor for term gen_select.
pub fn constructor_gen_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ValueRegs,
    arg3: ValueRegs,
) -> ValueRegs {
    let v4 = &C::alloc_vec_writable(ctx, arg0);
    let v5 = &C::vec_writable_clone(ctx, v4);
    let v6 = MInst::Select {
        dst: v4.clone(),
        ty: arg0,
        condition: arg1,
        x: arg2,
        y: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::vec_writable_to_regs(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2332.
    return v8;
}

// Generated as internal constructor for term gen_int_select.
pub fn constructor_gen_int_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntSelectOP,
    arg2: ValueRegs,
    arg3: ValueRegs,
) -> ValueRegs {
    let v4 = &C::alloc_vec_writable(ctx, arg0);
    let v5 = &C::vec_writable_clone(ctx, v4);
    let v6 = MInst::IntSelect {
        op: arg1.clone(),
        dst: v5.clone(),
        x: arg2,
        y: arg3,
        ty: arg0,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::vec_writable_to_regs(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2361.
    return v8;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> InstOutput {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    let v3 = constructor_side_effect(ctx, &v2);
    // Rule at src/isa/riscv64/inst.isle line 2371.
    return v3;
}

// Generated as internal constructor for term int_load_op.
pub fn constructor_int_load_op<C: Context>(ctx: &mut C, arg0: bool, arg1: u8) -> LoadOP {
    match arg1 {
        0x8 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 2387.
                    return LoadOP::Lb;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 2383.
                    return LoadOP::Lbu;
                }
                _ => {}
            }
        }
        0x10 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 2394.
                    return LoadOP::Lh;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 2391.
                    return LoadOP::Lhu;
                }
                _ => {}
            }
        }
        0x20 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 2400.
                    return LoadOP::Lw;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 2397.
                    return LoadOP::Lwu;
                }
                _ => {}
            }
        }
        0x40 => {
            // Rule at src/isa/riscv64/inst.isle line 2404.
            return LoadOP::Ld;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "int_load_op", "src/isa/riscv64/inst.isle line 2381"
    )
}

// Generated as internal constructor for term gen_fcvt_int.
pub fn constructor_gen_fcvt_int<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: FReg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> XReg {
    let v5 = C::temp_writable_reg(ctx, arg4);
    let v6 = constructor_temp_writable_freg(ctx);
    let v7 = C::writable_freg_to_writable_reg(ctx, v6);
    let v8 = C::freg_to_reg(ctx, arg1);
    let v9 = MInst::FcvtToInt {
        is_sat: arg0,
        rd: v5,
        tmp: v7,
        rs: v8,
        is_signed: arg2,
        in_type: arg3,
        out_type: arg4,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v5);
    let v12 = C::xreg_new(ctx, v11);
    // Rule at src/isa/riscv64/inst.isle line 2417.
    return v12;
}

// Generated as internal constructor for term lower_float_binary.
pub fn constructor_lower_float_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: FReg,
    arg2: FReg,
    arg3: Type,
) -> FReg {
    let v4 = constructor_move_f_to_x(ctx, arg1, arg3);
    let v5 = constructor_move_f_to_x(ctx, arg2, arg3);
    let v6 = C::xreg_to_reg(ctx, v4);
    let v7 = C::xreg_to_reg(ctx, v5);
    let v8 = constructor_alu_rrr(ctx, arg0, v6, v7);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_float_int_of_same_size(ctx, arg3);
    let v11 = constructor_move_x_to_f(ctx, v9, v10);
    // Rule at src/isa/riscv64/inst.isle line 2430.
    return v11;
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
    arg3: Type,
) -> Reg {
    let v4 = &C::signed_cond_code(ctx, arg0);
    if let Some(v5) = v4 {
        let v7 = constructor_ext_int_if_need(ctx, true, arg1, arg3);
        let v8 = constructor_ext_int_if_need(ctx, true, arg2, arg3);
        let v9 = constructor_gen_icmp(ctx, arg0, v7, v8, arg3);
        let v10 = C::xreg_to_reg(ctx, v9);
        // Rule at src/isa/riscv64/inst.isle line 2439.
        return v10;
    }
    let v12 = constructor_ext_int_if_need(ctx, false, arg1, arg3);
    let v13 = constructor_ext_int_if_need(ctx, false, arg2, arg3);
    let v14 = constructor_gen_icmp(ctx, arg0, v12, v13, arg3);
    let v15 = C::xreg_to_reg(ctx, v14);
    // Rule at src/isa/riscv64/inst.isle line 2442.
    return v15;
}

// Generated as internal constructor for term i128_sub.
pub fn constructor_i128_sub<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v4 = C::xreg_new(ctx, v3);
    let v5 = C::value_regs_get(ctx, arg1, 0x0);
    let v6 = C::xreg_new(ctx, v5);
    let v7 = constructor_rv_sub(ctx, v4, v6);
    let v8 = C::value_regs_get(ctx, arg0, 0x0);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_sltu(ctx, v9, v7);
    let v12 = C::value_regs_get(ctx, arg0, 0x1);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = C::value_regs_get(ctx, arg1, 0x1);
    let v15 = C::xreg_new(ctx, v14);
    let v16 = constructor_rv_sub(ctx, v13, v15);
    let v17 = constructor_rv_sub(ctx, v16, v10);
    let v18 = C::xreg_to_reg(ctx, v7);
    let v19 = C::xreg_to_reg(ctx, v17);
    let v20 = C::value_regs(ctx, v18, v19);
    // Rule at src/isa/riscv64/inst.isle line 2448.
    return v20;
}

// Generated as internal constructor for term lower_uadd_overflow.
pub fn constructor_lower_uadd_overflow<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
    arg2: Type,
) -> ValueRegs {
    if arg2 == I64 {
        let v3 = constructor_rv_add(ctx, arg0, arg1);
        let v5 = C::xreg_to_reg(ctx, v3);
        let v6 = C::value_reg(ctx, v5);
        let v7 = C::xreg_to_reg(ctx, arg0);
        let v8 = C::value_reg(ctx, v7);
        let v10 = constructor_gen_icmp(ctx, &IntCC::UnsignedLessThan, v6, v8, I64);
        let v11 = C::xreg_to_reg(ctx, v10);
        let v12 = C::value_regs(ctx, v5, v11);
        // Rule at src/isa/riscv64/inst.isle line 2464.
        return v12;
    }
    let v13 = C::fits_in_32(ctx, arg2);
    if let Some(v14) = v13 {
        let v15 = constructor_zext(ctx, arg0, v14, I64);
        let v16 = constructor_zext(ctx, arg1, v14, I64);
        let v17 = constructor_rv_add(ctx, v15, v16);
        let v18 = C::ty_bits(ctx, v14);
        let v19 = C::u8_as_i32(ctx, v18);
        let v20 = C::imm12_const(ctx, v19);
        let v21 = constructor_rv_srli(ctx, v17, v20);
        let v22 = C::xreg_to_reg(ctx, v17);
        let v23 = C::xreg_to_reg(ctx, v21);
        let v24 = C::value_regs(ctx, v22, v23);
        // Rule at src/isa/riscv64/inst.isle line 2471.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_uadd_overflow", "src/isa/riscv64/inst.isle line 2462"
    )
}

// Generated as internal constructor for term gen_jump.
pub fn constructor_gen_jump<C: Context>(ctx: &mut C, arg0: MachLabel) -> MInst {
    let v1 = C::label_to_br_target(ctx, arg0);
    let v2 = MInst::Jal { dest: v1 };
    // Rule at src/isa/riscv64/inst.isle line 2483.
    return v2;
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &VecMachLabel,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v70,
            arg: v71,
            table: v72,
        } => {
            if let &Opcode::BrTable = v70 {
                let v73 = C::put_in_reg(ctx, v71);
                let v74 = C::lower_br_table(ctx, v73, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2573.
                return Some(v74);
            }
        }
        &InstructionData::Brif {
            opcode: ref v10,
            arg: v11,
            blocks: ref v12,
        } => {
            if let &Opcode::Brif = v10 {
                let v13 = C::value_type(ctx, v11);
                if v13 == I128 {
                    let v22 = C::zero_reg(ctx);
                    let v23 = C::zero_reg(ctx);
                    let v24 = C::value_regs(ctx, v22, v23);
                    let v25 = C::put_in_regs(ctx, v11);
                    let v27 = constructor_gen_icmp(ctx, &IntCC::NotEqual, v25, v24, I128);
                    let v28 = C::xreg_to_reg(ctx, v27);
                    let v29 = C::value_reg(ctx, v28);
                    let v31 = C::lower_cond_br(ctx, &IntCC::NotEqual, v29, arg1, I64);
                    // Rule at src/isa/riscv64/inst.isle line 2542.
                    return Some(v31);
                }
                let v32 = C::maybe_uextend(ctx, v11);
                if let Some(v33) = v32 {
                    let v34 = C::def_inst(ctx, v33);
                    if let Some(v35) = v34 {
                        let v36 = &C::inst_data(ctx, v35);
                        match v36 {
                            &InstructionData::FloatCompare {
                                opcode: ref v47,
                                args: ref v48,
                                cond: ref v49,
                            } => {
                                if let &Opcode::Fcmp = v47 {
                                    let v54 = C::floatcc_unordered(ctx, v49);
                                    match v54 {
                                        true => {
                                            let v6 = C::vec_label_get(ctx, arg1, 0x0);
                                            let v55 = C::label_to_br_target(ctx, v6);
                                            let v57 = C::vec_label_get(ctx, arg1, 0x1);
                                            let v58 = C::label_to_br_target(ctx, v57);
                                            let v59 = &C::floatcc_inverse(ctx, v49);
                                            let v50 = C::unpack_value_array_2(ctx, v48);
                                            let v60 = constructor_put_in_freg(ctx, v50.0);
                                            let v61 = constructor_put_in_freg(ctx, v50.1);
                                            let v53 = C::value_type(ctx, v50.0);
                                            let v62 =
                                                &constructor_emit_fcmp(ctx, v59, v53, v60, v61);
                                            let v63 = &constructor_cond_br(ctx, v62, v58, v55);
                                            let v64 = constructor_emit_side_effect(ctx, v63);
                                            // Rule at src/isa/riscv64/inst.isle line 2554.
                                            return Some(v64);
                                        }
                                        false => {
                                            let v6 = C::vec_label_get(ctx, arg1, 0x0);
                                            let v55 = C::label_to_br_target(ctx, v6);
                                            let v57 = C::vec_label_get(ctx, arg1, 0x1);
                                            let v58 = C::label_to_br_target(ctx, v57);
                                            let v50 = C::unpack_value_array_2(ctx, v48);
                                            let v65 = constructor_put_in_freg(ctx, v50.0);
                                            let v66 = constructor_put_in_freg(ctx, v50.1);
                                            let v53 = C::value_type(ctx, v50.0);
                                            let v67 =
                                                &constructor_emit_fcmp(ctx, v49, v53, v65, v66);
                                            let v68 = &constructor_cond_br(ctx, v67, v55, v58);
                                            let v69 = constructor_emit_side_effect(ctx, v68);
                                            // Rule at src/isa/riscv64/inst.isle line 2561.
                                            return Some(v69);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            &InstructionData::IntCompare {
                                opcode: ref v37,
                                args: ref v38,
                                cond: ref v39,
                            } => {
                                if let &Opcode::Icmp = v37 {
                                    let v40 = C::unpack_value_array_2(ctx, v38);
                                    let v44 = C::put_in_regs(ctx, v40.0);
                                    let v45 = C::put_in_regs(ctx, v40.1);
                                    let v43 = C::value_type(ctx, v40.0);
                                    let v46 = C::lower_br_icmp(ctx, v39, v44, v45, arg1, v43);
                                    // Rule at src/isa/riscv64/inst.isle line 2549.
                                    return Some(v46);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                let v18 = C::put_in_regs(ctx, v11);
                let v20 = constructor_normalize_cmp_value(ctx, v13, v18, &ExtendOp::Zero);
                let v21 = C::lower_cond_br(ctx, &IntCC::NotEqual, v20, arg1, v13);
                // Rule at src/isa/riscv64/inst.isle line 2538.
                return Some(v21);
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v6 = C::vec_label_get(ctx, arg1, 0x0);
                let v7 = &constructor_gen_jump(ctx, v6);
                let v8 = SideEffectNoResult::Inst { inst: v7.clone() };
                let v9 = constructor_emit_side_effect(ctx, &v8);
                // Rule at src/isa/riscv64/inst.isle line 2490.
                return Some(v9);
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term normalize_cmp_value.
pub fn constructor_normalize_cmp_value<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: &ExtendOp,
) -> ValueRegs {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_extend(ctx, arg1, arg2, v2, I64);
        // Rule at src/isa/riscv64/inst.isle line 2513.
        return v6;
    }
    match arg0 {
        I64 => {
            // Rule at src/isa/riscv64/inst.isle line 2516.
            return arg1;
        }
        I128 => {
            // Rule at src/isa/riscv64/inst.isle line 2517.
            return arg1;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "normalize_cmp_value", "src/isa/riscv64/inst.isle line 2511"
    )
}

// Generated as internal constructor for term normalize_fcvt_from_int.
pub fn constructor_normalize_fcvt_from_int<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Type,
    arg2: &ExtendOp,
) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::xreg_to_reg(ctx, arg0);
        let v6 = C::value_reg(ctx, v5);
        let v8 = constructor_extend(ctx, v6, arg2, v3, I64);
        let v10 = C::value_regs_get(ctx, v8, 0x0);
        let v11 = C::xreg_new(ctx, v10);
        // Rule at src/isa/riscv64/inst.isle line 2520.
        return v11;
    }
    // Rule at src/isa/riscv64/inst.isle line 2522.
    return arg0;
}

// Generated as internal constructor for term truthy_to_reg.
pub fn constructor_truthy_to_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> XReg {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v6 = C::xreg_new(ctx, v5);
        // Rule at src/isa/riscv64/inst.isle line 2529.
        return v6;
    }
    if arg0 == I128 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v6 = C::xreg_new(ctx, v5);
        let v8 = C::value_regs_get(ctx, arg1, 0x1);
        let v9 = C::xreg_new(ctx, v8);
        let v10 = constructor_rv_or(ctx, v6, v9);
        // Rule at src/isa/riscv64/inst.isle line 2531.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "truthy_to_reg", "src/isa/riscv64/inst.isle line 2528"
    )
}

// Generated as internal constructor for term gen_bitcast.
pub fn constructor_gen_bitcast<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type, arg2: Type) -> Reg {
    match arg1 {
        I32 => {
            if arg2 == F32 {
                let v8 = C::xreg_new(ctx, arg0);
                let v9 = constructor_rv_fmvwx(ctx, v8);
                let v10 = C::freg_to_reg(ctx, v9);
                // Rule at src/isa/riscv64/inst.isle line 2585.
                return v10;
            }
        }
        I64 => {
            if arg2 == F64 {
                let v8 = C::xreg_new(ctx, arg0);
                let v11 = constructor_rv_fmvdx(ctx, v8);
                let v12 = C::freg_to_reg(ctx, v11);
                // Rule at src/isa/riscv64/inst.isle line 2586.
                return v12;
            }
        }
        F32 => {
            if arg2 == I32 {
                let v3 = C::freg_new(ctx, arg0);
                let v4 = constructor_rv_fmvxw(ctx, v3);
                let v5 = C::xreg_to_reg(ctx, v4);
                // Rule at src/isa/riscv64/inst.isle line 2583.
                return v5;
            }
        }
        F64 => {
            if arg2 == I64 {
                let v3 = C::freg_new(ctx, arg0);
                let v6 = constructor_rv_fmvxd(ctx, v3);
                let v7 = C::xreg_to_reg(ctx, v6);
                // Rule at src/isa/riscv64/inst.isle line 2584.
                return v7;
            }
        }
        _ => {}
    }
    // Rule at src/isa/riscv64/inst.isle line 2587.
    return arg0;
}

// Generated as internal constructor for term move_f_to_x.
pub fn constructor_move_f_to_x<C: Context>(ctx: &mut C, arg0: FReg, arg1: Type) -> XReg {
    match arg1 {
        F32 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, F32, I32);
            let v6 = C::xreg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 2590.
            return v6;
        }
        F64 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, F64, I64);
            let v10 = C::xreg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 2591.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_f_to_x", "src/isa/riscv64/inst.isle line 2589"
    )
}

// Generated as internal constructor for term move_x_to_f.
pub fn constructor_move_x_to_f<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> FReg {
    match arg1 {
        I32 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, I32, F32);
            let v6 = C::freg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 2594.
            return v6;
        }
        I64 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, I64, F64);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 2595.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_x_to_f", "src/isa/riscv64/inst.isle line 2593"
    )
}

// Generated as internal constructor for term float_int_of_same_size.
pub fn constructor_float_int_of_same_size<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 2598.
            return I32;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 2599.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_int_of_same_size", "src/isa/riscv64/inst.isle line 2597"
    )
}

// Generated as internal constructor for term gen_rev8.
pub fn constructor_gen_rev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::has_zbb(ctx);
    match v1 {
        true => {
            let v2 = constructor_rv_rev8(ctx, arg0);
            // Rule at src/isa/riscv64/inst.isle line 2603.
            return v2;
        }
        false => {
            let v3 = constructor_temp_writable_xreg(ctx);
            let v4 = constructor_temp_writable_xreg(ctx);
            let v5 = constructor_temp_writable_xreg(ctx);
            let v6 = C::xreg_to_reg(ctx, arg0);
            let v7 = C::writable_xreg_to_writable_reg(ctx, v5);
            let v8 = C::writable_xreg_to_writable_reg(ctx, v4);
            let v9 = C::writable_xreg_to_writable_reg(ctx, v3);
            let v10 = MInst::Rev8 {
                rs: v6,
                step: v7,
                tmp: v8,
                rd: v9,
            };
            let v11 = C::emit(ctx, &v10);
            let v12 = C::writable_reg_to_reg(ctx, v9);
            let v13 = C::xreg_new(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 2609.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_rev8", "src/isa/riscv64/inst.isle line 2602"
    )
}

// Generated as internal constructor for term gen_brev8.
pub fn constructor_gen_brev8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::has_zbkb(ctx);
    match v2 {
        true => {
            let v3 = C::xreg_new(ctx, arg0);
            let v4 = constructor_rv_brev8(ctx, v3);
            let v5 = C::xreg_to_reg(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2620.
            return v5;
        }
        false => {
            let v6 = constructor_temp_writable_xreg(ctx);
            let v7 = constructor_temp_writable_xreg(ctx);
            let v8 = constructor_temp_writable_xreg(ctx);
            let v9 = constructor_temp_writable_xreg(ctx);
            let v10 = C::writable_xreg_to_writable_reg(ctx, v8);
            let v11 = C::writable_xreg_to_writable_reg(ctx, v6);
            let v12 = C::writable_xreg_to_writable_reg(ctx, v7);
            let v13 = C::writable_xreg_to_writable_reg(ctx, v9);
            let v14 = MInst::Brev8 {
                rs: arg0,
                ty: arg1,
                step: v10,
                tmp: v11,
                tmp2: v12,
                rd: v13,
            };
            let v15 = C::emit(ctx, &v14);
            let v16 = C::writable_reg_to_reg(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 2625.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_brev8", "src/isa/riscv64/inst.isle line 2619"
    )
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> ValueRegs {
    if arg0 == I128 {
        let v12 = constructor_value_regs_zero(ctx);
        let v13 = constructor_i128_sub(ctx, v12, arg1);
        // Rule at src/isa/riscv64/inst.isle line 2642.
        return v13;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::value_regs_get(ctx, arg1, 0x0);
            let v8 = C::xreg_new(ctx, v7);
            let v9 = constructor_rv_neg(ctx, v8);
            let v10 = C::xreg_to_reg(ctx, v9);
            let v11 = C::value_reg(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 2638.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg", "src/isa/riscv64/inst.isle line 2637"
    )
}

// Generated as internal constructor for term max.
pub fn constructor_max<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg, arg2: XReg) -> XReg {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::has_zbb(ctx);
            match v7 {
                true => {
                    let v8 = constructor_rv_max(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2648.
                    return v8;
                }
                false => {
                    let v10 = C::xreg_to_reg(ctx, arg1);
                    let v11 = C::xreg_to_reg(ctx, arg2);
                    let v12 =
                        C::gen_select_reg(ctx, &IntCC::SignedGreaterThan, arg1, arg2, v10, v11);
                    let v13 = C::xreg_new(ctx, v12);
                    // Rule at src/isa/riscv64/inst.isle line 2652.
                    return v13;
                }
                _ => {}
            }
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "max", "src/isa/riscv64/inst.isle line 2647"
    )
}

// Generated as internal constructor for term lower_iabs.
pub fn constructor_lower_iabs<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = constructor_sext(ctx, arg1, v2, I64);
        let v6 = constructor_rv_neg(ctx, v5);
        let v7 = constructor_max(ctx, I64, v5, v6);
        // Rule at src/isa/riscv64/inst.isle line 2664.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_iabs", "src/isa/riscv64/inst.isle line 2657"
    )
}

// Generated as internal constructor for term gen_trapif.
pub fn constructor_gen_trapif<C: Context>(ctx: &mut C, arg0: XReg, arg1: &TrapCode) -> InstOutput {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = MInst::TrapIf {
        test: v2,
        trap_code: arg1.clone(),
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    let v5 = constructor_side_effect(ctx, &v4);
    // Rule at src/isa/riscv64/inst.isle line 2671.
    return v5;
}

// Generated as internal constructor for term gen_trapifc.
pub fn constructor_gen_trapifc<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: XReg,
    arg2: XReg,
    arg3: &TrapCode,
) -> InstOutput {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = C::xreg_to_reg(ctx, arg2);
    let v6 = MInst::TrapIfC {
        rs1: v4,
        rs2: v5,
        cc: arg0.clone(),
        trap_code: arg3.clone(),
    };
    let v7 = SideEffectNoResult::Inst { inst: v6 };
    let v8 = constructor_side_effect(ctx, &v7);
    // Rule at src/isa/riscv64/inst.isle line 2676.
    return v8;
}

// Generated as internal constructor for term gen_div_overflow.
pub fn constructor_gen_div_overflow<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
    arg2: Type,
) -> InstOutput {
    let v4 = constructor_load_imm12(ctx, -0x1);
    let v5 = C::xreg_new(ctx, v4);
    let v7 = constructor_load_imm12(ctx, 0x1);
    let v8 = C::xreg_new(ctx, v7);
    let v10 = C::imm12_const(ctx, 0x3F);
    let v11 = constructor_rv_slli(ctx, v8, v10);
    let v12 = C::shift_int_to_most_significant(ctx, arg0, arg2);
    let v14 = C::xreg_to_reg(ctx, v5);
    let v15 = C::value_reg(ctx, v14);
    let v16 = C::xreg_to_reg(ctx, arg1);
    let v17 = C::value_reg(ctx, v16);
    let v18 = constructor_gen_icmp(ctx, &IntCC::Equal, v15, v17, arg2);
    let v19 = C::xreg_to_reg(ctx, v11);
    let v20 = C::value_reg(ctx, v19);
    let v21 = C::xreg_to_reg(ctx, v12);
    let v22 = C::value_reg(ctx, v21);
    let v23 = constructor_gen_icmp(ctx, &IntCC::Equal, v20, v22, arg2);
    let v24 = constructor_rv_and(ctx, v18, v23);
    let v26 = constructor_gen_trapif(ctx, v24, &TrapCode::IntegerOverflow);
    // Rule at src/isa/riscv64/inst.isle line 2685.
    return v26;
}

// Generated as internal constructor for term gen_div_by_zero.
pub fn constructor_gen_div_by_zero<C: Context>(ctx: &mut C, arg0: XReg) -> InstOutput {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = constructor_gen_trapifc(
        ctx,
        &IntCC::Equal,
        v3,
        arg0,
        &TrapCode::IntegerDivisionByZero,
    );
    // Rule at src/isa/riscv64/inst.isle line 2697.
    return v5;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg, arg2: XReg) -> XReg {
    let v3 = constructor_rv_mul(ctx, arg0, arg1);
    let v4 = constructor_rv_add(ctx, v3, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2711.
    return v4;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        if arg1 == I128 {
            let v30 = constructor_lower_bmask(ctx, I64, I128, arg2);
            let v31 = C::value_regs_get(ctx, v30, 0x0);
            let v32 = C::value_regs_get(ctx, v30, 0x0);
            let v33 = C::value_regs(ctx, v31, v32);
            // Rule at src/isa/riscv64/inst.isle line 2752.
            return v33;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v25 = constructor_lower_bmask(ctx, I64, v5, arg2);
            let v26 = C::value_regs_get(ctx, v25, 0x0);
            let v27 = C::value_regs_get(ctx, v25, 0x0);
            let v28 = C::value_regs(ctx, v26, v27);
            // Rule at src/isa/riscv64/inst.isle line 2743.
            return v28;
        }
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v15 = C::value_regs_get(ctx, arg2, 0x0);
            let v16 = C::xreg_new(ctx, v15);
            let v18 = C::value_regs_get(ctx, arg2, 0x1);
            let v19 = C::xreg_new(ctx, v18);
            let v20 = constructor_rv_or(ctx, v16, v19);
            let v22 = C::xreg_to_reg(ctx, v20);
            let v23 = C::value_reg(ctx, v22);
            let v24 = constructor_lower_bmask(ctx, v2, I64, v23);
            // Rule at src/isa/riscv64/inst.isle line 2733.
            return v24;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v8 = constructor_normalize_cmp_value(ctx, v5, arg2, &ExtendOp::Zero);
            let v9 = constructor_truthy_to_reg(ctx, v5, v8);
            let v10 = constructor_rv_snez(ctx, v9);
            let v11 = constructor_rv_neg(ctx, v10);
            let v12 = C::xreg_to_reg(ctx, v11);
            let v13 = C::value_reg(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 2724.
            return v13;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/riscv64/inst.isle line 2718"
    )
}

// Generated as internal constructor for term gen_mov_from_preg.
pub fn constructor_gen_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_xreg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 2763.
    return v5;
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v2 = C::imm(ctx, I64, 0x0);
    let v3 = C::imm(ctx, I64, 0x0);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src/isa/riscv64/inst.isle line 2779.
    return v4;
}

// Generated as internal constructor for term not.
pub fn constructor_not<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm_from_bits(ctx, 0x1);
    let v3 = constructor_rv_xori(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 2789.
    return v3;
}

// Generated as internal constructor for term is_not_nan.
pub fn constructor_is_not_nan<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> XReg {
    let v2 = constructor_rv_feq(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2792.
    return v2;
}

// Generated as internal constructor for term ordered.
pub fn constructor_ordered<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_is_not_nan(ctx, arg0, arg1);
    let v4 = constructor_is_not_nan(ctx, arg0, arg2);
    let v5 = constructor_rv_and(ctx, v3, v4);
    // Rule at src/isa/riscv64/inst.isle line 2795.
    return v5;
}

// Generated as internal constructor for term cmp_result.
pub fn constructor_cmp_result<C: Context>(ctx: &mut C, arg0: XReg) -> CmpResult {
    let v2 = CmpResult::Result {
        result: arg0,
        invert: false,
    };
    // Rule at src/isa/riscv64/inst.isle line 2805.
    return v2;
}

// Generated as internal constructor for term cmp_result_invert.
pub fn constructor_cmp_result_invert<C: Context>(ctx: &mut C, arg0: XReg) -> CmpResult {
    let v2 = CmpResult::Result {
        result: arg0,
        invert: true,
    };
    // Rule at src/isa/riscv64/inst.isle line 2810.
    return v2;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: &CmpResult,
    arg1: BranchTarget,
    arg2: BranchTarget,
) -> SideEffectNoResult {
    let v3 = constructor_cmp_integer_compare(ctx, arg0);
    let v4 = MInst::CondBr {
        taken: arg1,
        not_taken: arg2,
        kind: v3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/riscv64/inst.isle line 2814.
    return v5;
}

// Generated as internal constructor for term cmp_integer_compare.
pub fn constructor_cmp_integer_compare<C: Context>(
    ctx: &mut C,
    arg0: &CmpResult,
) -> IntegerCompare {
    if let &CmpResult::Result {
        result: v1,
        invert: v2,
    } = arg0
    {
        match v2 {
            true => {
                let v4 = C::zero_reg(ctx);
                let v5 = C::xreg_new(ctx, v4);
                let v8 = C::int_compare(ctx, &IntCC::Equal, v1, v5);
                // Rule at src/isa/riscv64/inst.isle line 2830.
                return v8;
            }
            false => {
                let v4 = C::zero_reg(ctx);
                let v5 = C::xreg_new(ctx, v4);
                let v6 = C::int_compare(ctx, &IntCC::NotEqual, v1, v5);
                // Rule at src/isa/riscv64/inst.isle line 2826.
                return v6;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_integer_compare", "src/isa/riscv64/inst.isle line 2823"
    )
}

// Generated as internal constructor for term cmp_value.
pub fn constructor_cmp_value<C: Context>(ctx: &mut C, arg0: &CmpResult) -> XReg {
    if let &CmpResult::Result {
        result: v1,
        invert: v2,
    } = arg0
    {
        match v2 {
            true => {
                let v3 = constructor_not(ctx, v1);
                // Rule at src/isa/riscv64/inst.isle line 2836.
                return v3;
            }
            false => {
                // Rule at src/isa/riscv64/inst.isle line 2835.
                return v1;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_value", "src/isa/riscv64/inst.isle line 2834"
    )
}

// Generated as internal constructor for term emit_fcmp.
pub fn constructor_emit_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Type,
    arg2: FReg,
    arg3: FReg,
) -> CmpResult {
    match arg0 {
        &FloatCC::Equal => {
            let v7 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v8 = &constructor_cmp_result(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 2854.
            return v8.clone();
        }
        &FloatCC::GreaterThan => {
            let v21 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v22 = &constructor_cmp_result(ctx, v21);
            // Rule at src/isa/riscv64/inst.isle line 2885.
            return v22.clone();
        }
        &FloatCC::GreaterThanOrEqual => {
            let v23 = constructor_rv_fge(ctx, arg1, arg2, arg3);
            let v24 = &constructor_cmp_result(ctx, v23);
            // Rule at src/isa/riscv64/inst.isle line 2890.
            return v24.clone();
        }
        &FloatCC::LessThan => {
            let v10 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v18 = &constructor_cmp_result(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 2875.
            return v18.clone();
        }
        &FloatCC::LessThanOrEqual => {
            let v19 = constructor_rv_fle(ctx, arg1, arg2, arg3);
            let v20 = &constructor_cmp_result(ctx, v19);
            // Rule at src/isa/riscv64/inst.isle line 2880.
            return v20.clone();
        }
        &FloatCC::NotEqual => {
            let v7 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v9 = &constructor_cmp_result_invert(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 2860.
            return v9.clone();
        }
        &FloatCC::Ordered => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v5 = &constructor_cmp_result(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2843.
            return v5.clone();
        }
        &FloatCC::OrderedNotEqual => {
            let v10 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v11 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v12 = constructor_rv_or(ctx, v10, v11);
            let v13 = &constructor_cmp_result(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 2865.
            return v13.clone();
        }
        &FloatCC::Unordered => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v6 = &constructor_cmp_result_invert(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2849.
            return v6.clone();
        }
        &FloatCC::UnorderedOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v14 = constructor_not(ctx, v4);
            let v15 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v16 = constructor_rv_or(ctx, v14, v15);
            let v17 = &constructor_cmp_result(ctx, v16);
            // Rule at src/isa/riscv64/inst.isle line 2870.
            return v17.clone();
        }
        &FloatCC::UnorderedOrGreaterThan => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v30 = constructor_rv_fle(ctx, arg1, arg2, arg3);
            let v31 = constructor_rv_and(ctx, v4, v30);
            let v32 = &constructor_cmp_result_invert(ctx, v31);
            // Rule at src/isa/riscv64/inst.isle line 2908.
            return v32.clone();
        }
        &FloatCC::UnorderedOrGreaterThanOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v33 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v34 = constructor_rv_and(ctx, v4, v33);
            let v35 = &constructor_cmp_result_invert(ctx, v34);
            // Rule at src/isa/riscv64/inst.isle line 2914.
            return v35.clone();
        }
        &FloatCC::UnorderedOrLessThan => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v25 = constructor_rv_fge(ctx, arg1, arg2, arg3);
            let v26 = constructor_rv_and(ctx, v4, v25);
            let v27 = &constructor_cmp_result_invert(ctx, v26);
            // Rule at src/isa/riscv64/inst.isle line 2896.
            return v27.clone();
        }
        &FloatCC::UnorderedOrLessThanOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v11 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v28 = constructor_rv_and(ctx, v4, v11);
            let v29 = &constructor_cmp_result_invert(ctx, v28);
            // Rule at src/isa/riscv64/inst.isle line 2902.
            return v29.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_fcmp", "src/isa/riscv64/inst.isle line 2839"
    )
}

// Generated as internal constructor for term masked.
pub fn constructor_masked<C: Context>(ctx: &mut C, arg0: VReg) -> VecOpMasking {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = VecOpMasking::Enabled { reg: v1 };
    // Rule at src/isa/riscv64/inst_vector.isle line 85.
    return v2;
}

// Generated as internal constructor for term unmasked.
pub fn constructor_unmasked<C: Context>(ctx: &mut C) -> VecOpMasking {
    // Rule at src/isa/riscv64/inst_vector.isle line 88.
    return VecOpMasking::Disabled;
}

// Generated as internal constructor for term element_width_from_type.
pub fn constructor_element_width_from_type<C: Context>(ctx: &mut C, arg0: Type) -> VecElementWidth {
    let v1 = C::lane_type(ctx, arg0);
    match v1 {
        I8 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 216.
            return VecElementWidth::E8;
        }
        I16 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 219.
            return VecElementWidth::E16;
        }
        I32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 222.
            return VecElementWidth::E32;
        }
        I64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 228.
            return VecElementWidth::E64;
        }
        F32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 225.
            return VecElementWidth::E32;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 231.
            return VecElementWidth::E64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "element_width_from_type", "src/isa/riscv64/inst_vector.isle line 215"
    )
}

// Generated as internal constructor for term vec_alu_rrr.
pub fn constructor_vec_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRR,
    arg1: Reg,
    arg2: Reg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRR {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        vs1: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 252.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_imm5.
pub fn constructor_vec_alu_rr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: Imm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRImm5 {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        imm: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 259.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_uimm5.
pub fn constructor_vec_alu_rr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = C::uimm5_bitcast_to_imm5(ctx, arg2);
    let v6 = constructor_vec_alu_rr_imm5(ctx, arg0, arg1, v5, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 267.
    return v6;
}

// Generated as internal constructor for term vec_alu_rr.
pub fn constructor_vec_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRR,
    arg1: Reg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = C::vec_alu_rr_dst_type(ctx, arg0);
    let v5 = C::temp_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRR {
        op: arg0.clone(),
        vd: v5,
        vs: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 273.
    return v8;
}

// Generated as internal constructor for term vec_alu_r_imm5.
pub fn constructor_vec_alu_r_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRImm5,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = constructor_temp_writable_vreg(ctx);
    let v5 = C::writable_vreg_to_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRImm5 {
        op: arg0.clone(),
        vd: v5,
        imm: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_vreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 280.
    return v8;
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: MemFlags,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecLoad {
        eew: arg0.clone(),
        to: v6,
        from: arg1.clone(),
        flags: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 287.
    return v9;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: VReg,
    arg3: MemFlags,
    arg4: &VecOpMasking,
    arg5: VState,
) -> InstOutput {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = MInst::VecStore {
        eew: arg0.clone(),
        to: arg1.clone(),
        from: v6,
        flags: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v8 = SideEffectNoResult::Inst { inst: v7 };
    let v9 = constructor_side_effect(ctx, &v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 294.
    return v9;
}

// Generated as internal constructor for term rv_vadd_vv.
pub fn constructor_rv_vadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 300.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vx.
pub fn constructor_rv_vadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 305.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vi.
pub fn constructor_rv_vadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 310.
    return v7;
}

// Generated as internal constructor for term rv_vsadd_vv.
pub fn constructor_rv_vsadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 315.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vx.
pub fn constructor_rv_vsadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 320.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vi.
pub fn constructor_rv_vsadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 325.
    return v7;
}

// Generated as internal constructor for term rv_vsaddu_vv.
pub fn constructor_rv_vsaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 330.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vx.
pub fn constructor_rv_vsaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 335.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vi.
pub fn constructor_rv_vsaddu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsadduVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 340.
    return v7;
}

// Generated as internal constructor for term rv_vsub_vv.
pub fn constructor_rv_vsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 345.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vx.
pub fn constructor_rv_vsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 350.
    return v8;
}

// Generated as internal constructor for term rv_vrsub_vx.
pub fn constructor_rv_vrsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 355.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vv.
pub fn constructor_rv_vssub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 360.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vx.
pub fn constructor_rv_vssub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 365.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vv.
pub fn constructor_rv_vssubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 370.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vx.
pub fn constructor_rv_vssubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 375.
    return v8;
}

// Generated as internal constructor for term rv_vneg_v.
pub fn constructor_rv_vneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v5 = C::zero_reg(ctx);
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v4, v5, arg1, arg2);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 380.
    return v7;
}

// Generated as internal constructor for term rv_vrsub_vi.
pub fn constructor_rv_vrsub_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VrsubVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 385.
    return v7;
}

// Generated as internal constructor for term rv_vmul_vv.
pub fn constructor_rv_vmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 390.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vv.
pub fn constructor_rv_vmulh_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 395.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vv.
pub fn constructor_rv_vmulhu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 400.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vv.
pub fn constructor_rv_vsll_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 405.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vx.
pub fn constructor_rv_vsll_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 410.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vi.
pub fn constructor_rv_vsll_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsllVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 415.
    return v7;
}

// Generated as internal constructor for term rv_vsrl_vv.
pub fn constructor_rv_vsrl_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 420.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vx.
pub fn constructor_rv_vsrl_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 425.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vi.
pub fn constructor_rv_vsrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 430.
    return v7;
}

// Generated as internal constructor for term rv_vsra_vv.
pub fn constructor_rv_vsra_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 435.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vx.
pub fn constructor_rv_vsra_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 440.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vi.
pub fn constructor_rv_vsra_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsraVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 445.
    return v7;
}

// Generated as internal constructor for term rv_vand_vv.
pub fn constructor_rv_vand_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 450.
    return v8;
}

// Generated as internal constructor for term rv_vand_vx.
pub fn constructor_rv_vand_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 455.
    return v8;
}

// Generated as internal constructor for term rv_vand_vi.
pub fn constructor_rv_vand_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VandVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 460.
    return v7;
}

// Generated as internal constructor for term rv_vor_vv.
pub fn constructor_rv_vor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 465.
    return v8;
}

// Generated as internal constructor for term rv_vor_vx.
pub fn constructor_rv_vor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 470.
    return v8;
}

// Generated as internal constructor for term rv_vor_vi.
pub fn constructor_rv_vor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 475.
    return v7;
}

// Generated as internal constructor for term rv_vxor_vv.
pub fn constructor_rv_vxor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 480.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vx.
pub fn constructor_rv_vxor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 485.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vi.
pub fn constructor_rv_vxor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VxorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 490.
    return v7;
}

// Generated as internal constructor for term rv_vnot_v.
pub fn constructor_rv_vnot_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::imm5_from_i8(ctx, -0x1);
    if let Some(v5) = v4 {
        let v6 = constructor_rv_vxor_vi(ctx, arg0, v5, arg1, arg2);
        // Rule at src/isa/riscv64/inst_vector.isle line 496.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_vnot_v", "src/isa/riscv64/inst_vector.isle line 495"
    )
}

// Generated as internal constructor for term rv_vmax_vv.
pub fn constructor_rv_vmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 502.
    return v8;
}

// Generated as internal constructor for term rv_vmax_vx.
pub fn constructor_rv_vmax_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 507.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vv.
pub fn constructor_rv_vmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 512.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vx.
pub fn constructor_rv_vmin_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 517.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vv.
pub fn constructor_rv_vmaxu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 522.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vx.
pub fn constructor_rv_vmaxu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 527.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vv.
pub fn constructor_rv_vminu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 532.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vx.
pub fn constructor_rv_vminu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 537.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vv.
pub fn constructor_rv_vfadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 542.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vf.
pub fn constructor_rv_vfadd_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 547.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vv.
pub fn constructor_rv_vfsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 552.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vf.
pub fn constructor_rv_vfsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 557.
    return v8;
}

// Generated as internal constructor for term rv_vfrsub_vf.
pub fn constructor_rv_vfrsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 562.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vv.
pub fn constructor_rv_vfmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 567.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vf.
pub fn constructor_rv_vfmul_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 572.
    return v8;
}

// Generated as internal constructor for term rv_vfdiv_vv.
pub fn constructor_rv_vfdiv_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 577.
    return v8;
}

// Generated as internal constructor for term rv_vfdiv_vf.
pub fn constructor_rv_vfdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 582.
    return v8;
}

// Generated as internal constructor for term rv_vfrdiv_vf.
pub fn constructor_rv_vfrdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 587.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnjn_vv.
pub fn constructor_rv_vfsgnjn_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjnVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 593.
    return v8;
}

// Generated as internal constructor for term rv_vfneg_v.
pub fn constructor_rv_vfneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjn_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst_vector.isle line 599.
    return v3;
}

// Generated as internal constructor for term rv_vfsqrt_v.
pub fn constructor_rv_vfsqrt_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfsqrtV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 604.
    return v6;
}

// Generated as internal constructor for term rv_vslidedown_vx.
pub fn constructor_rv_vslidedown_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VslidedownVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 611.
    return v8;
}

// Generated as internal constructor for term rv_vslidedown_vi.
pub fn constructor_rv_vslidedown_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VslidedownVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 617.
    return v7;
}

// Generated as internal constructor for term rv_vmv_xs.
pub fn constructor_rv_vmv_xs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> XReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvXS, v3, v4, arg1);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 624.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_fs.
pub fn constructor_rv_vfmv_fs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> FReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvFS, v3, v4, arg1);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 631.
    return v6;
}

// Generated as internal constructor for term rv_vmv_sx.
pub fn constructor_rv_vmv_sx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvSX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 638.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_sf.
pub fn constructor_rv_vfmv_sf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvSF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 645.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vx.
pub fn constructor_rv_vmv_vx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvVX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 652.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_vf.
pub fn constructor_rv_vfmv_vf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvVF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 659.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vi.
pub fn constructor_rv_vmv_vi<C: Context>(ctx: &mut C, arg0: Imm5, arg1: VState) -> VReg {
    let v3 = &constructor_unmasked(ctx);
    let v4 = constructor_vec_alu_r_imm5(ctx, &VecAluOpRImm5::VmvVI, arg0, v3, arg1);
    let v5 = C::vreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 666.
    return v5;
}

// Generated as internal constructor for term rv_vmerge_vvm.
pub fn constructor_rv_vmerge_vvm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVVM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 676.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vxm.
pub fn constructor_rv_vmerge_vxm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVXM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 685.
    return v9;
}

// Generated as internal constructor for term rv_vfmerge_vfm.
pub fn constructor_rv_vfmerge_vfm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmergeVFM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 694.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vim.
pub fn constructor_rv_vmerge_vim<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = &constructor_masked(ctx, arg2);
    let v7 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmergeVIM, v5, arg1, v6, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 703.
    return v8;
}

// Generated as internal constructor for term rv_vredminu_vs.
pub fn constructor_rv_vredminu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredminuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 711.
    return v8;
}

// Generated as internal constructor for term rv_vredmaxu_vs.
pub fn constructor_rv_vredmaxu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredmaxuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 718.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vx.
pub fn constructor_rv_vmslt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 723.
    return v8;
}

// Generated as internal constructor for term gen_extractlane.
pub fn constructor_gen_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VReg,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        if arg2 == 0x0 {
            let v5 = C::ty_vector_float(ctx, v2);
            if let Some(v6) = v5 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v8 = constructor_rv_vfmv_fs(ctx, arg1, v7);
                let v9 = C::freg_to_reg(ctx, v8);
                // Rule at src/isa/riscv64/inst_vector.isle line 731.
                return v9;
            }
            let v10 = C::ty_vector_not_float(ctx, v2);
            if let Some(v11) = v10 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vmv_xs(ctx, arg1, v7);
                let v13 = C::xreg_to_reg(ctx, v12);
                // Rule at src/isa/riscv64/inst_vector.isle line 736.
                return v13;
            }
        }
        let v14 = C::uimm5_from_u8(ctx, arg2);
        if let Some(v15) = v14 {
            let v16 = &constructor_unmasked(ctx);
            let v7 = C::vstate_from_type(ctx, v2);
            let v17 = constructor_rv_vslidedown_vi(ctx, arg1, v15, v16, v7);
            let v19 = constructor_gen_extractlane(ctx, v2, v17, 0x0);
            // Rule at src/isa/riscv64/inst_vector.isle line 743.
            return v19;
        }
        let v21 = C::u8_as_u64(ctx, arg2);
        let v22 = C::imm(ctx, I64, v21);
        let v23 = C::xreg_new(ctx, v22);
        let v16 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v2);
        let v24 = constructor_rv_vslidedown_vx(ctx, arg1, v23, v16, v7);
        let v25 = constructor_gen_extractlane(ctx, v2, v24, 0x0);
        // Rule at src/isa/riscv64/inst_vector.isle line 747.
        return v25;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_extractlane", "src/isa/riscv64/inst_vector.isle line 728"
    )
}

// Generated as internal constructor for term gen_vec_mask.
pub fn constructor_gen_vec_mask<C: Context>(ctx: &mut C, arg0: u64) -> VReg {
    let v2 = C::imm(ctx, I64, arg0);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = C::vstate_from_type(ctx, I64X2);
    let v6 = constructor_rv_vmv_sx(ctx, v3, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 759.
    return v6;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v822,
            args: ref v823,
            flags: v824,
        } => {
            if let &Opcode::AtomicCas = v822 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v761 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v762) = v761 {
                        let v792 = C::temp_writable_reg(ctx, v762);
                        let v829 = C::temp_writable_reg(ctx, v762);
                        let v825 = C::unpack_value_array_3(ctx, v823);
                        let v830 = constructor_put_in_xreg(ctx, v825.0);
                        let v831 = constructor_gen_atomic_offset(ctx, v830, v762);
                        let v833 = constructor_put_in_xreg(ctx, v825.1);
                        let v834 = constructor_zext(ctx, v833, v762, I64);
                        let v836 = constructor_put_in_xreg(ctx, v825.0);
                        let v837 = constructor_gen_atomic_p(ctx, v836, v762);
                        let v839 = C::put_in_reg(ctx, v825.2);
                        let v832 = C::xreg_to_reg(ctx, v831);
                        let v835 = C::xreg_to_reg(ctx, v834);
                        let v838 = C::xreg_to_reg(ctx, v837);
                        let v840 = MInst::AtomicCas {
                            offset: v832,
                            t0: v792,
                            dst: v829,
                            e: v835,
                            addr: v838,
                            v: v839,
                            ty: v762,
                        };
                        let v841 = C::emit(ctx, &v840);
                        let v842 = C::writable_reg_to_reg(ctx, v829);
                        let v843 = constructor_output_reg(ctx, v842);
                        // Rule at src/isa/riscv64/lower.isle line 814.
                        return Some(v843);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v763,
            args: ref v764,
            flags: v765,
            op: ref v766,
        } => {
            if let &Opcode::AtomicRmw = v763 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v761 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v762) = v761 {
                        let v776 = C::fits_in_16(ctx, v762);
                        if let Some(v777) = v776 {
                            let v782 = C::is_atomic_rmw_max_etc(ctx, v766);
                            if let Some(v783) = v782 {
                                match v783.1 {
                                    true => {
                                        let v767 = C::unpack_value_array_2(ctx, v764);
                                        let v778 = constructor_put_in_xreg(ctx, v767.0);
                                        let v779 = constructor_put_in_xreg(ctx, v767.1);
                                        let v786 = constructor_sext(ctx, v779, v777, I64);
                                        let v787 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v783.0, v777, v778, v786,
                                        );
                                        let v788 = constructor_output_xreg(ctx, v787);
                                        // Rule at src/isa/riscv64/lower.isle line 746.
                                        return Some(v788);
                                    }
                                    false => {
                                        let v767 = C::unpack_value_array_2(ctx, v764);
                                        let v778 = constructor_put_in_xreg(ctx, v767.0);
                                        let v779 = constructor_put_in_xreg(ctx, v767.1);
                                        let v789 = constructor_zext(ctx, v779, v777, I64);
                                        let v790 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v783.0, v777, v778, v789,
                                        );
                                        let v791 = constructor_output_xreg(ctx, v790);
                                        // Rule at src/isa/riscv64/lower.isle line 752.
                                        return Some(v791);
                                    }
                                    _ => {}
                                }
                            }
                            let v767 = C::unpack_value_array_2(ctx, v764);
                            let v778 = constructor_put_in_xreg(ctx, v767.0);
                            let v779 = constructor_put_in_xreg(ctx, v767.1);
                            let v780 = constructor_gen_atomic_rmw_loop(ctx, v766, v777, v778, v779);
                            let v781 = constructor_output_xreg(ctx, v780);
                            // Rule at src/isa/riscv64/lower.isle line 739.
                            return Some(v781);
                        }
                        match v766 {
                            &AtomicRmwOp::Nand => {
                                let v767 = C::unpack_value_array_2(ctx, v764);
                                let v778 = constructor_put_in_xreg(ctx, v767.0);
                                let v779 = constructor_put_in_xreg(ctx, v767.1);
                                let v802 = constructor_gen_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRmwOp::Nand,
                                    v762,
                                    v778,
                                    v779,
                                );
                                let v803 = constructor_output_xreg(ctx, v802);
                                // Rule at src/isa/riscv64/lower.isle line 779.
                                return Some(v803);
                            }
                            &AtomicRmwOp::Sub => {
                                let v792 = C::temp_writable_reg(ctx, v762);
                                let v767 = C::unpack_value_array_2(ctx, v764);
                                let v779 = constructor_put_in_xreg(ctx, v767.1);
                                let v793 = constructor_rv_neg(ctx, v779);
                                let v796 =
                                    &constructor_get_atomic_rmw_op(ctx, v762, &AtomicRmwOp::Add);
                                let v797 = C::put_in_reg(ctx, v767.0);
                                let v798 = C::atomic_amo(ctx);
                                let v794 = C::xreg_to_reg(ctx, v793);
                                let v799 = constructor_gen_atomic(ctx, v796, v797, v794, v798);
                                let v800 = constructor_output_reg(ctx, v799);
                                // Rule at src/isa/riscv64/lower.isle line 761.
                                return Some(v800);
                            }
                            _ => {}
                        }
                        let v770 = &constructor_get_atomic_rmw_op(ctx, v762, v766);
                        let v767 = C::unpack_value_array_2(ctx, v764);
                        let v771 = C::put_in_reg(ctx, v767.0);
                        let v772 = C::put_in_reg(ctx, v767.1);
                        let v773 = C::atomic_amo(ctx);
                        let v774 = constructor_gen_atomic(ctx, v770, v771, v772, v773);
                        let v775 = constructor_output_reg(ctx, v774);
                        // Rule at src/isa/riscv64/lower.isle line 732.
                        return Some(v775);
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v42,
            args: ref v43,
        } => {
            match v42 {
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v176 = constructor_put_in_vreg(ctx, v44.1);
                                        let v177 = constructor_put_in_xreg(ctx, v83);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v989 =
                                            constructor_rv_vmin_vx(ctx, v176, v177, v19, v20);
                                        let v990 = constructor_output_vreg(ctx, v989);
                                        // Rule at src/isa/riscv64/lower.isle line 1001.
                                        return Some(v990);
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v173 = constructor_put_in_xreg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v987 =
                                            constructor_rv_vmin_vx(ctx, v169, v173, v19, v20);
                                        let v988 = constructor_output_vreg(ctx, v987);
                                        // Rule at src/isa/riscv64/lower.isle line 998.
                                        return Some(v988);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v985 = constructor_rv_vmin_vv(ctx, v169, v170, v19, v20);
                            let v986 = constructor_output_vreg(ctx, v985);
                            // Rule at src/isa/riscv64/lower.isle line 995.
                            return Some(v986);
                        }
                        let v235 = C::ty_int(ctx, v3);
                        if let Some(v236) = v235 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v144 = C::put_in_regs(ctx, v44.0);
                            let v972 = constructor_ext_int_if_need(ctx, true, v144, v236);
                            let v638 = C::put_in_regs(ctx, v44.1);
                            let v973 = constructor_ext_int_if_need(ctx, true, v638, v236);
                            let v983 = constructor_gen_int_select(
                                ctx,
                                v236,
                                &IntSelectOP::Smin,
                                v972,
                                v973,
                            );
                            let v984 = C::output(ctx, v983);
                            // Rule at src/isa/riscv64/lower.isle line 992.
                            return Some(v984);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v176 = constructor_put_in_vreg(ctx, v44.1);
                                        let v177 = constructor_put_in_xreg(ctx, v83);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v1010 =
                                            constructor_rv_vminu_vx(ctx, v176, v177, v19, v20);
                                        let v1011 = constructor_output_vreg(ctx, v1010);
                                        // Rule at src/isa/riscv64/lower.isle line 1029.
                                        return Some(v1011);
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v173 = constructor_put_in_xreg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v1008 =
                                            constructor_rv_vminu_vx(ctx, v169, v173, v19, v20);
                                        let v1009 = constructor_output_vreg(ctx, v1008);
                                        // Rule at src/isa/riscv64/lower.isle line 1026.
                                        return Some(v1009);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v1006 = constructor_rv_vminu_vv(ctx, v169, v170, v19, v20);
                            let v1007 = constructor_output_vreg(ctx, v1006);
                            // Rule at src/isa/riscv64/lower.isle line 1023.
                            return Some(v1007);
                        }
                        let v235 = C::ty_int(ctx, v3);
                        if let Some(v236) = v235 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v144 = C::put_in_regs(ctx, v44.0);
                            let v993 = constructor_ext_int_if_need(ctx, false, v144, v236);
                            let v638 = C::put_in_regs(ctx, v44.1);
                            let v994 = constructor_ext_int_if_need(ctx, false, v638, v236);
                            let v1004 = constructor_gen_int_select(
                                ctx,
                                v236,
                                &IntSelectOP::Umin,
                                v993,
                                v994,
                            );
                            let v1005 = C::output(ctx, v1004);
                            // Rule at src/isa/riscv64/lower.isle line 1020.
                            return Some(v1005);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v176 = constructor_put_in_vreg(ctx, v44.1);
                                        let v177 = constructor_put_in_xreg(ctx, v83);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v980 =
                                            constructor_rv_vmax_vx(ctx, v176, v177, v19, v20);
                                        let v981 = constructor_output_vreg(ctx, v980);
                                        // Rule at src/isa/riscv64/lower.isle line 987.
                                        return Some(v981);
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v173 = constructor_put_in_xreg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v978 =
                                            constructor_rv_vmax_vx(ctx, v169, v173, v19, v20);
                                        let v979 = constructor_output_vreg(ctx, v978);
                                        // Rule at src/isa/riscv64/lower.isle line 984.
                                        return Some(v979);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v976 = constructor_rv_vmax_vv(ctx, v169, v170, v19, v20);
                            let v977 = constructor_output_vreg(ctx, v976);
                            // Rule at src/isa/riscv64/lower.isle line 981.
                            return Some(v977);
                        }
                        let v235 = C::ty_int(ctx, v3);
                        if let Some(v236) = v235 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v144 = C::put_in_regs(ctx, v44.0);
                            let v972 = constructor_ext_int_if_need(ctx, true, v144, v236);
                            let v638 = C::put_in_regs(ctx, v44.1);
                            let v973 = constructor_ext_int_if_need(ctx, true, v638, v236);
                            let v974 = constructor_gen_int_select(
                                ctx,
                                v236,
                                &IntSelectOP::Smax,
                                v972,
                                v973,
                            );
                            let v975 = C::output(ctx, v974);
                            // Rule at src/isa/riscv64/lower.isle line 978.
                            return Some(v975);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v176 = constructor_put_in_vreg(ctx, v44.1);
                                        let v177 = constructor_put_in_xreg(ctx, v83);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v1001 =
                                            constructor_rv_vmaxu_vx(ctx, v176, v177, v19, v20);
                                        let v1002 = constructor_output_vreg(ctx, v1001);
                                        // Rule at src/isa/riscv64/lower.isle line 1015.
                                        return Some(v1002);
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v173 = constructor_put_in_xreg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v999 =
                                            constructor_rv_vmaxu_vx(ctx, v169, v173, v19, v20);
                                        let v1000 = constructor_output_vreg(ctx, v999);
                                        // Rule at src/isa/riscv64/lower.isle line 1012.
                                        return Some(v1000);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v997 = constructor_rv_vmaxu_vv(ctx, v169, v170, v19, v20);
                            let v998 = constructor_output_vreg(ctx, v997);
                            // Rule at src/isa/riscv64/lower.isle line 1009.
                            return Some(v998);
                        }
                        let v235 = C::ty_int(ctx, v3);
                        if let Some(v236) = v235 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v144 = C::put_in_regs(ctx, v44.0);
                            let v993 = constructor_ext_int_if_need(ctx, false, v144, v236);
                            let v638 = C::put_in_regs(ctx, v44.1);
                            let v994 = constructor_ext_int_if_need(ctx, false, v638, v236);
                            let v995 = constructor_gen_int_select(
                                ctx,
                                v236,
                                &IntSelectOP::Umax,
                                v993,
                                v994,
                            );
                            let v996 = C::output(ctx, v995);
                            // Rule at src/isa/riscv64/lower.isle line 1006.
                            return Some(v996);
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v190 = C::def_inst(ctx, v83);
                                        if let Some(v191) = v190 {
                                            let v192 = &C::inst_data(ctx, v191);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v193,
                                                imm: v194,
                                            } = v192
                                            {
                                                if let &Opcode::Iconst = v193 {
                                                    let v195 = C::u64_from_imm64(ctx, v194);
                                                    let v196 = C::imm5_from_u64(ctx, v195);
                                                    if let Some(v197) = v196 {
                                                        let v176 =
                                                            constructor_put_in_vreg(ctx, v44.1);
                                                        let v19 = &constructor_unmasked(ctx);
                                                        let v20 = C::vstate_from_type(ctx, v11);
                                                        let v1278 = constructor_rv_vsaddu_vi(
                                                            ctx, v176, v197, v19, v20,
                                                        );
                                                        let v1279 =
                                                            constructor_output_vreg(ctx, v1278);
                                                        // Rule at src/isa/riscv64/lower.isle line 1327.
                                                        return Some(v1279);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v180 = C::def_inst(ctx, v75);
                                        if let Some(v181) = v180 {
                                            let v182 = &C::inst_data(ctx, v181);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v183,
                                                imm: v184,
                                            } = v182
                                            {
                                                if let &Opcode::Iconst = v183 {
                                                    let v185 = C::u64_from_imm64(ctx, v184);
                                                    let v186 = C::imm5_from_u64(ctx, v185);
                                                    if let Some(v187) = v186 {
                                                        let v169 =
                                                            constructor_put_in_vreg(ctx, v44.0);
                                                        let v19 = &constructor_unmasked(ctx);
                                                        let v20 = C::vstate_from_type(ctx, v11);
                                                        let v1276 = constructor_rv_vsaddu_vi(
                                                            ctx, v169, v187, v19, v20,
                                                        );
                                                        let v1277 =
                                                            constructor_output_vreg(ctx, v1276);
                                                        // Rule at src/isa/riscv64/lower.isle line 1324.
                                                        return Some(v1277);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v176 = constructor_put_in_vreg(ctx, v44.1);
                                        let v177 = constructor_put_in_xreg(ctx, v83);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v1274 =
                                            constructor_rv_vsaddu_vx(ctx, v176, v177, v19, v20);
                                        let v1275 = constructor_output_vreg(ctx, v1274);
                                        // Rule at src/isa/riscv64/lower.isle line 1321.
                                        return Some(v1275);
                                    }
                                }
                            }
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v173 = constructor_put_in_xreg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v1272 =
                                            constructor_rv_vsaddu_vx(ctx, v169, v173, v19, v20);
                                        let v1273 = constructor_output_vreg(ctx, v1272);
                                        // Rule at src/isa/riscv64/lower.isle line 1318.
                                        return Some(v1273);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v1270 = constructor_rv_vsaddu_vv(ctx, v169, v170, v19, v20);
                            let v1271 = constructor_output_vreg(ctx, v1270);
                            // Rule at src/isa/riscv64/lower.isle line 1315.
                            return Some(v1271);
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v190 = C::def_inst(ctx, v83);
                                        if let Some(v191) = v190 {
                                            let v192 = &C::inst_data(ctx, v191);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v193,
                                                imm: v194,
                                            } = v192
                                            {
                                                if let &Opcode::Iconst = v193 {
                                                    let v195 = C::u64_from_imm64(ctx, v194);
                                                    let v196 = C::imm5_from_u64(ctx, v195);
                                                    if let Some(v197) = v196 {
                                                        let v176 =
                                                            constructor_put_in_vreg(ctx, v44.1);
                                                        let v19 = &constructor_unmasked(ctx);
                                                        let v20 = C::vstate_from_type(ctx, v11);
                                                        let v1288 = constructor_rv_vsadd_vi(
                                                            ctx, v176, v197, v19, v20,
                                                        );
                                                        let v1289 =
                                                            constructor_output_vreg(ctx, v1288);
                                                        // Rule at src/isa/riscv64/lower.isle line 1344.
                                                        return Some(v1289);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v180 = C::def_inst(ctx, v75);
                                        if let Some(v181) = v180 {
                                            let v182 = &C::inst_data(ctx, v181);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v183,
                                                imm: v184,
                                            } = v182
                                            {
                                                if let &Opcode::Iconst = v183 {
                                                    let v185 = C::u64_from_imm64(ctx, v184);
                                                    let v186 = C::imm5_from_u64(ctx, v185);
                                                    if let Some(v187) = v186 {
                                                        let v169 =
                                                            constructor_put_in_vreg(ctx, v44.0);
                                                        let v19 = &constructor_unmasked(ctx);
                                                        let v20 = C::vstate_from_type(ctx, v11);
                                                        let v1286 = constructor_rv_vsadd_vi(
                                                            ctx, v169, v187, v19, v20,
                                                        );
                                                        let v1287 =
                                                            constructor_output_vreg(ctx, v1286);
                                                        // Rule at src/isa/riscv64/lower.isle line 1341.
                                                        return Some(v1287);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v176 = constructor_put_in_vreg(ctx, v44.1);
                                        let v177 = constructor_put_in_xreg(ctx, v83);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v1284 =
                                            constructor_rv_vsadd_vx(ctx, v176, v177, v19, v20);
                                        let v1285 = constructor_output_vreg(ctx, v1284);
                                        // Rule at src/isa/riscv64/lower.isle line 1338.
                                        return Some(v1285);
                                    }
                                }
                            }
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v173 = constructor_put_in_xreg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v1282 =
                                            constructor_rv_vsadd_vx(ctx, v169, v173, v19, v20);
                                        let v1283 = constructor_output_vreg(ctx, v1282);
                                        // Rule at src/isa/riscv64/lower.isle line 1335.
                                        return Some(v1283);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v1280 = constructor_rv_vsadd_vv(ctx, v169, v170, v19, v20);
                            let v1281 = constructor_output_vreg(ctx, v1280);
                            // Rule at src/isa/riscv64/lower.isle line 1332.
                            return Some(v1281);
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v173 = constructor_put_in_xreg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v1292 =
                                            constructor_rv_vssubu_vx(ctx, v169, v173, v19, v20);
                                        let v1293 = constructor_output_vreg(ctx, v1292);
                                        // Rule at src/isa/riscv64/lower.isle line 1352.
                                        return Some(v1293);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v1290 = constructor_rv_vssubu_vv(ctx, v169, v170, v19, v20);
                            let v1291 = constructor_output_vreg(ctx, v1290);
                            // Rule at src/isa/riscv64/lower.isle line 1349.
                            return Some(v1291);
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v173 = constructor_put_in_xreg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v1296 =
                                            constructor_rv_vssub_vx(ctx, v169, v173, v19, v20);
                                        let v1297 = constructor_output_vreg(ctx, v1296);
                                        // Rule at src/isa/riscv64/lower.isle line 1360.
                                        return Some(v1297);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v1294 = constructor_rv_vssub_vv(ctx, v169, v170, v19, v20);
                            let v1295 = constructor_output_vreg(ctx, v1294);
                            // Rule at src/isa/riscv64/lower.isle line 1357.
                            return Some(v1295);
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v190 = C::def_inst(ctx, v83);
                                        if let Some(v191) = v190 {
                                            let v192 = &C::inst_data(ctx, v191);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v193,
                                                imm: v194,
                                            } = v192
                                            {
                                                if let &Opcode::Iconst = v193 {
                                                    let v195 = C::u64_from_imm64(ctx, v194);
                                                    let v196 = C::imm5_from_u64(ctx, v195);
                                                    if let Some(v197) = v196 {
                                                        let v176 =
                                                            constructor_put_in_vreg(ctx, v44.1);
                                                        let v19 = &constructor_unmasked(ctx);
                                                        let v20 = C::vstate_from_type(ctx, v11);
                                                        let v198 = constructor_rv_vadd_vi(
                                                            ctx, v176, v197, v19, v20,
                                                        );
                                                        let v199 =
                                                            constructor_output_vreg(ctx, v198);
                                                        // Rule at src/isa/riscv64/lower.isle line 123.
                                                        return Some(v199);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v180 = C::def_inst(ctx, v75);
                                        if let Some(v181) = v180 {
                                            let v182 = &C::inst_data(ctx, v181);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v183,
                                                imm: v184,
                                            } = v182
                                            {
                                                if let &Opcode::Iconst = v183 {
                                                    let v185 = C::u64_from_imm64(ctx, v184);
                                                    let v186 = C::imm5_from_u64(ctx, v185);
                                                    if let Some(v187) = v186 {
                                                        let v169 =
                                                            constructor_put_in_vreg(ctx, v44.0);
                                                        let v19 = &constructor_unmasked(ctx);
                                                        let v20 = C::vstate_from_type(ctx, v11);
                                                        let v188 = constructor_rv_vadd_vi(
                                                            ctx, v169, v187, v19, v20,
                                                        );
                                                        let v189 =
                                                            constructor_output_vreg(ctx, v188);
                                                        // Rule at src/isa/riscv64/lower.isle line 120.
                                                        return Some(v189);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v176 = constructor_put_in_vreg(ctx, v44.1);
                                        let v177 = constructor_put_in_xreg(ctx, v83);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v178 =
                                            constructor_rv_vadd_vx(ctx, v176, v177, v19, v20);
                                        let v179 = constructor_output_vreg(ctx, v178);
                                        // Rule at src/isa/riscv64/lower.isle line 117.
                                        return Some(v179);
                                    }
                                }
                            }
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v173 = constructor_put_in_xreg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v174 =
                                            constructor_rv_vadd_vx(ctx, v169, v173, v19, v20);
                                        let v175 = constructor_output_vreg(ctx, v174);
                                        // Rule at src/isa/riscv64/lower.isle line 114.
                                        return Some(v175);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v171 = constructor_rv_vadd_vv(ctx, v169, v170, v19, v20);
                            let v172 = constructor_output_vreg(ctx, v171);
                            // Rule at src/isa/riscv64/lower.isle line 111.
                            return Some(v172);
                        }
                        match v3 {
                            I64 => {
                                let v77 = C::has_zba(ctx);
                                if v77 == true {
                                    let v44 = C::unpack_value_array_2(ctx, v43);
                                    let v63 = C::def_inst(ctx, v44.0);
                                    if let Some(v64) = v63 {
                                        let v65 = &C::inst_data(ctx, v64);
                                        if let &InstructionData::Binary {
                                            opcode: ref v105,
                                            args: ref v106,
                                        } = v65
                                        {
                                            if let &Opcode::Ishl = v105 {
                                                let v107 = C::unpack_value_array_2(ctx, v106);
                                                let v110 = C::maybe_uextend(ctx, v107.1);
                                                if let Some(v111) = v110 {
                                                    let v112 = C::def_inst(ctx, v111);
                                                    if let Some(v113) = v112 {
                                                        let v114 = &C::inst_data(ctx, v113);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v115,
                                                            imm: v116,
                                                        } = v114
                                                        {
                                                            if let &Opcode::Iconst = v115 {
                                                                let v133 = C::def_inst(ctx, v107.0);
                                                                if let Some(v134) = v133 {
                                                                    let v135 =
                                                                        &C::inst_data(ctx, v134);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v136,
                                                                        arg: v137,
                                                                    } = v135 {
                                                                        if let &Opcode::Uextend = v136 {
                                                                            let v138 = C::value_type(ctx, v137);
                                                                            if v138 == I32 {
                                                                                let v139 = &constructor_match_shnadd_uw(ctx, v116);
                                                                                if let Some(v140) = v139 {
                                                                                    let v141 = C::put_in_reg(ctx, v137);
                                                                                    let v71 = C::put_in_reg(ctx, v44.1);
                                                                                    let v142 = constructor_alu_rrr(ctx, v140, v141, v71);
                                                                                    let v143 = constructor_output_reg(ctx, v142);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 94.
                                                                                    return Some(v143);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v51 = C::def_inst(ctx, v44.1);
                                    if let Some(v52) = v51 {
                                        let v53 = &C::inst_data(ctx, v52);
                                        if let &InstructionData::Binary {
                                            opcode: ref v88,
                                            args: ref v89,
                                        } = v53
                                        {
                                            if let &Opcode::Ishl = v88 {
                                                let v90 = C::unpack_value_array_2(ctx, v89);
                                                let v93 = C::maybe_uextend(ctx, v90.1);
                                                if let Some(v94) = v93 {
                                                    let v95 = C::def_inst(ctx, v94);
                                                    if let Some(v96) = v95 {
                                                        let v97 = &C::inst_data(ctx, v96);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v98,
                                                            imm: v99,
                                                        } = v97
                                                        {
                                                            if let &Opcode::Iconst = v98 {
                                                                let v122 = C::def_inst(ctx, v90.0);
                                                                if let Some(v123) = v122 {
                                                                    let v124 =
                                                                        &C::inst_data(ctx, v123);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v125,
                                                                        arg: v126,
                                                                    } = v124 {
                                                                        if let &Opcode::Uextend = v125 {
                                                                            let v127 = C::value_type(ctx, v126);
                                                                            if v127 == I32 {
                                                                                let v128 = &constructor_match_shnadd_uw(ctx, v99);
                                                                                if let Some(v129) = v128 {
                                                                                    let v130 = C::put_in_reg(ctx, v126);
                                                                                    let v60 = C::put_in_reg(ctx, v44.0);
                                                                                    let v131 = constructor_alu_rrr(ctx, v129, v130, v60);
                                                                                    let v132 = constructor_output_reg(ctx, v131);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 89.
                                                                                    return Some(v132);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if let Some(v64) = v63 {
                                        let v65 = &C::inst_data(ctx, v64);
                                        match v65 {
                                            &InstructionData::Binary {
                                                opcode: ref v105,
                                                args: ref v106,
                                            } => {
                                                if let &Opcode::Ishl = v105 {
                                                    let v107 = C::unpack_value_array_2(ctx, v106);
                                                    let v110 = C::maybe_uextend(ctx, v107.1);
                                                    if let Some(v111) = v110 {
                                                        let v112 = C::def_inst(ctx, v111);
                                                        if let Some(v113) = v112 {
                                                            let v114 = &C::inst_data(ctx, v113);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v115,
                                                                imm: v116,
                                                            } = v114
                                                            {
                                                                if let &Opcode::Iconst = v115 {
                                                                    let v117 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v116,
                                                                        );
                                                                    if let Some(v118) = v117 {
                                                                        let v119 = C::put_in_reg(
                                                                            ctx, v107.0,
                                                                        );
                                                                        let v71 = C::put_in_reg(
                                                                            ctx, v44.1,
                                                                        );
                                                                        let v120 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v118, v119,
                                                                                v71,
                                                                            );
                                                                        let v121 =
                                                                            constructor_output_reg(
                                                                                ctx, v120,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 72.
                                                                        return Some(v121);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v82,
                                                arg: v83,
                                            } => {
                                                if let &Opcode::Uextend = v82 {
                                                    let v84 = C::value_type(ctx, v83);
                                                    if v84 == I32 {
                                                        let v85 = constructor_put_in_xreg(ctx, v83);
                                                        let v48 =
                                                            constructor_put_in_xreg(ctx, v44.1);
                                                        let v86 =
                                                            constructor_rv_adduw(ctx, v85, v48);
                                                        let v87 = constructor_output_xreg(ctx, v86);
                                                        // Rule at src/isa/riscv64/lower.isle line 57.
                                                        return Some(v87);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    if let Some(v52) = v51 {
                                        let v53 = &C::inst_data(ctx, v52);
                                        match v53 {
                                            &InstructionData::Binary {
                                                opcode: ref v88,
                                                args: ref v89,
                                            } => {
                                                if let &Opcode::Ishl = v88 {
                                                    let v90 = C::unpack_value_array_2(ctx, v89);
                                                    let v93 = C::maybe_uextend(ctx, v90.1);
                                                    if let Some(v94) = v93 {
                                                        let v95 = C::def_inst(ctx, v94);
                                                        if let Some(v96) = v95 {
                                                            let v97 = &C::inst_data(ctx, v96);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v98,
                                                                imm: v99,
                                                            } = v97
                                                            {
                                                                if let &Opcode::Iconst = v98 {
                                                                    let v100 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v99,
                                                                        );
                                                                    if let Some(v101) = v100 {
                                                                        let v102 = C::put_in_reg(
                                                                            ctx, v90.0,
                                                                        );
                                                                        let v60 = C::put_in_reg(
                                                                            ctx, v44.0,
                                                                        );
                                                                        let v103 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v101, v102,
                                                                                v60,
                                                                            );
                                                                        let v104 =
                                                                            constructor_output_reg(
                                                                                ctx, v103,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 67.
                                                                        return Some(v104);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v74,
                                                arg: v75,
                                            } => {
                                                if let &Opcode::Uextend = v74 {
                                                    let v76 = C::value_type(ctx, v75);
                                                    if v76 == I32 {
                                                        let v78 = constructor_put_in_xreg(ctx, v75);
                                                        let v79 =
                                                            constructor_put_in_xreg(ctx, v44.0);
                                                        let v80 =
                                                            constructor_rv_adduw(ctx, v78, v79);
                                                        let v81 = constructor_output_xreg(ctx, v80);
                                                        // Rule at src/isa/riscv64/lower.isle line 53.
                                                        return Some(v81);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v144 = C::put_in_regs(ctx, v44.0);
                                let v146 = C::value_regs_get(ctx, v144, 0x0);
                                let v147 = C::xreg_new(ctx, v146);
                                let v148 = C::put_in_regs(ctx, v44.1);
                                let v149 = C::value_regs_get(ctx, v148, 0x0);
                                let v150 = C::xreg_new(ctx, v149);
                                let v151 = constructor_rv_add(ctx, v147, v150);
                                let v152 = C::put_in_regs(ctx, v44.1);
                                let v153 = C::value_regs_get(ctx, v152, 0x0);
                                let v154 = C::xreg_new(ctx, v153);
                                let v155 = constructor_rv_sltu(ctx, v151, v154);
                                let v156 = C::put_in_regs(ctx, v44.0);
                                let v158 = C::value_regs_get(ctx, v156, 0x1);
                                let v159 = C::xreg_new(ctx, v158);
                                let v160 = C::put_in_regs(ctx, v44.1);
                                let v161 = C::value_regs_get(ctx, v160, 0x1);
                                let v162 = C::xreg_new(ctx, v161);
                                let v163 = constructor_rv_add(ctx, v159, v162);
                                let v164 = constructor_rv_add(ctx, v163, v155);
                                let v165 = C::xreg_to_reg(ctx, v151);
                                let v166 = C::xreg_to_reg(ctx, v164);
                                let v167 = C::value_regs(ctx, v165, v166);
                                let v168 = C::output(ctx, v167);
                                // Rule at src/isa/riscv64/lower.isle line 100.
                                return Some(v168);
                            }
                            _ => {}
                        }
                        let v40 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v41) = v40 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v66,
                                    imm: v67,
                                } = v65
                                {
                                    if let &Opcode::Iconst = v66 {
                                        let v68 = C::u64_from_imm64(ctx, v67);
                                        let v69 = C::imm12_from_u64(ctx, v68);
                                        if let Some(v70) = v69 {
                                            let v59 = &constructor_select_addi(ctx, v41);
                                            let v71 = C::put_in_reg(ctx, v44.1);
                                            let v72 = constructor_alu_rr_imm12(ctx, v59, v71, v70);
                                            let v73 = constructor_output_reg(ctx, v72);
                                            // Rule at src/isa/riscv64/lower.isle line 48.
                                            return Some(v73);
                                        }
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v54,
                                    imm: v55,
                                } = v53
                                {
                                    if let &Opcode::Iconst = v54 {
                                        let v56 = C::u64_from_imm64(ctx, v55);
                                        let v57 = C::imm12_from_u64(ctx, v56);
                                        if let Some(v58) = v57 {
                                            let v59 = &constructor_select_addi(ctx, v41);
                                            let v60 = C::put_in_reg(ctx, v44.0);
                                            let v61 = constructor_alu_rr_imm12(ctx, v59, v60, v58);
                                            let v62 = constructor_output_reg(ctx, v61);
                                            // Rule at src/isa/riscv64/lower.isle line 45.
                                            return Some(v62);
                                        }
                                    }
                                }
                            }
                            let v47 = constructor_put_in_xreg(ctx, v44.0);
                            let v48 = constructor_put_in_xreg(ctx, v44.1);
                            let v49 = constructor_rv_add(ctx, v47, v48);
                            let v50 = constructor_output_xreg(ctx, v49);
                            // Rule at src/isa/riscv64/lower.isle line 41.
                            return Some(v50);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v190 = C::def_inst(ctx, v83);
                                        if let Some(v191) = v190 {
                                            let v192 = &C::inst_data(ctx, v191);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v193,
                                                imm: v194,
                                            } = v192
                                            {
                                                if let &Opcode::Iconst = v193 {
                                                    let v195 = C::u64_from_imm64(ctx, v194);
                                                    let v196 = C::imm5_from_u64(ctx, v195);
                                                    if let Some(v197) = v196 {
                                                        let v176 =
                                                            constructor_put_in_vreg(ctx, v44.1);
                                                        let v19 = &constructor_unmasked(ctx);
                                                        let v20 = C::vstate_from_type(ctx, v11);
                                                        let v233 = constructor_rv_vrsub_vi(
                                                            ctx, v176, v197, v19, v20,
                                                        );
                                                        let v234 =
                                                            constructor_output_vreg(ctx, v233);
                                                        // Rule at src/isa/riscv64/lower.isle line 156.
                                                        return Some(v234);
                                                    }
                                                }
                                            }
                                        }
                                        let v176 = constructor_put_in_vreg(ctx, v44.1);
                                        let v177 = constructor_put_in_xreg(ctx, v83);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v231 =
                                            constructor_rv_vrsub_vx(ctx, v176, v177, v19, v20);
                                        let v232 = constructor_output_vreg(ctx, v231);
                                        // Rule at src/isa/riscv64/lower.isle line 153.
                                        return Some(v232);
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v173 = constructor_put_in_xreg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v229 =
                                            constructor_rv_vsub_vx(ctx, v169, v173, v19, v20);
                                        let v230 = constructor_output_vreg(ctx, v229);
                                        // Rule at src/isa/riscv64/lower.isle line 150.
                                        return Some(v230);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v227 = constructor_rv_vsub_vv(ctx, v169, v170, v19, v20);
                            let v228 = constructor_output_vreg(ctx, v227);
                            // Rule at src/isa/riscv64/lower.isle line 147.
                            return Some(v228);
                        }
                        if v3 == I128 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v144 = C::put_in_regs(ctx, v44.0);
                            let v224 = C::put_in_regs(ctx, v44.1);
                            let v225 = constructor_i128_sub(ctx, v144, v224);
                            let v226 = C::output(ctx, v225);
                            // Rule at src/isa/riscv64/lower.isle line 143.
                            return Some(v226);
                        }
                        let v218 = C::fits_in_32(ctx, v3);
                        if let Some(v219) = v218 {
                            let v220 = C::ty_int(ctx, v219);
                            if let Some(v221) = v220 {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                let v48 = constructor_put_in_xreg(ctx, v44.1);
                                let v222 = constructor_rv_subw(ctx, v47, v48);
                                let v223 = constructor_output_xreg(ctx, v222);
                                // Rule at src/isa/riscv64/lower.isle line 140.
                                return Some(v223);
                            }
                        }
                        let v40 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v41) = v40 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v47 = constructor_put_in_xreg(ctx, v44.0);
                            let v48 = constructor_put_in_xreg(ctx, v44.1);
                            let v216 = constructor_rv_sub(ctx, v47, v48);
                            let v217 = constructor_output_xreg(ctx, v216);
                            // Rule at src/isa/riscv64/lower.isle line 137.
                            return Some(v217);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v266 = constructor_rv_vmul_vv(ctx, v169, v170, v19, v20);
                            let v267 = constructor_output_vreg(ctx, v266);
                            // Rule at src/isa/riscv64/lower.isle line 204.
                            return Some(v267);
                        }
                        if v3 == I128 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v144 = C::put_in_regs(ctx, v44.0);
                            let v146 = C::value_regs_get(ctx, v144, 0x0);
                            let v147 = C::xreg_new(ctx, v146);
                            let v249 = C::value_regs_get(ctx, v144, 0x1);
                            let v250 = C::xreg_new(ctx, v249);
                            let v251 = C::put_in_regs(ctx, v44.1);
                            let v252 = C::value_regs_get(ctx, v251, 0x0);
                            let v253 = C::xreg_new(ctx, v252);
                            let v254 = C::value_regs_get(ctx, v251, 0x1);
                            let v255 = C::xreg_new(ctx, v254);
                            let v256 = constructor_rv_mulhu(ctx, v147, v253);
                            let v257 = constructor_madd(ctx, v147, v255, v256);
                            let v258 = constructor_madd(ctx, v250, v253, v257);
                            let v259 = C::zero_reg(ctx);
                            let v260 = C::xreg_new(ctx, v259);
                            let v261 = constructor_madd(ctx, v147, v253, v260);
                            let v262 = C::xreg_to_reg(ctx, v261);
                            let v263 = C::xreg_to_reg(ctx, v258);
                            let v264 = C::value_regs(ctx, v262, v263);
                            let v265 = C::output(ctx, v264);
                            // Rule at src/isa/riscv64/lower.isle line 178.
                            return Some(v265);
                        }
                        let v218 = C::fits_in_32(ctx, v3);
                        if let Some(v219) = v218 {
                            let v220 = C::ty_int(ctx, v219);
                            if let Some(v221) = v220 {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                let v48 = constructor_put_in_xreg(ctx, v44.1);
                                let v247 = constructor_rv_mulw(ctx, v47, v48);
                                let v248 = constructor_output_xreg(ctx, v247);
                                // Rule at src/isa/riscv64/lower.isle line 174.
                                return Some(v248);
                            }
                        }
                        let v40 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v41) = v40 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v47 = constructor_put_in_xreg(ctx, v44.0);
                            let v48 = constructor_put_in_xreg(ctx, v44.1);
                            let v245 = constructor_rv_mul(ctx, v47, v48);
                            let v246 = constructor_output_xreg(ctx, v245);
                            // Rule at src/isa/riscv64/lower.isle line 171.
                            return Some(v246);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v280 = constructor_rv_vmulhu_vv(ctx, v169, v170, v19, v20);
                            let v281 = constructor_output_vreg(ctx, v280);
                            // Rule at src/isa/riscv64/lower.isle line 218.
                            return Some(v281);
                        }
                        let v40 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v41) = v40 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v47 = constructor_put_in_xreg(ctx, v44.0);
                            let v276 = constructor_zext(ctx, v47, v41, I64);
                            let v270 = constructor_put_in_xreg(ctx, v44.1);
                            let v277 = constructor_zext(ctx, v270, v41, I64);
                            let v278 = constructor_lower_umlhi(ctx, v41, v276, v277);
                            let v279 = constructor_output_xreg(ctx, v278);
                            // Rule at src/isa/riscv64/lower.isle line 215.
                            return Some(v279);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v274 = constructor_rv_vmulh_vv(ctx, v169, v170, v19, v20);
                            let v275 = constructor_output_vreg(ctx, v274);
                            // Rule at src/isa/riscv64/lower.isle line 211.
                            return Some(v275);
                        }
                        let v40 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v41) = v40 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v47 = constructor_put_in_xreg(ctx, v44.0);
                            let v269 = constructor_sext(ctx, v47, v41, I64);
                            let v270 = constructor_put_in_xreg(ctx, v44.1);
                            let v271 = constructor_sext(ctx, v270, v41, I64);
                            let v272 = constructor_lower_smlhi(ctx, v41, v269, v271);
                            let v273 = constructor_output_xreg(ctx, v272);
                            // Rule at src/isa/riscv64/lower.isle line 208.
                            return Some(v273);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v282 = constructor_put_in_xreg(ctx, v44.1);
                            let v302 = constructor_gen_div_by_zero(ctx, v282);
                            let v303 = constructor_put_in_xreg(ctx, v44.0);
                            let v296 = constructor_put_in_xreg(ctx, v44.1);
                            let v304 = constructor_rv_divu(ctx, v303, v296);
                            let v305 = constructor_output_xreg(ctx, v304);
                            // Rule at src/isa/riscv64/lower.isle line 243.
                            return Some(v305);
                        }
                        let v218 = C::fits_in_32(ctx, v3);
                        if let Some(v219) = v218 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v282 = constructor_put_in_xreg(ctx, v44.1);
                            let v283 = constructor_zext(ctx, v282, v219, I64);
                            let v284 = constructor_gen_div_by_zero(ctx, v283);
                            let v285 = constructor_put_in_xreg(ctx, v44.0);
                            let v286 = constructor_zext(ctx, v285, v219, I64);
                            let v287 = constructor_rv_divuw(ctx, v286, v283);
                            let v288 = constructor_output_xreg(ctx, v287);
                            // Rule at src/isa/riscv64/lower.isle line 223.
                            return Some(v288);
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v47 = constructor_put_in_xreg(ctx, v44.0);
                            let v48 = constructor_put_in_xreg(ctx, v44.1);
                            let v295 = constructor_gen_div_overflow(ctx, v47, v48, I64);
                            let v296 = constructor_put_in_xreg(ctx, v44.1);
                            let v297 = constructor_gen_div_by_zero(ctx, v296);
                            let v298 = constructor_put_in_xreg(ctx, v44.0);
                            let v299 = constructor_put_in_xreg(ctx, v44.1);
                            let v300 = constructor_rv_div(ctx, v298, v299);
                            let v301 = constructor_output_xreg(ctx, v300);
                            // Rule at src/isa/riscv64/lower.isle line 237.
                            return Some(v301);
                        }
                        let v218 = C::fits_in_32(ctx, v3);
                        if let Some(v219) = v218 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v47 = constructor_put_in_xreg(ctx, v44.0);
                            let v289 = constructor_sext(ctx, v47, v219, I64);
                            let v270 = constructor_put_in_xreg(ctx, v44.1);
                            let v290 = constructor_sext(ctx, v270, v219, I64);
                            let v291 = constructor_gen_div_overflow(ctx, v289, v290, v219);
                            let v292 = constructor_gen_div_by_zero(ctx, v290);
                            let v293 = constructor_rv_divw(ctx, v289, v290);
                            let v294 = constructor_output_xreg(ctx, v293);
                            // Rule at src/isa/riscv64/lower.isle line 229.
                            return Some(v294);
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v282 = constructor_put_in_xreg(ctx, v44.1);
                                let v323 = constructor_zext(ctx, v282, I32, I64);
                                let v324 = constructor_gen_div_by_zero(ctx, v323);
                                let v285 = constructor_put_in_xreg(ctx, v44.0);
                                let v325 = constructor_rv_remuw(ctx, v285, v323);
                                let v326 = constructor_output_xreg(ctx, v325);
                                // Rule at src/isa/riscv64/lower.isle line 268.
                                return Some(v326);
                            }
                            I64 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v282 = constructor_put_in_xreg(ctx, v44.1);
                                let v302 = constructor_gen_div_by_zero(ctx, v282);
                                let v303 = constructor_put_in_xreg(ctx, v44.0);
                                let v296 = constructor_put_in_xreg(ctx, v44.1);
                                let v329 = constructor_rv_remu(ctx, v303, v296);
                                let v330 = constructor_output_xreg(ctx, v329);
                                // Rule at src/isa/riscv64/lower.isle line 279.
                                return Some(v330);
                            }
                            _ => {}
                        }
                        let v306 = C::fits_in_16(ctx, v3);
                        if let Some(v307) = v306 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v282 = constructor_put_in_xreg(ctx, v44.1);
                            let v308 = constructor_zext(ctx, v282, v307, I64);
                            let v309 = constructor_gen_div_by_zero(ctx, v308);
                            let v285 = constructor_put_in_xreg(ctx, v44.0);
                            let v310 = constructor_zext(ctx, v285, v307, I64);
                            let v311 = constructor_rv_remuw(ctx, v310, v308);
                            let v312 = constructor_output_xreg(ctx, v311);
                            // Rule at src/isa/riscv64/lower.isle line 250.
                            return Some(v312);
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v282 = constructor_put_in_xreg(ctx, v44.1);
                                let v319 = constructor_sext(ctx, v282, I32, I64);
                                let v320 = constructor_gen_div_by_zero(ctx, v319);
                                let v285 = constructor_put_in_xreg(ctx, v44.0);
                                let v321 = constructor_rv_remw(ctx, v285, v319);
                                let v322 = constructor_output_xreg(ctx, v321);
                                // Rule at src/isa/riscv64/lower.isle line 262.
                                return Some(v322);
                            }
                            I64 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v282 = constructor_put_in_xreg(ctx, v44.1);
                                let v302 = constructor_gen_div_by_zero(ctx, v282);
                                let v303 = constructor_put_in_xreg(ctx, v44.0);
                                let v296 = constructor_put_in_xreg(ctx, v44.1);
                                let v327 = constructor_rv_rem(ctx, v303, v296);
                                let v328 = constructor_output_xreg(ctx, v327);
                                // Rule at src/isa/riscv64/lower.isle line 274.
                                return Some(v328);
                            }
                            _ => {}
                        }
                        let v306 = C::fits_in_16(ctx, v3);
                        if let Some(v307) = v306 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v282 = constructor_put_in_xreg(ctx, v44.1);
                            let v313 = constructor_sext(ctx, v282, v307, I64);
                            let v314 = constructor_gen_div_by_zero(ctx, v313);
                            let v285 = constructor_put_in_xreg(ctx, v44.0);
                            let v315 = constructor_sext(ctx, v285, v307, I64);
                            let v316 = constructor_rv_remw(ctx, v315, v313);
                            let v317 = constructor_output_xreg(ctx, v316);
                            // Rule at src/isa/riscv64/lower.isle line 256.
                            return Some(v317);
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v190 = C::def_inst(ctx, v83);
                                        if let Some(v191) = v190 {
                                            let v192 = &C::inst_data(ctx, v191);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v193,
                                                imm: v194,
                                            } = v192
                                            {
                                                if let &Opcode::Iconst = v193 {
                                                    let v195 = C::u64_from_imm64(ctx, v194);
                                                    let v196 = C::imm5_from_u64(ctx, v195);
                                                    if let Some(v197) = v196 {
                                                        let v176 =
                                                            constructor_put_in_vreg(ctx, v44.1);
                                                        let v19 = &constructor_unmasked(ctx);
                                                        let v20 = C::vstate_from_type(ctx, v11);
                                                        let v393 = constructor_rv_vand_vi(
                                                            ctx, v176, v197, v19, v20,
                                                        );
                                                        let v394 =
                                                            constructor_output_vreg(ctx, v393);
                                                        // Rule at src/isa/riscv64/lower.isle line 336.
                                                        return Some(v394);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v180 = C::def_inst(ctx, v75);
                                        if let Some(v181) = v180 {
                                            let v182 = &C::inst_data(ctx, v181);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v183,
                                                imm: v184,
                                            } = v182
                                            {
                                                if let &Opcode::Iconst = v183 {
                                                    let v185 = C::u64_from_imm64(ctx, v184);
                                                    let v186 = C::imm5_from_u64(ctx, v185);
                                                    if let Some(v187) = v186 {
                                                        let v169 =
                                                            constructor_put_in_vreg(ctx, v44.0);
                                                        let v19 = &constructor_unmasked(ctx);
                                                        let v20 = C::vstate_from_type(ctx, v11);
                                                        let v391 = constructor_rv_vand_vi(
                                                            ctx, v169, v187, v19, v20,
                                                        );
                                                        let v392 =
                                                            constructor_output_vreg(ctx, v391);
                                                        // Rule at src/isa/riscv64/lower.isle line 333.
                                                        return Some(v392);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v385 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v386) = v385 {
                                if let Some(v64) = v63 {
                                    let v65 = &C::inst_data(ctx, v64);
                                    if let &InstructionData::Unary {
                                        opcode: ref v82,
                                        arg: v83,
                                    } = v65
                                    {
                                        if let &Opcode::Splat = v82 {
                                            let v176 = constructor_put_in_vreg(ctx, v44.1);
                                            let v177 = constructor_put_in_xreg(ctx, v83);
                                            let v19 = &constructor_unmasked(ctx);
                                            let v20 = C::vstate_from_type(ctx, v11);
                                            let v389 =
                                                constructor_rv_vand_vx(ctx, v176, v177, v19, v20);
                                            let v390 = constructor_output_vreg(ctx, v389);
                                            // Rule at src/isa/riscv64/lower.isle line 329.
                                            return Some(v390);
                                        }
                                    }
                                }
                                if let Some(v52) = v51 {
                                    let v53 = &C::inst_data(ctx, v52);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v53
                                    {
                                        if let &Opcode::Splat = v74 {
                                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                                            let v173 = constructor_put_in_xreg(ctx, v75);
                                            let v19 = &constructor_unmasked(ctx);
                                            let v20 = C::vstate_from_type(ctx, v11);
                                            let v387 =
                                                constructor_rv_vand_vx(ctx, v169, v173, v19, v20);
                                            let v388 = constructor_output_vreg(ctx, v387);
                                            // Rule at src/isa/riscv64/lower.isle line 325.
                                            return Some(v388);
                                        }
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v383 = constructor_rv_vand_vv(ctx, v169, v170, v19, v20);
                            let v384 = constructor_output_vreg(ctx, v383);
                            // Rule at src/isa/riscv64/lower.isle line 322.
                            return Some(v384);
                        }
                        let v346 = C::has_zbb(ctx);
                        if v346 == true {
                            if v3 == I128 {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v63 = C::def_inst(ctx, v44.0);
                                if let Some(v64) = v63 {
                                    let v65 = &C::inst_data(ctx, v64);
                                    if let &InstructionData::Unary {
                                        opcode: ref v82,
                                        arg: v83,
                                    } = v65
                                    {
                                        if let &Opcode::Bnot = v82 {
                                            let v366 = C::put_in_regs(ctx, v44.1);
                                            let v367 = C::value_regs_get(ctx, v366, 0x0);
                                            let v368 = C::xreg_new(ctx, v367);
                                            let v369 = C::put_in_regs(ctx, v83);
                                            let v370 = C::value_regs_get(ctx, v369, 0x0);
                                            let v371 = C::xreg_new(ctx, v370);
                                            let v372 = constructor_rv_andn(ctx, v368, v371);
                                            let v152 = C::put_in_regs(ctx, v44.1);
                                            let v373 = C::value_regs_get(ctx, v152, 0x1);
                                            let v374 = C::xreg_new(ctx, v373);
                                            let v375 = C::put_in_regs(ctx, v83);
                                            let v376 = C::value_regs_get(ctx, v375, 0x1);
                                            let v377 = C::xreg_new(ctx, v376);
                                            let v378 = constructor_rv_andn(ctx, v374, v377);
                                            let v379 = C::xreg_to_reg(ctx, v372);
                                            let v380 = C::xreg_to_reg(ctx, v378);
                                            let v381 = C::value_regs(ctx, v379, v380);
                                            let v382 = C::output(ctx, v381);
                                            // Rule at src/isa/riscv64/lower.isle line 316.
                                            return Some(v382);
                                        }
                                    }
                                }
                                let v51 = C::def_inst(ctx, v44.1);
                                if let Some(v52) = v51 {
                                    let v53 = &C::inst_data(ctx, v52);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v53
                                    {
                                        if let &Opcode::Bnot = v74 {
                                            let v144 = C::put_in_regs(ctx, v44.0);
                                            let v146 = C::value_regs_get(ctx, v144, 0x0);
                                            let v147 = C::xreg_new(ctx, v146);
                                            let v351 = C::put_in_regs(ctx, v75);
                                            let v352 = C::value_regs_get(ctx, v351, 0x0);
                                            let v353 = C::xreg_new(ctx, v352);
                                            let v354 = constructor_rv_andn(ctx, v147, v353);
                                            let v355 = C::put_in_regs(ctx, v44.0);
                                            let v356 = C::value_regs_get(ctx, v355, 0x1);
                                            let v357 = C::xreg_new(ctx, v356);
                                            let v358 = C::put_in_regs(ctx, v75);
                                            let v359 = C::value_regs_get(ctx, v358, 0x1);
                                            let v360 = C::xreg_new(ctx, v359);
                                            let v361 = constructor_rv_andn(ctx, v357, v360);
                                            let v362 = C::xreg_to_reg(ctx, v354);
                                            let v363 = C::xreg_to_reg(ctx, v361);
                                            let v364 = C::value_regs(ctx, v362, v363);
                                            let v365 = C::output(ctx, v364);
                                            // Rule at src/isa/riscv64/lower.isle line 310.
                                            return Some(v365);
                                        }
                                    }
                                }
                            }
                            let v200 = C::fits_in_64(ctx, v3);
                            if let Some(v201) = v200 {
                                let v333 = C::ty_int(ctx, v201);
                                if let Some(v334) = v333 {
                                    let v44 = C::unpack_value_array_2(ctx, v43);
                                    let v63 = C::def_inst(ctx, v44.0);
                                    if let Some(v64) = v63 {
                                        let v65 = &C::inst_data(ctx, v64);
                                        if let &InstructionData::Unary {
                                            opcode: ref v82,
                                            arg: v83,
                                        } = v65
                                        {
                                            if let &Opcode::Bnot = v82 {
                                                let v282 = constructor_put_in_xreg(ctx, v44.1);
                                                let v177 = constructor_put_in_xreg(ctx, v83);
                                                let v349 = constructor_rv_andn(ctx, v282, v177);
                                                let v350 = constructor_output_xreg(ctx, v349);
                                                // Rule at src/isa/riscv64/lower.isle line 306.
                                                return Some(v350);
                                            }
                                        }
                                    }
                                    let v51 = C::def_inst(ctx, v44.1);
                                    if let Some(v52) = v51 {
                                        let v53 = &C::inst_data(ctx, v52);
                                        if let &InstructionData::Unary {
                                            opcode: ref v74,
                                            arg: v75,
                                        } = v53
                                        {
                                            if let &Opcode::Bnot = v74 {
                                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                                let v173 = constructor_put_in_xreg(ctx, v75);
                                                let v347 = constructor_rv_andn(ctx, v47, v173);
                                                let v348 = constructor_output_xreg(ctx, v347);
                                                // Rule at src/isa/riscv64/lower.isle line 302.
                                                return Some(v348);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v339 = C::ty_scalar_float(ctx, v3);
                        if let Some(v340) = v339 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v342 = constructor_put_in_freg(ctx, v44.0);
                            let v343 = constructor_put_in_freg(ctx, v44.1);
                            let v344 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::And,
                                v342,
                                v343,
                                v340,
                            );
                            let v345 = constructor_output_freg(ctx, v344);
                            // Rule at src/isa/riscv64/lower.isle line 295.
                            return Some(v345);
                        }
                        let v200 = C::fits_in_64(ctx, v3);
                        if let Some(v201) = v200 {
                            let v333 = C::ty_int(ctx, v201);
                            if let Some(v334) = v333 {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v63 = C::def_inst(ctx, v44.0);
                                if let Some(v64) = v63 {
                                    let v65 = &C::inst_data(ctx, v64);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v66,
                                        imm: v67,
                                    } = v65
                                    {
                                        if let &Opcode::Iconst = v66 {
                                            let v68 = C::u64_from_imm64(ctx, v67);
                                            let v69 = C::imm12_from_u64(ctx, v68);
                                            if let Some(v70) = v69 {
                                                let v282 = constructor_put_in_xreg(ctx, v44.1);
                                                let v337 = constructor_rv_andi(ctx, v282, v70);
                                                let v338 = constructor_output_xreg(ctx, v337);
                                                // Rule at src/isa/riscv64/lower.isle line 292.
                                                return Some(v338);
                                            }
                                        }
                                    }
                                }
                                let v51 = C::def_inst(ctx, v44.1);
                                if let Some(v52) = v51 {
                                    let v53 = &C::inst_data(ctx, v52);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v54,
                                        imm: v55,
                                    } = v53
                                    {
                                        if let &Opcode::Iconst = v54 {
                                            let v56 = C::u64_from_imm64(ctx, v55);
                                            let v57 = C::imm12_from_u64(ctx, v56);
                                            if let Some(v58) = v57 {
                                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                                let v335 = constructor_rv_andi(ctx, v47, v58);
                                                let v336 = constructor_output_xreg(ctx, v335);
                                                // Rule at src/isa/riscv64/lower.isle line 289.
                                                return Some(v336);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v235 = C::ty_int(ctx, v3);
                        if let Some(v236) = v235 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v144 = C::put_in_regs(ctx, v44.0);
                            let v224 = C::put_in_regs(ctx, v44.1);
                            let v331 = constructor_gen_and(ctx, v236, v144, v224);
                            let v332 = C::output(ctx, v331);
                            // Rule at src/isa/riscv64/lower.isle line 285.
                            return Some(v332);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v190 = C::def_inst(ctx, v83);
                                        if let Some(v191) = v190 {
                                            let v192 = &C::inst_data(ctx, v191);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v193,
                                                imm: v194,
                                            } = v192
                                            {
                                                if let &Opcode::Iconst = v193 {
                                                    let v195 = C::u64_from_imm64(ctx, v194);
                                                    let v196 = C::imm5_from_u64(ctx, v195);
                                                    if let Some(v197) = v196 {
                                                        let v176 =
                                                            constructor_put_in_vreg(ctx, v44.1);
                                                        let v19 = &constructor_unmasked(ctx);
                                                        let v20 = C::vstate_from_type(ctx, v11);
                                                        let v428 = constructor_rv_vor_vi(
                                                            ctx, v176, v197, v19, v20,
                                                        );
                                                        let v429 =
                                                            constructor_output_vreg(ctx, v428);
                                                        // Rule at src/isa/riscv64/lower.isle line 392.
                                                        return Some(v429);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v180 = C::def_inst(ctx, v75);
                                        if let Some(v181) = v180 {
                                            let v182 = &C::inst_data(ctx, v181);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v183,
                                                imm: v184,
                                            } = v182
                                            {
                                                if let &Opcode::Iconst = v183 {
                                                    let v185 = C::u64_from_imm64(ctx, v184);
                                                    let v186 = C::imm5_from_u64(ctx, v185);
                                                    if let Some(v187) = v186 {
                                                        let v169 =
                                                            constructor_put_in_vreg(ctx, v44.0);
                                                        let v19 = &constructor_unmasked(ctx);
                                                        let v20 = C::vstate_from_type(ctx, v11);
                                                        let v426 = constructor_rv_vor_vi(
                                                            ctx, v169, v187, v19, v20,
                                                        );
                                                        let v427 =
                                                            constructor_output_vreg(ctx, v426);
                                                        // Rule at src/isa/riscv64/lower.isle line 389.
                                                        return Some(v427);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v385 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v386) = v385 {
                                if let Some(v64) = v63 {
                                    let v65 = &C::inst_data(ctx, v64);
                                    if let &InstructionData::Unary {
                                        opcode: ref v82,
                                        arg: v83,
                                    } = v65
                                    {
                                        if let &Opcode::Splat = v82 {
                                            let v176 = constructor_put_in_vreg(ctx, v44.1);
                                            let v177 = constructor_put_in_xreg(ctx, v83);
                                            let v19 = &constructor_unmasked(ctx);
                                            let v20 = C::vstate_from_type(ctx, v11);
                                            let v424 =
                                                constructor_rv_vor_vx(ctx, v176, v177, v19, v20);
                                            let v425 = constructor_output_vreg(ctx, v424);
                                            // Rule at src/isa/riscv64/lower.isle line 385.
                                            return Some(v425);
                                        }
                                    }
                                }
                                if let Some(v52) = v51 {
                                    let v53 = &C::inst_data(ctx, v52);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v53
                                    {
                                        if let &Opcode::Splat = v74 {
                                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                                            let v173 = constructor_put_in_xreg(ctx, v75);
                                            let v19 = &constructor_unmasked(ctx);
                                            let v20 = C::vstate_from_type(ctx, v11);
                                            let v422 =
                                                constructor_rv_vor_vx(ctx, v169, v173, v19, v20);
                                            let v423 = constructor_output_vreg(ctx, v422);
                                            // Rule at src/isa/riscv64/lower.isle line 381.
                                            return Some(v423);
                                        }
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v420 = constructor_rv_vor_vv(ctx, v169, v170, v19, v20);
                            let v421 = constructor_output_vreg(ctx, v420);
                            // Rule at src/isa/riscv64/lower.isle line 378.
                            return Some(v421);
                        }
                        let v346 = C::has_zbb(ctx);
                        if v346 == true {
                            if v3 == I128 {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v63 = C::def_inst(ctx, v44.0);
                                if let Some(v64) = v63 {
                                    let v65 = &C::inst_data(ctx, v64);
                                    if let &InstructionData::Unary {
                                        opcode: ref v82,
                                        arg: v83,
                                    } = v65
                                    {
                                        if let &Opcode::Bnot = v82 {
                                            let v366 = C::put_in_regs(ctx, v44.1);
                                            let v367 = C::value_regs_get(ctx, v366, 0x0);
                                            let v368 = C::xreg_new(ctx, v367);
                                            let v369 = C::put_in_regs(ctx, v83);
                                            let v370 = C::value_regs_get(ctx, v369, 0x0);
                                            let v371 = C::xreg_new(ctx, v370);
                                            let v414 = constructor_rv_orn(ctx, v368, v371);
                                            let v152 = C::put_in_regs(ctx, v44.1);
                                            let v373 = C::value_regs_get(ctx, v152, 0x1);
                                            let v374 = C::xreg_new(ctx, v373);
                                            let v375 = C::put_in_regs(ctx, v83);
                                            let v376 = C::value_regs_get(ctx, v375, 0x1);
                                            let v377 = C::xreg_new(ctx, v376);
                                            let v415 = constructor_rv_orn(ctx, v374, v377);
                                            let v416 = C::xreg_to_reg(ctx, v414);
                                            let v417 = C::xreg_to_reg(ctx, v415);
                                            let v418 = C::value_regs(ctx, v416, v417);
                                            let v419 = C::output(ctx, v418);
                                            // Rule at src/isa/riscv64/lower.isle line 372.
                                            return Some(v419);
                                        }
                                    }
                                }
                                let v51 = C::def_inst(ctx, v44.1);
                                if let Some(v52) = v51 {
                                    let v53 = &C::inst_data(ctx, v52);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v53
                                    {
                                        if let &Opcode::Bnot = v74 {
                                            let v144 = C::put_in_regs(ctx, v44.0);
                                            let v146 = C::value_regs_get(ctx, v144, 0x0);
                                            let v147 = C::xreg_new(ctx, v146);
                                            let v351 = C::put_in_regs(ctx, v75);
                                            let v352 = C::value_regs_get(ctx, v351, 0x0);
                                            let v353 = C::xreg_new(ctx, v352);
                                            let v408 = constructor_rv_orn(ctx, v147, v353);
                                            let v355 = C::put_in_regs(ctx, v44.0);
                                            let v356 = C::value_regs_get(ctx, v355, 0x1);
                                            let v357 = C::xreg_new(ctx, v356);
                                            let v358 = C::put_in_regs(ctx, v75);
                                            let v359 = C::value_regs_get(ctx, v358, 0x1);
                                            let v360 = C::xreg_new(ctx, v359);
                                            let v409 = constructor_rv_orn(ctx, v357, v360);
                                            let v410 = C::xreg_to_reg(ctx, v408);
                                            let v411 = C::xreg_to_reg(ctx, v409);
                                            let v412 = C::value_regs(ctx, v410, v411);
                                            let v413 = C::output(ctx, v412);
                                            // Rule at src/isa/riscv64/lower.isle line 366.
                                            return Some(v413);
                                        }
                                    }
                                }
                            }
                            let v200 = C::fits_in_64(ctx, v3);
                            if let Some(v201) = v200 {
                                let v333 = C::ty_int(ctx, v201);
                                if let Some(v334) = v333 {
                                    let v44 = C::unpack_value_array_2(ctx, v43);
                                    let v63 = C::def_inst(ctx, v44.0);
                                    if let Some(v64) = v63 {
                                        let v65 = &C::inst_data(ctx, v64);
                                        if let &InstructionData::Unary {
                                            opcode: ref v82,
                                            arg: v83,
                                        } = v65
                                        {
                                            if let &Opcode::Bnot = v82 {
                                                let v282 = constructor_put_in_xreg(ctx, v44.1);
                                                let v177 = constructor_put_in_xreg(ctx, v83);
                                                let v406 = constructor_rv_orn(ctx, v282, v177);
                                                let v407 = constructor_output_xreg(ctx, v406);
                                                // Rule at src/isa/riscv64/lower.isle line 362.
                                                return Some(v407);
                                            }
                                        }
                                    }
                                    let v51 = C::def_inst(ctx, v44.1);
                                    if let Some(v52) = v51 {
                                        let v53 = &C::inst_data(ctx, v52);
                                        if let &InstructionData::Unary {
                                            opcode: ref v74,
                                            arg: v75,
                                        } = v53
                                        {
                                            if let &Opcode::Bnot = v74 {
                                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                                let v173 = constructor_put_in_xreg(ctx, v75);
                                                let v404 = constructor_rv_orn(ctx, v47, v173);
                                                let v405 = constructor_output_xreg(ctx, v404);
                                                // Rule at src/isa/riscv64/lower.isle line 358.
                                                return Some(v405);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v339 = C::ty_scalar_float(ctx, v3);
                        if let Some(v340) = v339 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v342 = constructor_put_in_freg(ctx, v44.0);
                            let v343 = constructor_put_in_freg(ctx, v44.1);
                            let v402 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Or,
                                v342,
                                v343,
                                v340,
                            );
                            let v403 = constructor_output_freg(ctx, v402);
                            // Rule at src/isa/riscv64/lower.isle line 351.
                            return Some(v403);
                        }
                        let v200 = C::fits_in_64(ctx, v3);
                        if let Some(v201) = v200 {
                            let v333 = C::ty_int(ctx, v201);
                            if let Some(v334) = v333 {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v63 = C::def_inst(ctx, v44.0);
                                if let Some(v64) = v63 {
                                    let v65 = &C::inst_data(ctx, v64);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v66,
                                        imm: v67,
                                    } = v65
                                    {
                                        if let &Opcode::Iconst = v66 {
                                            let v68 = C::u64_from_imm64(ctx, v67);
                                            let v69 = C::imm12_from_u64(ctx, v68);
                                            if let Some(v70) = v69 {
                                                let v282 = constructor_put_in_xreg(ctx, v44.1);
                                                let v399 = constructor_rv_ori(ctx, v282, v70);
                                                let v400 = constructor_output_xreg(ctx, v399);
                                                // Rule at src/isa/riscv64/lower.isle line 348.
                                                return Some(v400);
                                            }
                                        }
                                    }
                                }
                                let v51 = C::def_inst(ctx, v44.1);
                                if let Some(v52) = v51 {
                                    let v53 = &C::inst_data(ctx, v52);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v54,
                                        imm: v55,
                                    } = v53
                                    {
                                        if let &Opcode::Iconst = v54 {
                                            let v56 = C::u64_from_imm64(ctx, v55);
                                            let v57 = C::imm12_from_u64(ctx, v56);
                                            if let Some(v58) = v57 {
                                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                                let v397 = constructor_rv_ori(ctx, v47, v58);
                                                let v398 = constructor_output_xreg(ctx, v397);
                                                // Rule at src/isa/riscv64/lower.isle line 345.
                                                return Some(v398);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v235 = C::ty_int(ctx, v3);
                        if let Some(v236) = v235 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v144 = C::put_in_regs(ctx, v44.0);
                            let v224 = C::put_in_regs(ctx, v44.1);
                            let v395 = constructor_gen_or(ctx, v236, v144, v224);
                            let v396 = C::output(ctx, v395);
                            // Rule at src/isa/riscv64/lower.isle line 341.
                            return Some(v396);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v190 = C::def_inst(ctx, v83);
                                        if let Some(v191) = v190 {
                                            let v192 = &C::inst_data(ctx, v191);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v193,
                                                imm: v194,
                                            } = v192
                                            {
                                                if let &Opcode::Iconst = v193 {
                                                    let v195 = C::u64_from_imm64(ctx, v194);
                                                    let v196 = C::imm5_from_u64(ctx, v195);
                                                    if let Some(v197) = v196 {
                                                        let v176 =
                                                            constructor_put_in_vreg(ctx, v44.1);
                                                        let v19 = &constructor_unmasked(ctx);
                                                        let v20 = C::vstate_from_type(ctx, v11);
                                                        let v449 = constructor_rv_vxor_vi(
                                                            ctx, v176, v197, v19, v20,
                                                        );
                                                        let v450 =
                                                            constructor_output_vreg(ctx, v449);
                                                        // Rule at src/isa/riscv64/lower.isle line 427.
                                                        return Some(v450);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v180 = C::def_inst(ctx, v75);
                                        if let Some(v181) = v180 {
                                            let v182 = &C::inst_data(ctx, v181);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v183,
                                                imm: v184,
                                            } = v182
                                            {
                                                if let &Opcode::Iconst = v183 {
                                                    let v185 = C::u64_from_imm64(ctx, v184);
                                                    let v186 = C::imm5_from_u64(ctx, v185);
                                                    if let Some(v187) = v186 {
                                                        let v169 =
                                                            constructor_put_in_vreg(ctx, v44.0);
                                                        let v19 = &constructor_unmasked(ctx);
                                                        let v20 = C::vstate_from_type(ctx, v11);
                                                        let v447 = constructor_rv_vxor_vi(
                                                            ctx, v169, v187, v19, v20,
                                                        );
                                                        let v448 =
                                                            constructor_output_vreg(ctx, v447);
                                                        // Rule at src/isa/riscv64/lower.isle line 424.
                                                        return Some(v448);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v385 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v386) = v385 {
                                if let Some(v64) = v63 {
                                    let v65 = &C::inst_data(ctx, v64);
                                    if let &InstructionData::Unary {
                                        opcode: ref v82,
                                        arg: v83,
                                    } = v65
                                    {
                                        if let &Opcode::Splat = v82 {
                                            let v176 = constructor_put_in_vreg(ctx, v44.1);
                                            let v177 = constructor_put_in_xreg(ctx, v83);
                                            let v19 = &constructor_unmasked(ctx);
                                            let v20 = C::vstate_from_type(ctx, v11);
                                            let v445 =
                                                constructor_rv_vxor_vx(ctx, v176, v177, v19, v20);
                                            let v446 = constructor_output_vreg(ctx, v445);
                                            // Rule at src/isa/riscv64/lower.isle line 420.
                                            return Some(v446);
                                        }
                                    }
                                }
                                if let Some(v52) = v51 {
                                    let v53 = &C::inst_data(ctx, v52);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v53
                                    {
                                        if let &Opcode::Splat = v74 {
                                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                                            let v173 = constructor_put_in_xreg(ctx, v75);
                                            let v19 = &constructor_unmasked(ctx);
                                            let v20 = C::vstate_from_type(ctx, v11);
                                            let v443 =
                                                constructor_rv_vxor_vx(ctx, v169, v173, v19, v20);
                                            let v444 = constructor_output_vreg(ctx, v443);
                                            // Rule at src/isa/riscv64/lower.isle line 416.
                                            return Some(v444);
                                        }
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v441 = constructor_rv_vxor_vv(ctx, v169, v170, v19, v20);
                            let v442 = constructor_output_vreg(ctx, v441);
                            // Rule at src/isa/riscv64/lower.isle line 413.
                            return Some(v442);
                        }
                        let v339 = C::ty_scalar_float(ctx, v3);
                        if let Some(v340) = v339 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v342 = constructor_put_in_freg(ctx, v44.0);
                            let v343 = constructor_put_in_freg(ctx, v44.1);
                            let v439 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Xor,
                                v342,
                                v343,
                                v340,
                            );
                            let v440 = constructor_output_freg(ctx, v439);
                            // Rule at src/isa/riscv64/lower.isle line 410.
                            return Some(v440);
                        }
                        if v3 == I128 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v144 = C::put_in_regs(ctx, v44.0);
                            let v224 = C::put_in_regs(ctx, v44.1);
                            let v437 =
                                constructor_lower_b128_binary(ctx, &AluOPRRR::Xor, v144, v224);
                            let v438 = C::output(ctx, v437);
                            // Rule at src/isa/riscv64/lower.isle line 407.
                            return Some(v438);
                        }
                        let v200 = C::fits_in_64(ctx, v3);
                        if let Some(v201) = v200 {
                            let v333 = C::ty_int(ctx, v201);
                            if let Some(v334) = v333 {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v63 = C::def_inst(ctx, v44.0);
                                if let Some(v64) = v63 {
                                    let v65 = &C::inst_data(ctx, v64);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v66,
                                        imm: v67,
                                    } = v65
                                    {
                                        if let &Opcode::Iconst = v66 {
                                            let v68 = C::u64_from_imm64(ctx, v67);
                                            let v69 = C::imm12_from_u64(ctx, v68);
                                            if let Some(v70) = v69 {
                                                let v282 = constructor_put_in_xreg(ctx, v44.1);
                                                let v434 = constructor_rv_xori(ctx, v282, v70);
                                                let v435 = constructor_output_xreg(ctx, v434);
                                                // Rule at src/isa/riscv64/lower.isle line 404.
                                                return Some(v435);
                                            }
                                        }
                                    }
                                }
                                let v51 = C::def_inst(ctx, v44.1);
                                if let Some(v52) = v51 {
                                    let v53 = &C::inst_data(ctx, v52);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v54,
                                        imm: v55,
                                    } = v53
                                    {
                                        if let &Opcode::Iconst = v54 {
                                            let v56 = C::u64_from_imm64(ctx, v55);
                                            let v57 = C::imm12_from_u64(ctx, v56);
                                            if let Some(v58) = v57 {
                                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                                let v432 = constructor_rv_xori(ctx, v47, v58);
                                                let v433 = constructor_output_xreg(ctx, v432);
                                                // Rule at src/isa/riscv64/lower.isle line 401.
                                                return Some(v433);
                                            }
                                        }
                                    }
                                }
                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                let v48 = constructor_put_in_xreg(ctx, v44.1);
                                let v430 = constructor_rv_xor(ctx, v47, v48);
                                let v431 = constructor_output_xreg(ctx, v430);
                                // Rule at src/isa/riscv64/lower.isle line 397.
                                return Some(v431);
                            }
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v144 = C::put_in_regs(ctx, v44.0);
                            let v224 = C::put_in_regs(ctx, v44.1);
                            let v731 = constructor_lower_i128_rotl(ctx, v144, v224);
                            let v732 = C::output(ctx, v731);
                            // Rule at src/isa/riscv64/lower.isle line 693.
                            return Some(v732);
                        }
                        let v200 = C::fits_in_64(ctx, v3);
                        if let Some(v201) = v200 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v47 = constructor_put_in_xreg(ctx, v44.0);
                            let v728 = constructor_zext(ctx, v47, v201, I64);
                            let v638 = C::put_in_regs(ctx, v44.1);
                            let v639 = C::value_regs_get(ctx, v638, 0x0);
                            let v640 = C::xreg_new(ctx, v639);
                            let v729 = constructor_lower_rotl(ctx, v201, v728, v640);
                            let v730 = constructor_output_xreg(ctx, v729);
                            // Rule at src/isa/riscv64/lower.isle line 690.
                            return Some(v730);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v144 = C::put_in_regs(ctx, v44.0);
                            let v224 = C::put_in_regs(ctx, v44.1);
                            let v735 = constructor_lower_i128_rotr(ctx, v144, v224);
                            let v736 = C::output(ctx, v735);
                            // Rule at src/isa/riscv64/lower.isle line 700.
                            return Some(v736);
                        }
                        let v200 = C::fits_in_64(ctx, v3);
                        if let Some(v201) = v200 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v47 = constructor_put_in_xreg(ctx, v44.0);
                            let v728 = constructor_zext(ctx, v47, v201, I64);
                            let v638 = C::put_in_regs(ctx, v44.1);
                            let v639 = C::value_regs_get(ctx, v638, 0x0);
                            let v640 = C::xreg_new(ctx, v639);
                            let v733 = constructor_lower_rotr(ctx, v201, v728, v640);
                            let v734 = constructor_output_xreg(ctx, v733);
                            // Rule at src/isa/riscv64/lower.isle line 697.
                            return Some(v734);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v563 = C::maybe_uextend(ctx, v44.1);
                            if let Some(v564) = v563 {
                                let v565 = C::def_inst(ctx, v564);
                                if let Some(v566) = v565 {
                                    let v567 = &C::inst_data(ctx, v566);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v568,
                                        imm: v569,
                                    } = v567
                                    {
                                        if let &Opcode::Iconst = v568 {
                                            let v570 = C::u64_from_imm64(ctx, v569);
                                            let v628 = C::uimm5_from_u64(ctx, v570);
                                            if let Some(v629) = v628 {
                                                let v169 = constructor_put_in_vreg(ctx, v44.0);
                                                let v19 = &constructor_unmasked(ctx);
                                                let v20 = C::vstate_from_type(ctx, v11);
                                                let v630 = constructor_rv_vsll_vi(
                                                    ctx, v169, v629, v19, v20,
                                                );
                                                let v631 = constructor_output_vreg(ctx, v630);
                                                // Rule at src/isa/riscv64/lower.isle line 572.
                                                return Some(v631);
                                            }
                                        }
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v224 = C::put_in_regs(ctx, v44.1);
                            let v552 = C::value_regs_get(ctx, v224, 0x0);
                            let v553 = C::xreg_new(ctx, v552);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v626 = constructor_rv_vsll_vx(ctx, v169, v553, v19, v20);
                            let v627 = constructor_output_vreg(ctx, v626);
                            // Rule at src/isa/riscv64/lower.isle line 569.
                            return Some(v627);
                        }
                        match v3 {
                            I64 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v563 = C::maybe_uextend(ctx, v44.1);
                                if let Some(v564) = v563 {
                                    let v565 = C::def_inst(ctx, v564);
                                    if let Some(v566) = v565 {
                                        let v567 = &C::inst_data(ctx, v566);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v568,
                                            imm: v569,
                                        } = v567
                                        {
                                            if let &Opcode::Iconst = v568 {
                                                let v570 = C::u64_from_imm64(ctx, v569);
                                                let v571 = C::imm12_from_u64(ctx, v570);
                                                if let Some(v572) = v571 {
                                                    let v63 = C::def_inst(ctx, v44.0);
                                                    if let Some(v64) = v63 {
                                                        let v65 = &C::inst_data(ctx, v64);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v82,
                                                            arg: v83,
                                                        } = v65
                                                        {
                                                            if let &Opcode::Uextend = v82 {
                                                                let v77 = C::has_zba(ctx);
                                                                if v77 == true {
                                                                    let v84 =
                                                                        C::value_type(ctx, v83);
                                                                    if v84 == I32 {
                                                                        let v85 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v83,
                                                                            );
                                                                        let v581 =
                                                                            constructor_rv_slliuw(
                                                                                ctx, v85, v572,
                                                                            );
                                                                        let v582 =
                                                                            constructor_output_xreg(
                                                                                ctx, v581,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 542.
                                                                        return Some(v582);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v47 = constructor_put_in_xreg(ctx, v44.0);
                                                    let v577 = constructor_shift_mask(ctx, v3);
                                                    let v578 = C::imm12_and(ctx, v572, v577);
                                                    let v579 = constructor_rv_slli(ctx, v47, v578);
                                                    let v580 = constructor_output_xreg(ctx, v579);
                                                    // Rule at src/isa/riscv64/lower.isle line 538.
                                                    return Some(v580);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v366 = C::put_in_regs(ctx, v44.1);
                                let v367 = C::value_regs_get(ctx, v366, 0x0);
                                let v368 = C::xreg_new(ctx, v367);
                                let v584 = C::gen_shamt(ctx, I128, v368);
                                let v585 = C::value_regs_get(ctx, v584, 0x0);
                                let v586 = C::xreg_new(ctx, v585);
                                let v587 = C::value_regs_get(ctx, v584, 0x1);
                                let v588 = C::xreg_new(ctx, v587);
                                let v589 = C::put_in_regs(ctx, v44.0);
                                let v590 = C::value_regs_get(ctx, v589, 0x0);
                                let v591 = C::xreg_new(ctx, v590);
                                let v592 = constructor_rv_sll(ctx, v591, v586);
                                let v593 = C::put_in_regs(ctx, v44.0);
                                let v594 = C::value_regs_get(ctx, v593, 0x0);
                                let v595 = C::xreg_new(ctx, v594);
                                let v596 = constructor_rv_srl(ctx, v595, v588);
                                let v598 = C::zero_reg(ctx);
                                let v599 = C::xreg_new(ctx, v598);
                                let v600 = C::zero_reg(ctx);
                                let v601 = C::xreg_to_reg(ctx, v596);
                                let v602 =
                                    C::gen_select_reg(ctx, &IntCC::Equal, v586, v599, v600, v601);
                                let v603 = C::xreg_new(ctx, v602);
                                let v604 = C::put_in_regs(ctx, v44.0);
                                let v605 = C::value_regs_get(ctx, v604, 0x1);
                                let v606 = C::xreg_new(ctx, v605);
                                let v607 = constructor_rv_sll(ctx, v606, v586);
                                let v608 = constructor_rv_or(ctx, v603, v607);
                                let v610 = C::load_u64_constant(ctx, 0x40);
                                let v611 = C::xreg_new(ctx, v610);
                                let v612 = C::put_in_regs(ctx, v44.1);
                                let v613 = C::value_regs_get(ctx, v612, 0x0);
                                let v614 = C::xreg_new(ctx, v613);
                                let v616 = C::imm12_const(ctx, 0x7F);
                                let v617 = constructor_rv_andi(ctx, v614, v616);
                                let v619 = C::zero_reg(ctx);
                                let v620 = C::xreg_to_reg(ctx, v592);
                                let v621 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v617,
                                    v611,
                                    v619,
                                    v620,
                                );
                                let v622 = C::xreg_to_reg(ctx, v608);
                                let v623 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v617,
                                    v611,
                                    v620,
                                    v622,
                                );
                                let v624 = C::value_regs(ctx, v621, v623);
                                let v625 = C::output(ctx, v624);
                                // Rule at src/isa/riscv64/lower.isle line 547.
                                return Some(v625);
                            }
                            _ => {}
                        }
                        let v561 = C::int_fits_in_32(ctx, v3);
                        if let Some(v562) = v561 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v563 = C::maybe_uextend(ctx, v44.1);
                            if let Some(v564) = v563 {
                                let v565 = C::def_inst(ctx, v564);
                                if let Some(v566) = v565 {
                                    let v567 = &C::inst_data(ctx, v566);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v568,
                                        imm: v569,
                                    } = v567
                                    {
                                        if let &Opcode::Iconst = v568 {
                                            let v570 = C::u64_from_imm64(ctx, v569);
                                            let v571 = C::imm12_from_u64(ctx, v570);
                                            if let Some(v572) = v571 {
                                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                                let v573 = constructor_shift_mask(ctx, v562);
                                                let v574 = C::imm12_and(ctx, v572, v573);
                                                let v575 = constructor_rv_slliw(ctx, v47, v574);
                                                let v576 = constructor_output_xreg(ctx, v575);
                                                // Rule at src/isa/riscv64/lower.isle line 533.
                                                return Some(v576);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                let v224 = C::put_in_regs(ctx, v44.1);
                                let v552 = C::value_regs_get(ctx, v224, 0x0);
                                let v553 = C::xreg_new(ctx, v552);
                                let v557 = constructor_rv_sllw(ctx, v47, v553);
                                let v558 = constructor_output_xreg(ctx, v557);
                                // Rule at src/isa/riscv64/lower.isle line 525.
                                return Some(v558);
                            }
                            I64 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                let v224 = C::put_in_regs(ctx, v44.1);
                                let v552 = C::value_regs_get(ctx, v224, 0x0);
                                let v553 = C::xreg_new(ctx, v552);
                                let v559 = constructor_rv_sll(ctx, v47, v553);
                                let v560 = constructor_output_xreg(ctx, v559);
                                // Rule at src/isa/riscv64/lower.isle line 529.
                                return Some(v560);
                            }
                            _ => {}
                        }
                        let v235 = C::ty_int(ctx, v3);
                        if let Some(v236) = v235 {
                            let v547 = C::ty_8_or_16(ctx, v236);
                            if let Some(v548) = v547 {
                                let v549 = constructor_shift_mask(ctx, v548);
                                let v550 = constructor_u64_to_imm12(ctx, v549);
                                if let Some(v551) = v550 {
                                    let v44 = C::unpack_value_array_2(ctx, v43);
                                    let v47 = constructor_put_in_xreg(ctx, v44.0);
                                    let v224 = C::put_in_regs(ctx, v44.1);
                                    let v552 = C::value_regs_get(ctx, v224, 0x0);
                                    let v553 = C::xreg_new(ctx, v552);
                                    let v554 = constructor_rv_andi(ctx, v553, v551);
                                    let v555 = constructor_rv_sllw(ctx, v47, v554);
                                    let v556 = constructor_output_xreg(ctx, v555);
                                    // Rule at src/isa/riscv64/lower.isle line 520.
                                    return Some(v556);
                                }
                            }
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v563 = C::maybe_uextend(ctx, v44.1);
                            if let Some(v564) = v563 {
                                let v565 = C::def_inst(ctx, v564);
                                if let Some(v566) = v565 {
                                    let v567 = &C::inst_data(ctx, v566);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v568,
                                        imm: v569,
                                    } = v567
                                    {
                                        if let &Opcode::Iconst = v568 {
                                            let v570 = C::u64_from_imm64(ctx, v569);
                                            let v628 = C::uimm5_from_u64(ctx, v570);
                                            if let Some(v629) = v628 {
                                                let v169 = constructor_put_in_vreg(ctx, v44.0);
                                                let v19 = &constructor_unmasked(ctx);
                                                let v20 = C::vstate_from_type(ctx, v11);
                                                let v684 = constructor_rv_vsrl_vi(
                                                    ctx, v169, v629, v19, v20,
                                                );
                                                let v685 = constructor_output_vreg(ctx, v684);
                                                // Rule at src/isa/riscv64/lower.isle line 626.
                                                return Some(v685);
                                            }
                                        }
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v224 = C::put_in_regs(ctx, v44.1);
                            let v552 = C::value_regs_get(ctx, v224, 0x0);
                            let v553 = C::xreg_new(ctx, v552);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v682 = constructor_rv_vsrl_vx(ctx, v169, v553, v19, v20);
                            let v683 = constructor_output_vreg(ctx, v682);
                            // Rule at src/isa/riscv64/lower.isle line 623.
                            return Some(v683);
                        }
                        match v3 {
                            I32 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v563 = C::maybe_uextend(ctx, v44.1);
                                if let Some(v564) = v563 {
                                    let v565 = C::def_inst(ctx, v564);
                                    if let Some(v566) = v565 {
                                        let v567 = &C::inst_data(ctx, v566);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v568,
                                            imm: v569,
                                        } = v567
                                        {
                                            if let &Opcode::Iconst = v568 {
                                                let v570 = C::u64_from_imm64(ctx, v569);
                                                let v571 = C::imm12_from_u64(ctx, v570);
                                                if let Some(v572) = v571 {
                                                    let v47 = constructor_put_in_xreg(ctx, v44.0);
                                                    let v651 = constructor_rv_srliw(ctx, v47, v572);
                                                    let v652 = constructor_output_xreg(ctx, v651);
                                                    // Rule at src/isa/riscv64/lower.isle line 595.
                                                    return Some(v652);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v563 = C::maybe_uextend(ctx, v44.1);
                                if let Some(v564) = v563 {
                                    let v565 = C::def_inst(ctx, v564);
                                    if let Some(v566) = v565 {
                                        let v567 = &C::inst_data(ctx, v566);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v568,
                                            imm: v569,
                                        } = v567
                                        {
                                            if let &Opcode::Iconst = v568 {
                                                let v570 = C::u64_from_imm64(ctx, v569);
                                                let v571 = C::imm12_from_u64(ctx, v570);
                                                if let Some(v572) = v571 {
                                                    let v47 = constructor_put_in_xreg(ctx, v44.0);
                                                    let v653 = constructor_rv_srli(ctx, v47, v572);
                                                    let v654 = constructor_output_xreg(ctx, v653);
                                                    // Rule at src/isa/riscv64/lower.isle line 598.
                                                    return Some(v654);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v366 = C::put_in_regs(ctx, v44.1);
                                let v367 = C::value_regs_get(ctx, v366, 0x0);
                                let v368 = C::xreg_new(ctx, v367);
                                let v584 = C::gen_shamt(ctx, I128, v368);
                                let v585 = C::value_regs_get(ctx, v584, 0x0);
                                let v586 = C::xreg_new(ctx, v585);
                                let v587 = C::value_regs_get(ctx, v584, 0x1);
                                let v588 = C::xreg_new(ctx, v587);
                                let v589 = C::put_in_regs(ctx, v44.0);
                                let v655 = C::value_regs_get(ctx, v589, 0x1);
                                let v656 = C::xreg_new(ctx, v655);
                                let v657 = constructor_rv_sll(ctx, v656, v588);
                                let v658 = C::zero_reg(ctx);
                                let v659 = C::xreg_new(ctx, v658);
                                let v660 = C::zero_reg(ctx);
                                let v661 = C::xreg_to_reg(ctx, v657);
                                let v662 =
                                    C::gen_select_reg(ctx, &IntCC::Equal, v586, v659, v660, v661);
                                let v663 = C::xreg_new(ctx, v662);
                                let v664 = C::put_in_regs(ctx, v44.0);
                                let v665 = C::value_regs_get(ctx, v664, 0x0);
                                let v666 = C::xreg_new(ctx, v665);
                                let v667 = constructor_rv_srl(ctx, v666, v586);
                                let v668 = constructor_rv_or(ctx, v663, v667);
                                let v669 = C::load_u64_constant(ctx, 0x40);
                                let v670 = C::xreg_new(ctx, v669);
                                let v671 = C::put_in_regs(ctx, v44.0);
                                let v672 = C::value_regs_get(ctx, v671, 0x1);
                                let v673 = C::xreg_new(ctx, v672);
                                let v674 = constructor_rv_srl(ctx, v673, v586);
                                let v612 = C::put_in_regs(ctx, v44.1);
                                let v613 = C::value_regs_get(ctx, v612, 0x0);
                                let v614 = C::xreg_new(ctx, v613);
                                let v616 = C::imm12_const(ctx, 0x7F);
                                let v617 = constructor_rv_andi(ctx, v614, v616);
                                let v675 = C::xreg_to_reg(ctx, v674);
                                let v676 = C::xreg_to_reg(ctx, v668);
                                let v677 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v617,
                                    v670,
                                    v675,
                                    v676,
                                );
                                let v678 = C::zero_reg(ctx);
                                let v679 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v617,
                                    v670,
                                    v678,
                                    v675,
                                );
                                let v680 = C::value_regs(ctx, v677, v679);
                                let v681 = C::output(ctx, v680);
                                // Rule at src/isa/riscv64/lower.isle line 601.
                                return Some(v681);
                            }
                            _ => {}
                        }
                        let v235 = C::ty_int(ctx, v3);
                        if let Some(v236) = v235 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v563 = C::maybe_uextend(ctx, v44.1);
                            if let Some(v564) = v563 {
                                let v565 = C::def_inst(ctx, v564);
                                if let Some(v566) = v565 {
                                    let v567 = &C::inst_data(ctx, v566);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v568,
                                        imm: v569,
                                    } = v567
                                    {
                                        if let &Opcode::Iconst = v568 {
                                            let v570 = C::u64_from_imm64(ctx, v569);
                                            let v571 = C::imm12_from_u64(ctx, v570);
                                            if let Some(v572) = v571 {
                                                let v632 = C::fits_in_16(ctx, v236);
                                                if let Some(v633) = v632 {
                                                    let v47 = constructor_put_in_xreg(ctx, v44.0);
                                                    let v637 =
                                                        constructor_zext(ctx, v47, v633, I64);
                                                    let v634 = constructor_shift_mask(ctx, v633);
                                                    let v648 = C::imm12_and(ctx, v572, v634);
                                                    let v649 =
                                                        constructor_rv_srliw(ctx, v637, v648);
                                                    let v650 = constructor_output_xreg(ctx, v649);
                                                    // Rule at src/isa/riscv64/lower.isle line 592.
                                                    return Some(v650);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                let v224 = C::put_in_regs(ctx, v44.1);
                                let v552 = C::value_regs_get(ctx, v224, 0x0);
                                let v553 = C::xreg_new(ctx, v552);
                                let v644 = constructor_rv_srlw(ctx, v47, v553);
                                let v645 = constructor_output_xreg(ctx, v644);
                                // Rule at src/isa/riscv64/lower.isle line 584.
                                return Some(v645);
                            }
                            I64 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                let v224 = C::put_in_regs(ctx, v44.1);
                                let v552 = C::value_regs_get(ctx, v224, 0x0);
                                let v553 = C::xreg_new(ctx, v552);
                                let v646 = constructor_rv_srl(ctx, v47, v553);
                                let v647 = constructor_output_xreg(ctx, v646);
                                // Rule at src/isa/riscv64/lower.isle line 588.
                                return Some(v647);
                            }
                            _ => {}
                        }
                        if let Some(v236) = v235 {
                            let v632 = C::fits_in_16(ctx, v236);
                            if let Some(v633) = v632 {
                                let v634 = constructor_shift_mask(ctx, v633);
                                let v635 = constructor_u64_to_imm12(ctx, v634);
                                if let Some(v636) = v635 {
                                    let v44 = C::unpack_value_array_2(ctx, v43);
                                    let v47 = constructor_put_in_xreg(ctx, v44.0);
                                    let v637 = constructor_zext(ctx, v47, v633, I64);
                                    let v638 = C::put_in_regs(ctx, v44.1);
                                    let v639 = C::value_regs_get(ctx, v638, 0x0);
                                    let v640 = C::xreg_new(ctx, v639);
                                    let v641 = constructor_rv_andi(ctx, v640, v636);
                                    let v642 = constructor_rv_srlw(ctx, v637, v641);
                                    let v643 = constructor_output_xreg(ctx, v642);
                                    // Rule at src/isa/riscv64/lower.isle line 579.
                                    return Some(v643);
                                }
                            }
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v563 = C::maybe_uextend(ctx, v44.1);
                            if let Some(v564) = v563 {
                                let v565 = C::def_inst(ctx, v564);
                                if let Some(v566) = v565 {
                                    let v567 = &C::inst_data(ctx, v566);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v568,
                                        imm: v569,
                                    } = v567
                                    {
                                        if let &Opcode::Iconst = v568 {
                                            let v570 = C::u64_from_imm64(ctx, v569);
                                            let v628 = C::uimm5_from_u64(ctx, v570);
                                            if let Some(v629) = v628 {
                                                let v169 = constructor_put_in_vreg(ctx, v44.0);
                                                let v19 = &constructor_unmasked(ctx);
                                                let v20 = C::vstate_from_type(ctx, v11);
                                                let v726 = constructor_rv_vsra_vi(
                                                    ctx, v169, v629, v19, v20,
                                                );
                                                let v727 = constructor_output_vreg(ctx, v726);
                                                // Rule at src/isa/riscv64/lower.isle line 685.
                                                return Some(v727);
                                            }
                                        }
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v224 = C::put_in_regs(ctx, v44.1);
                            let v552 = C::value_regs_get(ctx, v224, 0x0);
                            let v553 = C::xreg_new(ctx, v552);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v724 = constructor_rv_vsra_vx(ctx, v169, v553, v19, v20);
                            let v725 = constructor_output_vreg(ctx, v724);
                            // Rule at src/isa/riscv64/lower.isle line 682.
                            return Some(v725);
                        }
                        match v3 {
                            I32 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v563 = C::maybe_uextend(ctx, v44.1);
                                if let Some(v564) = v563 {
                                    let v565 = C::def_inst(ctx, v564);
                                    if let Some(v566) = v565 {
                                        let v567 = &C::inst_data(ctx, v566);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v568,
                                            imm: v569,
                                        } = v567
                                        {
                                            if let &Opcode::Iconst = v568 {
                                                let v570 = C::u64_from_imm64(ctx, v569);
                                                let v571 = C::imm12_from_u64(ctx, v570);
                                                if let Some(v572) = v571 {
                                                    let v47 = constructor_put_in_xreg(ctx, v44.0);
                                                    let v695 = constructor_rv_sraiw(ctx, v47, v572);
                                                    let v696 = constructor_output_xreg(ctx, v695);
                                                    // Rule at src/isa/riscv64/lower.isle line 649.
                                                    return Some(v696);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v563 = C::maybe_uextend(ctx, v44.1);
                                if let Some(v564) = v563 {
                                    let v565 = C::def_inst(ctx, v564);
                                    if let Some(v566) = v565 {
                                        let v567 = &C::inst_data(ctx, v566);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v568,
                                            imm: v569,
                                        } = v567
                                        {
                                            if let &Opcode::Iconst = v568 {
                                                let v570 = C::u64_from_imm64(ctx, v569);
                                                let v571 = C::imm12_from_u64(ctx, v570);
                                                if let Some(v572) = v571 {
                                                    let v47 = constructor_put_in_xreg(ctx, v44.0);
                                                    let v697 = constructor_rv_srai(ctx, v47, v572);
                                                    let v698 = constructor_output_xreg(ctx, v697);
                                                    // Rule at src/isa/riscv64/lower.isle line 652.
                                                    return Some(v698);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v366 = C::put_in_regs(ctx, v44.1);
                                let v367 = C::value_regs_get(ctx, v366, 0x0);
                                let v368 = C::xreg_new(ctx, v367);
                                let v584 = C::gen_shamt(ctx, I128, v368);
                                let v585 = C::value_regs_get(ctx, v584, 0x0);
                                let v586 = C::xreg_new(ctx, v585);
                                let v587 = C::value_regs_get(ctx, v584, 0x1);
                                let v588 = C::xreg_new(ctx, v587);
                                let v589 = C::put_in_regs(ctx, v44.0);
                                let v655 = C::value_regs_get(ctx, v589, 0x1);
                                let v656 = C::xreg_new(ctx, v655);
                                let v657 = constructor_rv_sll(ctx, v656, v588);
                                let v658 = C::zero_reg(ctx);
                                let v659 = C::xreg_new(ctx, v658);
                                let v660 = C::zero_reg(ctx);
                                let v661 = C::xreg_to_reg(ctx, v657);
                                let v662 =
                                    C::gen_select_reg(ctx, &IntCC::Equal, v586, v659, v660, v661);
                                let v663 = C::xreg_new(ctx, v662);
                                let v664 = C::put_in_regs(ctx, v44.0);
                                let v665 = C::value_regs_get(ctx, v664, 0x0);
                                let v666 = C::xreg_new(ctx, v665);
                                let v667 = constructor_rv_srl(ctx, v666, v586);
                                let v668 = constructor_rv_or(ctx, v663, v667);
                                let v669 = C::load_u64_constant(ctx, 0x40);
                                let v670 = C::xreg_new(ctx, v669);
                                let v671 = C::put_in_regs(ctx, v44.0);
                                let v672 = C::value_regs_get(ctx, v671, 0x1);
                                let v673 = C::xreg_new(ctx, v672);
                                let v699 = constructor_rv_sra(ctx, v673, v586);
                                let v701 = constructor_load_imm12(ctx, -0x1);
                                let v702 = C::xreg_new(ctx, v701);
                                let v704 = C::put_in_regs(ctx, v44.0);
                                let v705 = C::value_regs_get(ctx, v704, 0x1);
                                let v706 = C::xreg_new(ctx, v705);
                                let v678 = C::zero_reg(ctx);
                                let v707 = C::xreg_new(ctx, v678);
                                let v709 = C::zero_reg(ctx);
                                let v708 = C::xreg_to_reg(ctx, v702);
                                let v710 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::SignedLessThan,
                                    v706,
                                    v707,
                                    v708,
                                    v709,
                                );
                                let v711 = C::xreg_new(ctx, v710);
                                let v712 = C::load_u64_constant(ctx, 0x40);
                                let v713 = C::xreg_new(ctx, v712);
                                let v714 = C::put_in_regs(ctx, v44.1);
                                let v715 = C::value_regs_get(ctx, v714, 0x0);
                                let v716 = C::xreg_new(ctx, v715);
                                let v616 = C::imm12_const(ctx, 0x7F);
                                let v717 = constructor_rv_andi(ctx, v716, v616);
                                let v718 = C::xreg_to_reg(ctx, v699);
                                let v676 = C::xreg_to_reg(ctx, v668);
                                let v719 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v717,
                                    v713,
                                    v718,
                                    v676,
                                );
                                let v720 = C::xreg_to_reg(ctx, v711);
                                let v721 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v717,
                                    v713,
                                    v720,
                                    v718,
                                );
                                let v722 = C::value_regs(ctx, v719, v721);
                                let v723 = C::output(ctx, v722);
                                // Rule at src/isa/riscv64/lower.isle line 655.
                                return Some(v723);
                            }
                            _ => {}
                        }
                        let v235 = C::ty_int(ctx, v3);
                        if let Some(v236) = v235 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v563 = C::maybe_uextend(ctx, v44.1);
                            if let Some(v564) = v563 {
                                let v565 = C::def_inst(ctx, v564);
                                if let Some(v566) = v565 {
                                    let v567 = &C::inst_data(ctx, v566);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v568,
                                        imm: v569,
                                    } = v567
                                    {
                                        if let &Opcode::Iconst = v568 {
                                            let v570 = C::u64_from_imm64(ctx, v569);
                                            let v571 = C::imm12_from_u64(ctx, v570);
                                            if let Some(v572) = v571 {
                                                let v632 = C::fits_in_16(ctx, v236);
                                                if let Some(v633) = v632 {
                                                    let v47 = constructor_put_in_xreg(ctx, v44.0);
                                                    let v686 =
                                                        constructor_sext(ctx, v47, v633, I64);
                                                    let v634 = constructor_shift_mask(ctx, v633);
                                                    let v648 = C::imm12_and(ctx, v572, v634);
                                                    let v693 =
                                                        constructor_rv_sraiw(ctx, v686, v648);
                                                    let v694 = constructor_output_xreg(ctx, v693);
                                                    // Rule at src/isa/riscv64/lower.isle line 646.
                                                    return Some(v694);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                let v224 = C::put_in_regs(ctx, v44.1);
                                let v552 = C::value_regs_get(ctx, v224, 0x0);
                                let v553 = C::xreg_new(ctx, v552);
                                let v689 = constructor_rv_sraw(ctx, v47, v553);
                                let v690 = constructor_output_xreg(ctx, v689);
                                // Rule at src/isa/riscv64/lower.isle line 638.
                                return Some(v690);
                            }
                            I64 => {
                                let v44 = C::unpack_value_array_2(ctx, v43);
                                let v47 = constructor_put_in_xreg(ctx, v44.0);
                                let v224 = C::put_in_regs(ctx, v44.1);
                                let v552 = C::value_regs_get(ctx, v224, 0x0);
                                let v553 = C::xreg_new(ctx, v552);
                                let v691 = constructor_rv_sra(ctx, v47, v553);
                                let v692 = constructor_output_xreg(ctx, v691);
                                // Rule at src/isa/riscv64/lower.isle line 642.
                                return Some(v692);
                            }
                            _ => {}
                        }
                        if let Some(v236) = v235 {
                            let v632 = C::fits_in_16(ctx, v236);
                            if let Some(v633) = v632 {
                                let v634 = constructor_shift_mask(ctx, v633);
                                let v635 = constructor_u64_to_imm12(ctx, v634);
                                if let Some(v636) = v635 {
                                    let v44 = C::unpack_value_array_2(ctx, v43);
                                    let v47 = constructor_put_in_xreg(ctx, v44.0);
                                    let v686 = constructor_sext(ctx, v47, v633, I64);
                                    let v638 = C::put_in_regs(ctx, v44.1);
                                    let v639 = C::value_regs_get(ctx, v638, 0x0);
                                    let v640 = C::xreg_new(ctx, v639);
                                    let v641 = constructor_rv_andi(ctx, v640, v636);
                                    let v687 = constructor_rv_sraw(ctx, v686, v641);
                                    let v688 = constructor_output_xreg(ctx, v687);
                                    // Rule at src/isa/riscv64/lower.isle line 633.
                                    return Some(v688);
                                }
                            }
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v176 = constructor_put_in_vreg(ctx, v44.1);
                                        let v856 = constructor_put_in_freg(ctx, v83);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v857 =
                                            constructor_rv_vfadd_vf(ctx, v176, v856, v19, v20);
                                        let v858 = constructor_output_vreg(ctx, v857);
                                        // Rule at src/isa/riscv64/lower.isle line 849.
                                        return Some(v858);
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v853 = constructor_put_in_freg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v854 =
                                            constructor_rv_vfadd_vf(ctx, v169, v853, v19, v20);
                                        let v855 = constructor_output_vreg(ctx, v854);
                                        // Rule at src/isa/riscv64/lower.isle line 846.
                                        return Some(v855);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v851 = constructor_rv_vfadd_vv(ctx, v169, v170, v19, v20);
                            let v852 = constructor_output_vreg(ctx, v851);
                            // Rule at src/isa/riscv64/lower.isle line 843.
                            return Some(v852);
                        }
                        let v339 = C::ty_scalar_float(ctx, v3);
                        if let Some(v340) = v339 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v342 = constructor_put_in_freg(ctx, v44.0);
                            let v343 = constructor_put_in_freg(ctx, v44.1);
                            let v849 = constructor_rv_fadd(ctx, v340, v342, v343);
                            let v850 = constructor_output_freg(ctx, v849);
                            // Rule at src/isa/riscv64/lower.isle line 840.
                            return Some(v850);
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v176 = constructor_put_in_vreg(ctx, v44.1);
                                        let v856 = constructor_put_in_freg(ctx, v83);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v865 =
                                            constructor_rv_vfrsub_vf(ctx, v176, v856, v19, v20);
                                        let v866 = constructor_output_vreg(ctx, v865);
                                        // Rule at src/isa/riscv64/lower.isle line 863.
                                        return Some(v866);
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v853 = constructor_put_in_freg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v863 =
                                            constructor_rv_vfsub_vf(ctx, v169, v853, v19, v20);
                                        let v864 = constructor_output_vreg(ctx, v863);
                                        // Rule at src/isa/riscv64/lower.isle line 860.
                                        return Some(v864);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v861 = constructor_rv_vfsub_vv(ctx, v169, v170, v19, v20);
                            let v862 = constructor_output_vreg(ctx, v861);
                            // Rule at src/isa/riscv64/lower.isle line 857.
                            return Some(v862);
                        }
                        let v339 = C::ty_scalar_float(ctx, v3);
                        if let Some(v340) = v339 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v342 = constructor_put_in_freg(ctx, v44.0);
                            let v343 = constructor_put_in_freg(ctx, v44.1);
                            let v859 = constructor_rv_fsub(ctx, v340, v342, v343);
                            let v860 = constructor_output_freg(ctx, v859);
                            // Rule at src/isa/riscv64/lower.isle line 854.
                            return Some(v860);
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v176 = constructor_put_in_vreg(ctx, v44.1);
                                        let v856 = constructor_put_in_freg(ctx, v83);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v873 =
                                            constructor_rv_vfmul_vf(ctx, v176, v856, v19, v20);
                                        let v874 = constructor_output_vreg(ctx, v873);
                                        // Rule at src/isa/riscv64/lower.isle line 876.
                                        return Some(v874);
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v853 = constructor_put_in_freg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v871 =
                                            constructor_rv_vfmul_vf(ctx, v169, v853, v19, v20);
                                        let v872 = constructor_output_vreg(ctx, v871);
                                        // Rule at src/isa/riscv64/lower.isle line 873.
                                        return Some(v872);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v869 = constructor_rv_vfmul_vv(ctx, v169, v170, v19, v20);
                            let v870 = constructor_output_vreg(ctx, v869);
                            // Rule at src/isa/riscv64/lower.isle line 870.
                            return Some(v870);
                        }
                        let v339 = C::ty_scalar_float(ctx, v3);
                        if let Some(v340) = v339 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v342 = constructor_put_in_freg(ctx, v44.0);
                            let v343 = constructor_put_in_freg(ctx, v44.1);
                            let v867 = constructor_rv_fmul(ctx, v340, v342, v343);
                            let v868 = constructor_output_freg(ctx, v867);
                            // Rule at src/isa/riscv64/lower.isle line 867.
                            return Some(v868);
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v63 = C::def_inst(ctx, v44.0);
                            if let Some(v64) = v63 {
                                let v65 = &C::inst_data(ctx, v64);
                                if let &InstructionData::Unary {
                                    opcode: ref v82,
                                    arg: v83,
                                } = v65
                                {
                                    if let &Opcode::Splat = v82 {
                                        let v176 = constructor_put_in_vreg(ctx, v44.1);
                                        let v856 = constructor_put_in_freg(ctx, v83);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v881 =
                                            constructor_rv_vfrdiv_vf(ctx, v176, v856, v19, v20);
                                        let v882 = constructor_output_vreg(ctx, v881);
                                        // Rule at src/isa/riscv64/lower.isle line 890.
                                        return Some(v882);
                                    }
                                }
                            }
                            let v51 = C::def_inst(ctx, v44.1);
                            if let Some(v52) = v51 {
                                let v53 = &C::inst_data(ctx, v52);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v53
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v169 = constructor_put_in_vreg(ctx, v44.0);
                                        let v853 = constructor_put_in_freg(ctx, v75);
                                        let v19 = &constructor_unmasked(ctx);
                                        let v20 = C::vstate_from_type(ctx, v11);
                                        let v879 =
                                            constructor_rv_vfdiv_vf(ctx, v169, v853, v19, v20);
                                        let v880 = constructor_output_vreg(ctx, v879);
                                        // Rule at src/isa/riscv64/lower.isle line 887.
                                        return Some(v880);
                                    }
                                }
                            }
                            let v169 = constructor_put_in_vreg(ctx, v44.0);
                            let v170 = constructor_put_in_vreg(ctx, v44.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v877 = constructor_rv_vfdiv_vv(ctx, v169, v170, v19, v20);
                            let v878 = constructor_output_vreg(ctx, v877);
                            // Rule at src/isa/riscv64/lower.isle line 884.
                            return Some(v878);
                        }
                        let v339 = C::ty_scalar_float(ctx, v3);
                        if let Some(v340) = v339 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v342 = constructor_put_in_freg(ctx, v44.0);
                            let v343 = constructor_put_in_freg(ctx, v44.1);
                            let v875 = constructor_rv_fdiv(ctx, v340, v342, v343);
                            let v876 = constructor_output_freg(ctx, v875);
                            // Rule at src/isa/riscv64/lower.isle line 881.
                            return Some(v876);
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v44 = C::unpack_value_array_2(ctx, v43);
                        let v342 = constructor_put_in_freg(ctx, v44.0);
                        let v343 = constructor_put_in_freg(ctx, v44.1);
                        let v3 = C::value_type(ctx, v2);
                        let v744 = constructor_rv_fsgnj(ctx, v3, v342, v343);
                        let v745 = constructor_output_freg(ctx, v744);
                        // Rule at src/isa/riscv64/lower.isle line 716.
                        return Some(v745);
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v44 = C::unpack_value_array_2(ctx, v43);
                        let v884 = C::put_in_reg(ctx, v44.0);
                        let v71 = C::put_in_reg(ctx, v44.1);
                        let v3 = C::value_type(ctx, v2);
                        let v885 =
                            constructor_gen_float_select(ctx, &FloatSelectOP::Min, v884, v71, v3);
                        let v886 = constructor_output_reg(ctx, v885);
                        // Rule at src/isa/riscv64/lower.isle line 896.
                        return Some(v886);
                    }
                }
                &Opcode::FminPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v44 = C::unpack_value_array_2(ctx, v43);
                        let v884 = C::put_in_reg(ctx, v44.0);
                        let v71 = C::put_in_reg(ctx, v44.1);
                        let v3 = C::value_type(ctx, v2);
                        let v887 = constructor_gen_float_select_pseudo(
                            ctx,
                            &FloatSelectOP::Min,
                            v884,
                            v71,
                            v3,
                        );
                        let v888 = constructor_output_reg(ctx, v887);
                        // Rule at src/isa/riscv64/lower.isle line 900.
                        return Some(v888);
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v44 = C::unpack_value_array_2(ctx, v43);
                        let v884 = C::put_in_reg(ctx, v44.0);
                        let v71 = C::put_in_reg(ctx, v44.1);
                        let v3 = C::value_type(ctx, v2);
                        let v890 =
                            constructor_gen_float_select(ctx, &FloatSelectOP::Max, v884, v71, v3);
                        let v891 = constructor_output_reg(ctx, v890);
                        // Rule at src/isa/riscv64/lower.isle line 904.
                        return Some(v891);
                    }
                }
                &Opcode::FmaxPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v44 = C::unpack_value_array_2(ctx, v43);
                        let v884 = C::put_in_reg(ctx, v44.0);
                        let v71 = C::put_in_reg(ctx, v44.1);
                        let v3 = C::value_type(ctx, v2);
                        let v892 = constructor_gen_float_select_pseudo(
                            ctx,
                            &FloatSelectOP::Max,
                            v884,
                            v71,
                            v3,
                        );
                        let v893 = constructor_output_reg(ctx, v892);
                        // Rule at src/isa/riscv64/lower.isle line 908.
                        return Some(v893);
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v44 = C::unpack_value_array_2(ctx, v43);
                            let v47 = constructor_put_in_xreg(ctx, v44.0);
                            let v48 = constructor_put_in_xreg(ctx, v44.1);
                            let v966 = C::xreg_to_reg(ctx, v47);
                            let v967 = C::xreg_to_reg(ctx, v48);
                            let v968 = C::value_regs(ctx, v966, v967);
                            let v969 = C::output(ctx, v968);
                            // Rule at src/isa/riscv64/lower.isle line 969.
                            return Some(v969);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1209,
            arg: v1210,
            imm: v1211,
        } => {
            if let &Opcode::Extractlane = v1209 {
                let v1214 = constructor_put_in_vreg(ctx, v1210);
                let v1212 = C::value_type(ctx, v1210);
                let v1213 = C::u8_from_uimm8(ctx, v1211);
                let v1215 = constructor_gen_extractlane(ctx, v1212, v1214, v1213);
                let v1216 = constructor_output_reg(ctx, v1215);
                // Rule at src/isa/riscv64/lower.isle line 1267.
                return Some(v1216);
            }
        }
        &InstructionData::Call {
            opcode: ref v1191,
            args: v1192,
            func_ref: v1193,
        } => {
            if let &Opcode::Call = v1191 {
                let v1195 = C::func_ref_data(ctx, v1193);
                let v1194 = C::value_list_slice(ctx, v1192);
                let v1199 = C::gen_call(ctx, v1195.0, v1195.1, v1195.2, v1194);
                // Rule at src/isa/riscv64/lower.isle line 1259.
                return Some(v1199);
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1200,
            args: v1201,
            sig_ref: v1202,
        } => {
            if let &Opcode::CallIndirect = v1200 {
                let v1203 = C::value_list_slice(ctx, v1201);
                let v1204 = C::value_slice_unwrap(ctx, v1203);
                if let Some(v1205) = v1204 {
                    let v1208 = C::gen_call_indirect(ctx, v1202, v1205.0, v1205.1);
                    // Rule at src/isa/riscv64/lower.isle line 1262.
                    return Some(v1208);
                }
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1103,
            args: ref v1104,
            cond: ref v1105,
        } => {
            if let &Opcode::Fcmp = v1103 {
                let v1106 = C::unpack_value_array_2(ctx, v1104);
                let v1110 = constructor_put_in_freg(ctx, v1106.0);
                let v1111 = constructor_put_in_freg(ctx, v1106.1);
                let v1109 = C::value_type(ctx, v1106.0);
                let v1112 = &constructor_emit_fcmp(ctx, v1105, v1109, v1110, v1111);
                let v1113 = constructor_cmp_value(ctx, v1112);
                let v1114 = constructor_output_xreg(ctx, v1113);
                // Rule at src/isa/riscv64/lower.isle line 1139.
                return Some(v1114);
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1115,
            func_ref: v1116,
        } => {
            if let &Opcode::FuncAddr = v1115 {
                let v1117 = C::func_ref_data(ctx, v1116);
                let v1122 = C::load_ext_name(ctx, v1117.1, 0x0);
                let v1123 = constructor_output_reg(ctx, v1122);
                // Rule at src/isa/riscv64/lower.isle line 1144.
                return Some(v1123);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v202,
            args: ref v203,
            code: ref v204,
        } => {
            if let &Opcode::UaddOverflowTrap = v202 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v200 = C::fits_in_64(ctx, v3);
                    if let Some(v201) = v200 {
                        let v205 = C::unpack_value_array_2(ctx, v203);
                        let v208 = constructor_put_in_xreg(ctx, v205.0);
                        let v209 = constructor_put_in_xreg(ctx, v205.1);
                        let v210 = constructor_lower_uadd_overflow(ctx, v208, v209, v201);
                        let v211 = C::value_regs_get(ctx, v210, 0x1);
                        let v212 = C::xreg_new(ctx, v211);
                        let v213 = constructor_gen_trapif(ctx, v212, v204);
                        let v214 = C::value_regs_get(ctx, v210, 0x0);
                        let v215 = constructor_output_reg(ctx, v214);
                        // Rule at src/isa/riscv64/lower.isle line 128.
                        return Some(v215);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1092,
            args: ref v1093,
            cond: ref v1094,
        } => {
            if let &Opcode::Icmp = v1092 {
                let v1095 = C::unpack_value_array_2(ctx, v1093);
                let v1099 = C::put_in_regs(ctx, v1095.0);
                let v1100 = C::put_in_regs(ctx, v1095.1);
                let v1098 = C::value_type(ctx, v1095.0);
                let v1101 = constructor_lower_icmp(ctx, v1094, v1099, v1100, v1098);
                let v1102 = constructor_output_reg(ctx, v1101);
                // Rule at src/isa/riscv64/lower.isle line 1134.
                return Some(v1102);
            }
        }
        &InstructionData::Load {
            opcode: ref v1022,
            arg: v1023,
            flags: v1024,
            offset: v1025,
        } => {
            match v1022 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1026 = C::value_type(ctx, v1023);
                        let v1027 = C::ty_addr64(ctx, v1026);
                        if let Some(v1028) = v1027 {
                            let v3 = C::value_type(ctx, v2);
                            let v10 = C::ty_vec_fits_in_register(ctx, v3);
                            if let Some(v11) = v10 {
                                let v1029 = C::put_in_reg(ctx, v1023);
                                let v1056 = C::gen_amode(ctx, v1029, v1025, I64);
                                let v14 = &constructor_element_width_from_type(ctx, v11);
                                let v1057 = VecAMode::UnitStride { base: v1056 };
                                let v19 = &constructor_unmasked(ctx);
                                let v20 = C::vstate_from_type(ctx, v11);
                                let v1058 = constructor_vec_load(ctx, v14, &v1057, v1024, v19, v20);
                                let v1059 = constructor_output_reg(ctx, v1058);
                                // Rule at src/isa/riscv64/lower.isle line 1090.
                                return Some(v1059);
                            }
                            if v3 == I128 {
                                let v1029 = C::put_in_reg(ctx, v1023);
                                let v1054 = constructor_gen_load_128(ctx, v1029, v1025, v1024);
                                let v1055 = C::output(ctx, v1054);
                                // Rule at src/isa/riscv64/lower.isle line 1086.
                                return Some(v1055);
                            }
                            let v1029 = C::put_in_reg(ctx, v1023);
                            let v1051 = &C::load_op(ctx, v3);
                            let v1052 = constructor_gen_load(ctx, v1029, v1025, v1051, v1024, v3);
                            let v1053 = constructor_output_reg(ctx, v1052);
                            // Rule at src/isa/riscv64/lower.isle line 1082.
                            return Some(v1053);
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1026 = C::value_type(ctx, v1023);
                    let v1027 = C::ty_addr64(ctx, v1026);
                    if let Some(v1028) = v1027 {
                        let v1029 = C::put_in_reg(ctx, v1023);
                        let v1031 = &constructor_int_load_op(ctx, false, 0x8);
                        let v1032 = constructor_gen_load(ctx, v1029, v1025, v1031, v1024, I64);
                        let v1033 = constructor_output_reg(ctx, v1032);
                        // Rule at src/isa/riscv64/lower.isle line 1055.
                        return Some(v1033);
                    }
                }
                &Opcode::Sload8 => {
                    let v1026 = C::value_type(ctx, v1023);
                    let v1027 = C::ty_addr64(ctx, v1026);
                    if let Some(v1028) = v1027 {
                        let v1029 = C::put_in_reg(ctx, v1023);
                        let v1034 = &constructor_int_load_op(ctx, true, 0x8);
                        let v1035 = constructor_gen_load(ctx, v1029, v1025, v1034, v1024, I64);
                        let v1036 = constructor_output_reg(ctx, v1035);
                        // Rule at src/isa/riscv64/lower.isle line 1059.
                        return Some(v1036);
                    }
                }
                &Opcode::Uload16 => {
                    let v1026 = C::value_type(ctx, v1023);
                    let v1027 = C::ty_addr64(ctx, v1026);
                    if let Some(v1028) = v1027 {
                        let v1029 = C::put_in_reg(ctx, v1023);
                        let v1038 = &constructor_int_load_op(ctx, false, 0x10);
                        let v1039 = constructor_gen_load(ctx, v1029, v1025, v1038, v1024, I64);
                        let v1040 = constructor_output_reg(ctx, v1039);
                        // Rule at src/isa/riscv64/lower.isle line 1063.
                        return Some(v1040);
                    }
                }
                &Opcode::Sload16 => {
                    let v1026 = C::value_type(ctx, v1023);
                    let v1027 = C::ty_addr64(ctx, v1026);
                    if let Some(v1028) = v1027 {
                        let v1029 = C::put_in_reg(ctx, v1023);
                        let v1041 = &constructor_int_load_op(ctx, true, 0x10);
                        let v1042 = constructor_gen_load(ctx, v1029, v1025, v1041, v1024, I64);
                        let v1043 = constructor_output_reg(ctx, v1042);
                        // Rule at src/isa/riscv64/lower.isle line 1068.
                        return Some(v1043);
                    }
                }
                &Opcode::Uload32 => {
                    let v1026 = C::value_type(ctx, v1023);
                    let v1027 = C::ty_addr64(ctx, v1026);
                    if let Some(v1028) = v1027 {
                        let v1029 = C::put_in_reg(ctx, v1023);
                        let v1045 = &constructor_int_load_op(ctx, false, 0x20);
                        let v1046 = constructor_gen_load(ctx, v1029, v1025, v1045, v1024, I64);
                        let v1047 = constructor_output_reg(ctx, v1046);
                        // Rule at src/isa/riscv64/lower.isle line 1073.
                        return Some(v1047);
                    }
                }
                &Opcode::Sload32 => {
                    let v1026 = C::value_type(ctx, v1023);
                    let v1027 = C::ty_addr64(ctx, v1026);
                    if let Some(v1028) = v1027 {
                        let v1029 = C::put_in_reg(ctx, v1023);
                        let v1048 = &constructor_int_load_op(ctx, true, 0x20);
                        let v1049 = constructor_gen_load(ctx, v1029, v1025, v1048, v1024, I64);
                        let v1050 = constructor_output_reg(ctx, v1049);
                        // Rule at src/isa/riscv64/lower.isle line 1078.
                        return Some(v1050);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v804,
            arg: v805,
            flags: v806,
        } => {
            match v804 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v807 = C::put_in_reg(ctx, v805);
                        let v1152 = C::value_type(ctx, v805);
                        let v3 = C::value_type(ctx, v2);
                        let v1153 = constructor_gen_bitcast(ctx, v807, v1152, v3);
                        let v1154 = constructor_output_reg(ctx, v1153);
                        // Rule at src/isa/riscv64/lower.isle line 1188.
                        return Some(v1154);
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v762) = v761 {
                            let v807 = C::put_in_reg(ctx, v805);
                            let v808 = constructor_gen_atomic_load(ctx, v807, v762);
                            let v809 = constructor_output_reg(ctx, v808);
                            // Rule at src/isa/riscv64/lower.isle line 788.
                            return Some(v809);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1177,
            args: v1178,
        } => {
            if let &Opcode::Return = v1177 {
                let v1179 = C::value_list_slice(ctx, v1178);
                let v1180 = constructor_lower_return(ctx, v1179);
                // Rule at src/isa/riscv64/lower.isle line 1237.
                return Some(v1180);
            }
        }
        &InstructionData::NullAry { opcode: ref v36 } => {
            match v36 {
                &Opcode::Debugtrap => {
                    let v1013 = SideEffectNoResult::Inst {
                        inst: MInst::EBreak,
                    };
                    let v1014 = constructor_side_effect(ctx, &v1013);
                    // Rule at src/isa/riscv64/lower.isle line 1035.
                    return Some(v1014);
                }
                &Opcode::GetFramePointer => {
                    let v1181 = C::fp_reg(ctx);
                    let v1182 = constructor_gen_mov_from_preg(ctx, v1181);
                    let v1183 = constructor_output_reg(ctx, v1182);
                    // Rule at src/isa/riscv64/lower.isle line 1243.
                    return Some(v1183);
                }
                &Opcode::GetStackPointer => {
                    let v1184 = C::sp_reg(ctx);
                    let v1185 = constructor_gen_mov_from_preg(ctx, v1184);
                    let v1186 = constructor_output_reg(ctx, v1185);
                    // Rule at src/isa/riscv64/lower.isle line 1246.
                    return Some(v1186);
                }
                &Opcode::GetReturnAddress => {
                    let v1187 = C::load_ra(ctx);
                    let v1188 = constructor_output_reg(ctx, v1187);
                    // Rule at src/isa/riscv64/lower.isle line 1249.
                    return Some(v1188);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::imm(ctx, v3, 0x0);
                        let v39 = constructor_output_reg(ctx, v38);
                        // Rule at src/isa/riscv64/lower.isle line 34.
                        return Some(v39);
                    }
                }
                &Opcode::Fence => {
                    let v1016 = MInst::Fence {
                        pred: 0xF,
                        succ: 0xF,
                    };
                    let v1017 = SideEffectNoResult::Inst { inst: v1016 };
                    let v1018 = constructor_side_effect(ctx, &v1017);
                    // Rule at src/isa/riscv64/lower.isle line 1040.
                    return Some(v1018);
                }
                _ => {}
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v894,
            stack_slot: v895,
            offset: v896,
        } => {
            if let &Opcode::StackAddr = v894 {
                let v897 = C::gen_stack_addr(ctx, v895, v896);
                let v898 = constructor_output_reg(ctx, v897);
                // Rule at src/isa/riscv64/lower.isle line 913.
                return Some(v898);
            }
        }
        &InstructionData::Store {
            opcode: ref v1060,
            args: ref v1061,
            flags: v1062,
            offset: v1063,
        } => {
            match v1060 {
                &Opcode::Store => {
                    let v1064 = C::unpack_value_array_2(ctx, v1061);
                    let v1067 = C::value_type(ctx, v1064.1);
                    let v1068 = C::ty_addr64(ctx, v1067);
                    if let Some(v1069) = v1068 {
                        let v1078 = C::value_type(ctx, v1064.0);
                        let v1084 = C::ty_vec_fits_in_register(ctx, v1078);
                        if let Some(v1085) = v1084 {
                            let v1070 = C::put_in_reg(ctx, v1064.1);
                            let v1087 = C::gen_amode(ctx, v1070, v1063, I64);
                            let v1089 = constructor_put_in_vreg(ctx, v1064.0);
                            let v1086 = &constructor_element_width_from_type(ctx, v1085);
                            let v1088 = VecAMode::UnitStride { base: v1087 };
                            let v19 = &constructor_unmasked(ctx);
                            let v1090 = C::vstate_from_type(ctx, v1085);
                            let v1091 =
                                constructor_vec_store(ctx, v1086, &v1088, v1089, v1062, v19, v1090);
                            // Rule at src/isa/riscv64/lower.isle line 1119.
                            return Some(v1091);
                        }
                        if v1078 == I128 {
                            let v1070 = C::put_in_reg(ctx, v1064.1);
                            let v1082 = C::put_in_regs(ctx, v1064.0);
                            let v1083 = constructor_gen_store_128(ctx, v1070, v1063, v1062, v1082);
                            // Rule at src/isa/riscv64/lower.isle line 1115.
                            return Some(v1083);
                        }
                        let v1070 = C::put_in_reg(ctx, v1064.1);
                        let v1079 = &C::store_op(ctx, v1078);
                        let v1080 = C::put_in_reg(ctx, v1064.0);
                        let v1081 = constructor_gen_store(ctx, v1070, v1063, v1079, v1062, v1080);
                        // Rule at src/isa/riscv64/lower.isle line 1111.
                        return Some(v1081);
                    }
                }
                &Opcode::Istore8 => {
                    let v1064 = C::unpack_value_array_2(ctx, v1061);
                    let v1067 = C::value_type(ctx, v1064.1);
                    let v1068 = C::ty_addr64(ctx, v1067);
                    if let Some(v1069) = v1068 {
                        let v1070 = C::put_in_reg(ctx, v1064.1);
                        let v1072 = C::put_in_reg(ctx, v1064.0);
                        let v1073 =
                            constructor_gen_store(ctx, v1070, v1063, &StoreOP::Sb, v1062, v1072);
                        // Rule at src/isa/riscv64/lower.isle line 1097.
                        return Some(v1073);
                    }
                }
                &Opcode::Istore16 => {
                    let v1064 = C::unpack_value_array_2(ctx, v1061);
                    let v1067 = C::value_type(ctx, v1064.1);
                    let v1068 = C::ty_addr64(ctx, v1067);
                    if let Some(v1069) = v1068 {
                        let v1070 = C::put_in_reg(ctx, v1064.1);
                        let v1072 = C::put_in_reg(ctx, v1064.0);
                        let v1075 =
                            constructor_gen_store(ctx, v1070, v1063, &StoreOP::Sh, v1062, v1072);
                        // Rule at src/isa/riscv64/lower.isle line 1101.
                        return Some(v1075);
                    }
                }
                &Opcode::Istore32 => {
                    let v1064 = C::unpack_value_array_2(ctx, v1061);
                    let v1067 = C::value_type(ctx, v1064.1);
                    let v1068 = C::ty_addr64(ctx, v1067);
                    if let Some(v1069) = v1068 {
                        let v1070 = C::put_in_reg(ctx, v1064.1);
                        let v1072 = C::put_in_reg(ctx, v1064.0);
                        let v1077 =
                            constructor_gen_store(ctx, v1070, v1063, &StoreOP::Sw, v1062, v1072);
                        // Rule at src/isa/riscv64/lower.isle line 1106.
                        return Some(v1077);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v810,
            args: ref v811,
            flags: v812,
        } => {
            if let &Opcode::AtomicStore = v810 {
                let v813 = C::unpack_value_array_2(ctx, v811);
                let v816 = C::value_type(ctx, v813.0);
                let v817 = C::valid_atomic_transaction(ctx, v816);
                if let Some(v818) = v817 {
                    let v819 = C::put_in_reg(ctx, v813.1);
                    let v820 = C::put_in_reg(ctx, v813.0);
                    let v821 = constructor_gen_atomic_store(ctx, v819, v818, v820);
                    // Rule at src/isa/riscv64/lower.isle line 794.
                    return Some(v821);
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v746,
            args: ref v747,
        } => {
            match v746 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v200 = C::fits_in_64(ctx, v3);
                        if let Some(v201) = v200 {
                            let v748 = C::unpack_value_array_3(ctx, v747);
                            let v915 = C::def_inst(ctx, v748.0);
                            if let Some(v916) = v915 {
                                let v917 = &C::inst_data(ctx, v916);
                                if let &InstructionData::IntCompare {
                                    opcode: ref v918,
                                    args: ref v919,
                                    cond: ref v920,
                                } = v917
                                {
                                    if let &Opcode::Icmp = v918 {
                                        let v921 = C::unpack_value_array_2(ctx, v919);
                                        let v924 = C::value_type(ctx, v921.1);
                                        let v925 = C::fits_in_64(ctx, v924);
                                        if let Some(v926) = v925 {
                                            let v927 = C::put_in_regs(ctx, v921.0);
                                            let v928 = &C::intcc_to_extend_op(ctx, v920);
                                            let v929 = constructor_normalize_cmp_value(
                                                ctx, v926, v927, v928,
                                            );
                                            let v930 = constructor_truthy_to_reg(ctx, v926, v929);
                                            let v931 = C::put_in_regs(ctx, v921.1);
                                            let v932 = &C::intcc_to_extend_op(ctx, v920);
                                            let v933 = constructor_normalize_cmp_value(
                                                ctx, v926, v931, v932,
                                            );
                                            let v934 = constructor_truthy_to_reg(ctx, v926, v933);
                                            let v935 = C::put_in_reg(ctx, v748.1);
                                            let v936 = C::put_in_reg(ctx, v748.2);
                                            let v937 = C::gen_select_reg(
                                                ctx, v920, v930, v934, v935, v936,
                                            );
                                            let v938 = constructor_output_reg(ctx, v937);
                                            // Rule at src/isa/riscv64/lower.isle line 933.
                                            return Some(v938);
                                        }
                                    }
                                }
                            }
                        }
                        let v748 = C::unpack_value_array_3(ctx, v747);
                        let v907 = C::put_in_regs(ctx, v748.0);
                        let v906 = C::value_type(ctx, v748.0);
                        let v908 =
                            constructor_normalize_cmp_value(ctx, v906, v907, &ExtendOp::Zero);
                        let v909 = constructor_truthy_to_reg(ctx, v906, v908);
                        let v911 = C::put_in_regs(ctx, v748.1);
                        let v912 = C::put_in_regs(ctx, v748.2);
                        let v910 = C::xreg_to_reg(ctx, v909);
                        let v913 = constructor_gen_select(ctx, v3, v910, v911, v912);
                        let v914 = C::output(ctx, v913);
                        // Rule at src/isa/riscv64/lower.isle line 930.
                        return Some(v914);
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v748 = C::unpack_value_array_3(ctx, v747);
                        let v907 = C::put_in_regs(ctx, v748.0);
                        let v1167 = C::value_type(ctx, v748.1);
                        let v906 = C::value_type(ctx, v748.0);
                        let v1168 = constructor_lower_bmask(ctx, v1167, v906, v907);
                        let v1169 = C::put_in_regs(ctx, v748.1);
                        let v1170 = constructor_gen_and(ctx, v1167, v1169, v1168);
                        let v912 = C::put_in_regs(ctx, v748.2);
                        let v1171 = constructor_gen_bnot(ctx, v1167, v1168);
                        let v1172 = constructor_gen_and(ctx, v1167, v912, v1171);
                        let v1173 = constructor_gen_or(ctx, v1167, v1170, v1172);
                        let v1174 = C::output(ctx, v1173);
                        // Rule at src/isa/riscv64/lower.isle line 1219.
                        return Some(v1174);
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v748 = C::unpack_value_array_3(ctx, v747);
                            let v948 = constructor_put_in_vreg(ctx, v748.0);
                            let v949 = constructor_put_in_vreg(ctx, v748.1);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v950 = constructor_rv_vand_vv(ctx, v948, v949, v19, v20);
                            let v951 = constructor_put_in_vreg(ctx, v748.0);
                            let v952 = constructor_rv_vnot_v(ctx, v951, v19, v20);
                            let v953 = constructor_put_in_vreg(ctx, v748.2);
                            let v954 = constructor_rv_vand_vv(ctx, v952, v953, v19, v20);
                            let v955 = constructor_rv_vor_vv(ctx, v950, v954, v19, v20);
                            let v956 = constructor_output_vreg(ctx, v955);
                            // Rule at src/isa/riscv64/lower.isle line 953.
                            return Some(v956);
                        }
                        let v40 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v41) = v40 {
                            let v748 = C::unpack_value_array_3(ctx, v747);
                            let v939 = constructor_put_in_xreg(ctx, v748.0);
                            let v940 = constructor_put_in_xreg(ctx, v748.1);
                            let v941 = constructor_rv_and(ctx, v939, v940);
                            let v942 = constructor_put_in_xreg(ctx, v748.0);
                            let v943 = constructor_rv_not(ctx, v942);
                            let v944 = constructor_put_in_xreg(ctx, v748.2);
                            let v945 = constructor_rv_and(ctx, v943, v944);
                            let v946 = constructor_rv_or(ctx, v941, v945);
                            let v947 = constructor_output_xreg(ctx, v946);
                            // Rule at src/isa/riscv64/lower.isle line 942.
                            return Some(v947);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v748 = C::unpack_value_array_3(ctx, v747);
                        let v752 = constructor_put_in_freg(ctx, v748.0);
                        let v753 = constructor_put_in_freg(ctx, v748.1);
                        let v754 = constructor_put_in_freg(ctx, v748.2);
                        let v3 = C::value_type(ctx, v2);
                        let v755 = constructor_rv_fmadd(ctx, v3, v752, v753, v754);
                        let v756 = constructor_output_freg(ctx, v755);
                        // Rule at src/isa/riscv64/lower.isle line 720.
                        return Some(v756);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1217,
            args: ref v1218,
            imm: v1219,
        } => {
            if let &Opcode::Insertlane = v1217 {
                let v1220 = C::unpack_value_array_2(ctx, v1218);
                let v1223 = C::value_type(ctx, v1220.0);
                let v1224 = C::ty_vec_fits_in_register(ctx, v1223);
                if let Some(v1225) = v1224 {
                    let v1244 = C::def_inst(ctx, v1220.1);
                    if let Some(v1245) = v1244 {
                        let v1246 = &C::inst_data(ctx, v1245);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v1247,
                            imm: v1248,
                        } = v1246
                        {
                            if let &Opcode::Iconst = v1247 {
                                let v1249 = C::u64_from_imm64(ctx, v1248);
                                let v1250 = C::imm5_from_u64(ctx, v1249);
                                if let Some(v1251) = v1250 {
                                    let v1229 = C::u8_from_uimm8(ctx, v1219);
                                    let v1231 = C::u8_as_u64(ctx, v1229);
                                    let v1232 = C::u64_shl(ctx, 0x1, v1231);
                                    let v1233 = constructor_gen_vec_mask(ctx, v1232);
                                    let v1234 = constructor_put_in_vreg(ctx, v1220.0);
                                    let v1236 = C::vstate_from_type(ctx, v1225);
                                    let v1252 =
                                        constructor_rv_vmerge_vim(ctx, v1234, v1251, v1233, v1236);
                                    let v1253 = constructor_output_vreg(ctx, v1252);
                                    // Rule at src/isa/riscv64/lower.isle line 1290.
                                    return Some(v1253);
                                }
                            }
                        }
                    }
                    let v1226 = C::value_type(ctx, v1220.1);
                    let v1239 = C::ty_scalar_float(ctx, v1226);
                    if let Some(v1240) = v1239 {
                        let v1229 = C::u8_from_uimm8(ctx, v1219);
                        let v1231 = C::u8_as_u64(ctx, v1229);
                        let v1232 = C::u64_shl(ctx, 0x1, v1231);
                        let v1233 = constructor_gen_vec_mask(ctx, v1232);
                        let v1234 = constructor_put_in_vreg(ctx, v1220.0);
                        let v1241 = constructor_put_in_freg(ctx, v1220.1);
                        let v1236 = C::vstate_from_type(ctx, v1225);
                        let v1242 = constructor_rv_vfmerge_vfm(ctx, v1234, v1241, v1233, v1236);
                        let v1243 = constructor_output_vreg(ctx, v1242);
                        // Rule at src/isa/riscv64/lower.isle line 1282.
                        return Some(v1243);
                    }
                    let v1227 = C::ty_int(ctx, v1226);
                    if let Some(v1228) = v1227 {
                        let v1229 = C::u8_from_uimm8(ctx, v1219);
                        let v1231 = C::u8_as_u64(ctx, v1229);
                        let v1232 = C::u64_shl(ctx, 0x1, v1231);
                        let v1233 = constructor_gen_vec_mask(ctx, v1232);
                        let v1234 = constructor_put_in_vreg(ctx, v1220.0);
                        let v1235 = constructor_put_in_xreg(ctx, v1220.1);
                        let v1236 = C::vstate_from_type(ctx, v1225);
                        let v1237 = constructor_rv_vmerge_vxm(ctx, v1234, v1235, v1233, v1236);
                        let v1238 = constructor_output_vreg(ctx, v1237);
                        // Rule at src/isa/riscv64/lower.isle line 1275.
                        return Some(v1238);
                    }
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1019,
            code: ref v1020,
        } => {
            match v1019 {
                &Opcode::Trap => {
                    let v1021 = constructor_udf(ctx, v1020);
                    // Rule at src/isa/riscv64/lower.isle line 1045.
                    return Some(v1021);
                }
                &Opcode::ResumableTrap => {
                    let v1021 = constructor_udf(ctx, v1020);
                    // Rule at src/isa/riscv64/lower.isle line 1050.
                    return Some(v1021);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v237,
            arg: v238,
        } => {
            match v237 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v490 = C::def_inst(ctx, v238);
                        if let Some(v491) = v490 {
                            let v495 = &C::inst_data(ctx, v491);
                            if let &InstructionData::UnaryImm {
                                opcode: ref v1263,
                                imm: v1264,
                            } = v495
                            {
                                if let &Opcode::Iconst = v1263 {
                                    let v1265 = C::u64_from_imm64(ctx, v1264);
                                    let v1266 = C::imm5_from_u64(ctx, v1265);
                                    if let Some(v1267) = v1266 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1256 = C::vstate_from_type(ctx, v3);
                                        let v1268 = constructor_rv_vmv_vi(ctx, v1267, v1256);
                                        let v1269 = constructor_output_vreg(ctx, v1268);
                                        // Rule at src/isa/riscv64/lower.isle line 1304.
                                        return Some(v1269);
                                    }
                                }
                            }
                        }
                        let v483 = C::value_type(ctx, v238);
                        let v1259 = C::ty_int_ref_scalar_64_extract(ctx, v483);
                        if let Some(v1260) = v1259 {
                            let v474 = constructor_put_in_xreg(ctx, v238);
                            let v3 = C::value_type(ctx, v2);
                            let v1256 = C::vstate_from_type(ctx, v3);
                            let v1261 = constructor_rv_vmv_vx(ctx, v474, v1256);
                            let v1262 = constructor_output_vreg(ctx, v1261);
                            // Rule at src/isa/riscv64/lower.isle line 1301.
                            return Some(v1262);
                        }
                        let v1254 = C::ty_scalar_float(ctx, v483);
                        if let Some(v1255) = v1254 {
                            let v737 = constructor_put_in_freg(ctx, v238);
                            let v3 = C::value_type(ctx, v2);
                            let v1256 = C::vstate_from_type(ctx, v3);
                            let v1257 = constructor_rv_vfmv_vf(ctx, v737, v1256);
                            let v1258 = constructor_output_vreg(ctx, v1257);
                            // Rule at src/isa/riscv64/lower.isle line 1298.
                            return Some(v1258);
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v483 = C::value_type(ctx, v238);
                    let v1298 = C::ty_vec_fits_in_register(ctx, v483);
                    if let Some(v1299) = v1298 {
                        let v242 = constructor_put_in_vreg(ctx, v238);
                        let v1305 = constructor_put_in_vreg(ctx, v238);
                        let v19 = &constructor_unmasked(ctx);
                        let v1303 = C::vstate_from_type(ctx, v1299);
                        let v1309 = constructor_rv_vredmaxu_vs(ctx, v242, v1305, v19, v1303);
                        let v1310 = constructor_rv_vmv_xs(ctx, v1309, v1303);
                        let v1311 = constructor_rv_snez(ctx, v1310);
                        let v1312 = constructor_output_xreg(ctx, v1311);
                        // Rule at src/isa/riscv64/lower.isle line 1385.
                        return Some(v1312);
                    }
                }
                &Opcode::VallTrue => {
                    let v483 = C::value_type(ctx, v238);
                    let v1298 = C::ty_vec_fits_in_register(ctx, v483);
                    if let Some(v1299) = v1298 {
                        let v1301 = C::imm5_from_i8(ctx, 0x1);
                        if let Some(v1302) = v1301 {
                            let v1303 = C::vstate_from_type(ctx, v1299);
                            let v1304 = constructor_rv_vmv_vi(ctx, v1302, v1303);
                            let v1305 = constructor_put_in_vreg(ctx, v238);
                            let v19 = &constructor_unmasked(ctx);
                            let v1306 = constructor_rv_vredminu_vs(ctx, v1305, v1304, v19, v1303);
                            let v1307 = constructor_rv_vmv_xs(ctx, v1306, v1303);
                            let v1308 = constructor_output_xreg(ctx, v1307);
                            // Rule at src/isa/riscv64/lower.isle line 1371.
                            return Some(v1308);
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v483 = C::value_type(ctx, v238);
                    let v1298 = C::ty_vec_fits_in_register(ctx, v483);
                    if let Some(v1299) = v1298 {
                        let v242 = constructor_put_in_vreg(ctx, v238);
                        let v1313 = C::zero_reg(ctx);
                        let v1314 = C::xreg_new(ctx, v1313);
                        let v19 = &constructor_unmasked(ctx);
                        let v1303 = C::vstate_from_type(ctx, v1299);
                        let v1315 = constructor_rv_vmslt_vx(ctx, v242, v1314, v19, v1303);
                        let v1317 = C::vstate_from_type(ctx, I64X2);
                        let v1318 = constructor_rv_vmv_xs(ctx, v1315, v1317);
                        let v1319 = C::ty_lane_mask(ctx, v1299);
                        let v1320 = constructor_gen_andi(ctx, v1318, v1319);
                        let v1321 = constructor_output_xreg(ctx, v1320);
                        // Rule at src/isa/riscv64/lower.isle line 1401.
                        return Some(v1321);
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v242 = constructor_put_in_vreg(ctx, v238);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v243 = constructor_rv_vneg_v(ctx, v242, v19, v20);
                            let v244 = constructor_output_vreg(ctx, v243);
                            // Rule at src/isa/riscv64/lower.isle line 165.
                            return Some(v244);
                        }
                        let v235 = C::ty_int(ctx, v3);
                        if let Some(v236) = v235 {
                            let v239 = C::put_in_regs(ctx, v238);
                            let v240 = constructor_neg(ctx, v236, v239);
                            let v241 = C::output(ctx, v240);
                            // Rule at src/isa/riscv64/lower.isle line 162.
                            return Some(v241);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v200 = C::fits_in_64(ctx, v3);
                        if let Some(v201) = v200 {
                            let v474 = constructor_put_in_xreg(ctx, v238);
                            let v1189 = constructor_lower_iabs(ctx, v201, v474);
                            let v1190 = constructor_output_xreg(ctx, v1189);
                            // Rule at src/isa/riscv64/lower.isle line 1254.
                            return Some(v1190);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v242 = constructor_put_in_vreg(ctx, v238);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v455 = constructor_rv_vnot_v(ctx, v242, v19, v20);
                            let v456 = constructor_output_vreg(ctx, v455);
                            // Rule at src/isa/riscv64/lower.isle line 435.
                            return Some(v456);
                        }
                        let v451 = C::ty_scalar(ctx, v3);
                        if let Some(v452) = v451 {
                            let v239 = C::put_in_regs(ctx, v238);
                            let v453 = constructor_gen_bnot(ctx, v452, v239);
                            let v454 = C::output(ctx, v453);
                            // Rule at src/isa/riscv64/lower.isle line 432.
                            return Some(v454);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v239 = C::put_in_regs(ctx, v238);
                            let v460 = C::value_regs_get(ctx, v239, 0x0);
                            let v461 = constructor_lower_bit_reverse(ctx, v460, I64);
                            let v462 = C::xreg_new(ctx, v461);
                            let v463 = C::value_regs_get(ctx, v239, 0x1);
                            let v464 = constructor_lower_bit_reverse(ctx, v463, I64);
                            let v465 = C::xreg_new(ctx, v464);
                            let v466 = C::xreg_to_reg(ctx, v465);
                            let v467 = C::xreg_to_reg(ctx, v462);
                            let v468 = C::value_regs(ctx, v466, v467);
                            let v469 = C::output(ctx, v468);
                            // Rule at src/isa/riscv64/lower.isle line 442.
                            return Some(v469);
                        }
                        let v200 = C::fits_in_64(ctx, v3);
                        if let Some(v201) = v200 {
                            let v333 = C::ty_int(ctx, v201);
                            if let Some(v334) = v333 {
                                let v457 = C::put_in_reg(ctx, v238);
                                let v458 = constructor_lower_bit_reverse(ctx, v457, v334);
                                let v459 = constructor_output_reg(ctx, v458);
                                // Rule at src/isa/riscv64/lower.isle line 439.
                                return Some(v459);
                            }
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v239 = C::put_in_regs(ctx, v238);
                            let v477 = constructor_lower_clz_i128(ctx, v239);
                            let v478 = C::output(ctx, v477);
                            // Rule at src/isa/riscv64/lower.isle line 460.
                            return Some(v478);
                        }
                        let v200 = C::fits_in_64(ctx, v3);
                        if let Some(v201) = v200 {
                            let v474 = constructor_put_in_xreg(ctx, v238);
                            let v475 = constructor_lower_clz(ctx, v201, v474);
                            let v476 = constructor_output_xreg(ctx, v475);
                            // Rule at src/isa/riscv64/lower.isle line 457.
                            return Some(v476);
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v239 = C::put_in_regs(ctx, v238);
                            let v481 = constructor_lower_cls_i128(ctx, v239);
                            let v482 = C::output(ctx, v481);
                            // Rule at src/isa/riscv64/lower.isle line 467.
                            return Some(v482);
                        }
                        let v200 = C::fits_in_64(ctx, v3);
                        if let Some(v201) = v200 {
                            let v474 = constructor_put_in_xreg(ctx, v238);
                            let v479 = constructor_lower_cls(ctx, v201, v474);
                            let v480 = constructor_output_xreg(ctx, v479);
                            // Rule at src/isa/riscv64/lower.isle line 464.
                            return Some(v480);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v239 = C::put_in_regs(ctx, v238);
                            let v472 = constructor_lower_ctz_128(ctx, v239);
                            let v473 = C::output(ctx, v472);
                            // Rule at src/isa/riscv64/lower.isle line 453.
                            return Some(v473);
                        }
                        let v200 = C::fits_in_64(ctx, v3);
                        if let Some(v201) = v200 {
                            let v457 = C::put_in_reg(ctx, v238);
                            let v470 = constructor_lower_ctz(ctx, v201, v457);
                            let v471 = constructor_output_reg(ctx, v470);
                            // Rule at src/isa/riscv64/lower.isle line 450.
                            return Some(v471);
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v239 = C::put_in_regs(ctx, v238);
                            let v545 = constructor_lower_popcnt_i128(ctx, v239);
                            let v546 = C::output(ctx, v545);
                            // Rule at src/isa/riscv64/lower.isle line 514.
                            return Some(v546);
                        }
                        let v200 = C::fits_in_64(ctx, v3);
                        if let Some(v201) = v200 {
                            let v474 = constructor_put_in_xreg(ctx, v238);
                            let v543 = constructor_lower_popcnt(ctx, v474, v201);
                            let v544 = constructor_output_xreg(ctx, v543);
                            // Rule at src/isa/riscv64/lower.isle line 512.
                            return Some(v544);
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v242 = constructor_put_in_vreg(ctx, v238);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v759 = constructor_rv_vfsqrt_v(ctx, v242, v19, v20);
                            let v760 = constructor_output_vreg(ctx, v759);
                            // Rule at src/isa/riscv64/lower.isle line 728.
                            return Some(v760);
                        }
                        let v339 = C::ty_scalar_float(ctx, v3);
                        if let Some(v340) = v339 {
                            let v737 = constructor_put_in_freg(ctx, v238);
                            let v757 = constructor_rv_fsqrt(ctx, v340, v737);
                            let v758 = constructor_output_freg(ctx, v757);
                            // Rule at src/isa/riscv64/lower.isle line 725.
                            return Some(v758);
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v242 = constructor_put_in_vreg(ctx, v238);
                            let v19 = &constructor_unmasked(ctx);
                            let v20 = C::vstate_from_type(ctx, v11);
                            let v742 = constructor_rv_vfneg_v(ctx, v242, v19, v20);
                            let v743 = constructor_output_vreg(ctx, v742);
                            // Rule at src/isa/riscv64/lower.isle line 712.
                            return Some(v743);
                        }
                        let v339 = C::ty_scalar_float(ctx, v3);
                        if let Some(v340) = v339 {
                            let v737 = constructor_put_in_freg(ctx, v238);
                            let v740 = constructor_rv_fneg(ctx, v340, v737);
                            let v741 = constructor_output_freg(ctx, v740);
                            // Rule at src/isa/riscv64/lower.isle line 709.
                            return Some(v741);
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v737 = constructor_put_in_freg(ctx, v238);
                        let v3 = C::value_type(ctx, v2);
                        let v738 = constructor_rv_fabs(ctx, v3, v737);
                        let v739 = constructor_output_freg(ctx, v738);
                        // Rule at src/isa/riscv64/lower.isle line 705.
                        return Some(v739);
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v457 = C::put_in_reg(ctx, v238);
                        let v3 = C::value_type(ctx, v2);
                        let v1156 = constructor_gen_float_round(ctx, &FloatRoundOP::Ceil, v457, v3);
                        let v1157 = constructor_output_reg(ctx, v1156);
                        // Rule at src/isa/riscv64/lower.isle line 1193.
                        return Some(v1157);
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v457 = C::put_in_reg(ctx, v238);
                        let v3 = C::value_type(ctx, v2);
                        let v1159 =
                            constructor_gen_float_round(ctx, &FloatRoundOP::Floor, v457, v3);
                        let v1160 = constructor_output_reg(ctx, v1159);
                        // Rule at src/isa/riscv64/lower.isle line 1199.
                        return Some(v1160);
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v457 = C::put_in_reg(ctx, v238);
                        let v3 = C::value_type(ctx, v2);
                        let v1162 =
                            constructor_gen_float_round(ctx, &FloatRoundOP::Trunc, v457, v3);
                        let v1163 = constructor_output_reg(ctx, v1162);
                        // Rule at src/isa/riscv64/lower.isle line 1203.
                        return Some(v1163);
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v457 = C::put_in_reg(ctx, v238);
                        let v3 = C::value_type(ctx, v2);
                        let v1165 =
                            constructor_gen_float_round(ctx, &FloatRoundOP::Nearest, v457, v3);
                        let v1166 = constructor_output_reg(ctx, v1165);
                        // Rule at src/isa/riscv64/lower.isle line 1208.
                        return Some(v1166);
                    }
                }
                &Opcode::IsNull => {
                    let v474 = constructor_put_in_xreg(ctx, v238);
                    let v899 = constructor_rv_seqz(ctx, v474);
                    let v900 = constructor_output_xreg(ctx, v899);
                    // Rule at src/isa/riscv64/lower.isle line 919.
                    return Some(v900);
                }
                &Opcode::IsInvalid => {
                    let v474 = constructor_put_in_xreg(ctx, v238);
                    let v902 = C::imm12_const(ctx, 0x1);
                    let v903 = constructor_rv_addi(ctx, v474, v902);
                    let v904 = constructor_rv_seqz(ctx, v903);
                    let v905 = constructor_output_xreg(ctx, v904);
                    // Rule at src/isa/riscv64/lower.isle line 925.
                    return Some(v905);
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v239 = C::put_in_regs(ctx, v238);
                        let v3 = C::value_type(ctx, v2);
                        let v483 = C::value_type(ctx, v238);
                        let v1175 = constructor_lower_bmask(ctx, v3, v483, v239);
                        let v1176 = C::output(ctx, v1175);
                        // Rule at src/isa/riscv64/lower.isle line 1233.
                        return Some(v1176);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v239 = C::put_in_regs(ctx, v238);
                        let v460 = C::value_regs_get(ctx, v239, 0x0);
                        let v844 = constructor_output_reg(ctx, v460);
                        // Rule at src/isa/riscv64/lower.isle line 823.
                        return Some(v844);
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v239 = C::put_in_regs(ctx, v238);
                        let v483 = C::value_type(ctx, v238);
                        let v3 = C::value_type(ctx, v2);
                        let v485 = constructor_extend(ctx, v239, &ExtendOp::Zero, v483, v3);
                        let v486 = C::output(ctx, v485);
                        // Rule at src/isa/riscv64/lower.isle line 471.
                        return Some(v486);
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v490 = C::def_inst(ctx, v238);
                            if let Some(v491) = v490 {
                                let v492 = C::first_result(ctx, v491);
                                if let Some(v493) = v492 {
                                    let v494 = C::value_type(ctx, v493);
                                    if v494 == I32 {
                                        let v495 = &C::inst_data(ctx, v491);
                                        if let &InstructionData::Binary {
                                            opcode: ref v496,
                                            args: ref v497,
                                        } = v495
                                        {
                                            match v496 {
                                                &Opcode::Iadd => {
                                                    let v498 = C::unpack_value_array_2(ctx, v497);
                                                    let v526 = C::def_inst(ctx, v498.0);
                                                    if let Some(v527) = v526 {
                                                        let v528 = &C::inst_data(ctx, v527);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v529,
                                                            imm: v530,
                                                        } = v528
                                                        {
                                                            if let &Opcode::Iconst = v529 {
                                                                let v531 =
                                                                    C::u64_from_imm64(ctx, v530);
                                                                let v532 =
                                                                    C::imm12_from_u64(ctx, v531);
                                                                if let Some(v533) = v532 {
                                                                    let v534 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v498.1,
                                                                        );
                                                                    let v535 = constructor_rv_addiw(
                                                                        ctx, v534, v533,
                                                                    );
                                                                    let v536 =
                                                                        constructor_output_xreg(
                                                                            ctx, v535,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 499.
                                                                    return Some(v536);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v516 = C::def_inst(ctx, v498.1);
                                                    if let Some(v517) = v516 {
                                                        let v518 = &C::inst_data(ctx, v517);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v519,
                                                            imm: v520,
                                                        } = v518
                                                        {
                                                            if let &Opcode::Iconst = v519 {
                                                                let v521 =
                                                                    C::u64_from_imm64(ctx, v520);
                                                                let v522 =
                                                                    C::imm12_from_u64(ctx, v521);
                                                                if let Some(v523) = v522 {
                                                                    let v501 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v498.0,
                                                                        );
                                                                    let v524 = constructor_rv_addiw(
                                                                        ctx, v501, v523,
                                                                    );
                                                                    let v525 =
                                                                        constructor_output_xreg(
                                                                            ctx, v524,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 496.
                                                                    return Some(v525);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v501 = constructor_put_in_xreg(ctx, v498.0);
                                                    let v502 = constructor_put_in_xreg(ctx, v498.1);
                                                    let v503 = constructor_rv_addw(ctx, v501, v502);
                                                    let v504 = constructor_output_xreg(ctx, v503);
                                                    // Rule at src/isa/riscv64/lower.isle line 480.
                                                    return Some(v504);
                                                }
                                                &Opcode::Isub => {
                                                    let v498 = C::unpack_value_array_2(ctx, v497);
                                                    let v501 = constructor_put_in_xreg(ctx, v498.0);
                                                    let v502 = constructor_put_in_xreg(ctx, v498.1);
                                                    let v505 = constructor_rv_subw(ctx, v501, v502);
                                                    let v506 = constructor_output_xreg(ctx, v505);
                                                    // Rule at src/isa/riscv64/lower.isle line 483.
                                                    return Some(v506);
                                                }
                                                &Opcode::Ishl => {
                                                    let v498 = C::unpack_value_array_2(ctx, v497);
                                                    let v516 = C::def_inst(ctx, v498.1);
                                                    if let Some(v517) = v516 {
                                                        let v518 = &C::inst_data(ctx, v517);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v519,
                                                            imm: v520,
                                                        } = v518
                                                        {
                                                            if let &Opcode::Iconst = v519 {
                                                                let v521 =
                                                                    C::u64_from_imm64(ctx, v520);
                                                                let v522 =
                                                                    C::imm12_from_u64(ctx, v521);
                                                                if let Some(v523) = v522 {
                                                                    let v501 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v498.0,
                                                                        );
                                                                    let v537 = constructor_rv_slliw(
                                                                        ctx, v501, v523,
                                                                    );
                                                                    let v538 =
                                                                        constructor_output_xreg(
                                                                            ctx, v537,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 502.
                                                                    return Some(v538);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v501 = constructor_put_in_xreg(ctx, v498.0);
                                                    let v507 = C::put_in_regs(ctx, v498.1);
                                                    let v508 = C::value_regs_get(ctx, v507, 0x0);
                                                    let v509 = C::xreg_new(ctx, v508);
                                                    let v510 = constructor_rv_sllw(ctx, v501, v509);
                                                    let v511 = constructor_output_xreg(ctx, v510);
                                                    // Rule at src/isa/riscv64/lower.isle line 486.
                                                    return Some(v511);
                                                }
                                                &Opcode::Ushr => {
                                                    let v498 = C::unpack_value_array_2(ctx, v497);
                                                    let v516 = C::def_inst(ctx, v498.1);
                                                    if let Some(v517) = v516 {
                                                        let v518 = &C::inst_data(ctx, v517);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v519,
                                                            imm: v520,
                                                        } = v518
                                                        {
                                                            if let &Opcode::Iconst = v519 {
                                                                let v521 =
                                                                    C::u64_from_imm64(ctx, v520);
                                                                let v522 =
                                                                    C::imm12_from_u64(ctx, v521);
                                                                if let Some(v523) = v522 {
                                                                    let v501 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v498.0,
                                                                        );
                                                                    let v539 = constructor_rv_srliw(
                                                                        ctx, v501, v523,
                                                                    );
                                                                    let v540 =
                                                                        constructor_output_xreg(
                                                                            ctx, v539,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 505.
                                                                    return Some(v540);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v501 = constructor_put_in_xreg(ctx, v498.0);
                                                    let v507 = C::put_in_regs(ctx, v498.1);
                                                    let v508 = C::value_regs_get(ctx, v507, 0x0);
                                                    let v509 = C::xreg_new(ctx, v508);
                                                    let v512 = constructor_rv_srlw(ctx, v501, v509);
                                                    let v513 = constructor_output_xreg(ctx, v512);
                                                    // Rule at src/isa/riscv64/lower.isle line 489.
                                                    return Some(v513);
                                                }
                                                &Opcode::Sshr => {
                                                    let v498 = C::unpack_value_array_2(ctx, v497);
                                                    let v516 = C::def_inst(ctx, v498.1);
                                                    if let Some(v517) = v516 {
                                                        let v518 = &C::inst_data(ctx, v517);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v519,
                                                            imm: v520,
                                                        } = v518
                                                        {
                                                            if let &Opcode::Iconst = v519 {
                                                                let v521 =
                                                                    C::u64_from_imm64(ctx, v520);
                                                                let v522 =
                                                                    C::imm12_from_u64(ctx, v521);
                                                                if let Some(v523) = v522 {
                                                                    let v501 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v498.0,
                                                                        );
                                                                    let v541 = constructor_rv_sraiw(
                                                                        ctx, v501, v523,
                                                                    );
                                                                    let v542 =
                                                                        constructor_output_xreg(
                                                                            ctx, v541,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 508.
                                                                    return Some(v542);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v501 = constructor_put_in_xreg(ctx, v498.0);
                                                    let v507 = C::put_in_regs(ctx, v498.1);
                                                    let v508 = C::value_regs_get(ctx, v507, 0x0);
                                                    let v509 = C::xreg_new(ctx, v508);
                                                    let v514 = constructor_rv_sraw(ctx, v501, v509);
                                                    let v515 = constructor_output_xreg(ctx, v514);
                                                    // Rule at src/isa/riscv64/lower.isle line 492.
                                                    return Some(v515);
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v239 = C::put_in_regs(ctx, v238);
                        let v483 = C::value_type(ctx, v238);
                        let v488 = constructor_extend(ctx, v239, &ExtendOp::Signed, v483, v3);
                        let v489 = C::output(ctx, v488);
                        // Rule at src/isa/riscv64/lower.isle line 475.
                        return Some(v489);
                    }
                }
                &Opcode::Fpromote => {
                    let v737 = constructor_put_in_freg(ctx, v238);
                    let v845 = constructor_rv_fcvtds(ctx, v737);
                    let v846 = constructor_output_freg(ctx, v845);
                    // Rule at src/isa/riscv64/lower.isle line 827.
                    return Some(v846);
                }
                &Opcode::Fdemote => {
                    let v737 = constructor_put_in_freg(ctx, v238);
                    let v847 = constructor_rv_fcvtsd(ctx, v737);
                    let v848 = constructor_output_freg(ctx, v847);
                    // Rule at src/isa/riscv64/lower.isle line 831.
                    return Some(v848);
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v737 = constructor_put_in_freg(ctx, v238);
                        let v483 = C::value_type(ctx, v238);
                        let v3 = C::value_type(ctx, v2);
                        let v1124 = constructor_gen_fcvt_int(ctx, false, v737, false, v483, v3);
                        let v1125 = constructor_output_xreg(ctx, v1124);
                        // Rule at src/isa/riscv64/lower.isle line 1149.
                        return Some(v1125);
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v737 = constructor_put_in_freg(ctx, v238);
                        let v483 = C::value_type(ctx, v238);
                        let v3 = C::value_type(ctx, v2);
                        let v1126 = constructor_gen_fcvt_int(ctx, false, v737, true, v483, v3);
                        let v1127 = constructor_output_xreg(ctx, v1126);
                        // Rule at src/isa/riscv64/lower.isle line 1154.
                        return Some(v1127);
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v737 = constructor_put_in_freg(ctx, v238);
                        let v483 = C::value_type(ctx, v238);
                        let v3 = C::value_type(ctx, v2);
                        let v1130 = constructor_gen_fcvt_int(ctx, true, v737, false, v483, v3);
                        let v1131 = constructor_output_xreg(ctx, v1130);
                        // Rule at src/isa/riscv64/lower.isle line 1164.
                        return Some(v1131);
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v737 = constructor_put_in_freg(ctx, v238);
                        let v483 = C::value_type(ctx, v238);
                        let v3 = C::value_type(ctx, v2);
                        let v1128 = constructor_gen_fcvt_int(ctx, true, v737, true, v483, v3);
                        let v1129 = constructor_output_xreg(ctx, v1128);
                        // Rule at src/isa/riscv64/lower.isle line 1159.
                        return Some(v1129);
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v483 = C::value_type(ctx, v238);
                        let v3 = C::value_type(ctx, v2);
                        let v1138 = &C::int_convert_2_float_op(ctx, v483, false, v3);
                        let v1133 = constructor_put_in_xreg(ctx, v238);
                        let v1139 =
                            constructor_normalize_fcvt_from_int(ctx, v1133, v483, &ExtendOp::Zero);
                        let v1140 = C::xreg_to_reg(ctx, v1139);
                        let v1141 = constructor_fpu_rr(ctx, v1138, v3, v1140);
                        let v1142 = constructor_output_reg(ctx, v1141);
                        // Rule at src/isa/riscv64/lower.isle line 1176.
                        return Some(v1142);
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v483 = C::value_type(ctx, v238);
                        let v3 = C::value_type(ctx, v2);
                        let v1132 = &C::int_convert_2_float_op(ctx, v483, true, v3);
                        let v1133 = constructor_put_in_xreg(ctx, v238);
                        let v1134 = constructor_normalize_fcvt_from_int(
                            ctx,
                            v1133,
                            v483,
                            &ExtendOp::Signed,
                        );
                        let v1135 = C::xreg_to_reg(ctx, v1134);
                        let v1136 = constructor_fpu_rr(ctx, v1132, v3, v1135);
                        let v1137 = constructor_output_reg(ctx, v1136);
                        // Rule at src/isa/riscv64/lower.isle line 1169.
                        return Some(v1137);
                    }
                }
                &Opcode::Isplit => {
                    let v239 = C::put_in_regs(ctx, v238);
                    let v460 = C::value_regs_get(ctx, v239, 0x0);
                    let v957 = C::xreg_new(ctx, v460);
                    let v958 = C::put_in_regs(ctx, v238);
                    let v959 = C::value_regs_get(ctx, v958, 0x1);
                    let v960 = C::xreg_new(ctx, v959);
                    let v961 = C::xreg_to_reg(ctx, v957);
                    let v962 = C::value_reg(ctx, v961);
                    let v963 = C::xreg_to_reg(ctx, v960);
                    let v964 = C::value_reg(ctx, v963);
                    let v965 = C::output_pair(ctx, v962, v964);
                    // Rule at src/isa/riscv64/lower.isle line 961.
                    return Some(v965);
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v12,
            constant_handle: v13,
        } => {
            if let &Opcode::Vconst = v12 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v10 = C::ty_vec_fits_in_register(ctx, v3);
                    if let Some(v11) = v10 {
                        let v15 = C::const_to_vconst(ctx, v13);
                        let v16 = C::gen_const_amode(ctx, v15);
                        let v14 = &constructor_element_width_from_type(ctx, v11);
                        let v17 = VecAMode::UnitStride { base: v16 };
                        let v18 = C::mem_flags_trusted(ctx);
                        let v19 = &constructor_unmasked(ctx);
                        let v20 = C::vstate_from_type(ctx, v11);
                        let v21 = constructor_vec_load(ctx, v14, &v17, v18, v19, v20);
                        let v22 = constructor_output_reg(ctx, v21);
                        // Rule at src/isa/riscv64/lower.isle line 14.
                        return Some(v22);
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1143,
            global_value: v1144,
        } => {
            if let &Opcode::SymbolValue = v1143 {
                let v1145 = C::symbol_value_data(ctx, v1144);
                if let Some(v1146) = v1145 {
                    let v1150 = C::load_ext_name(ctx, v1146.0, v1146.2);
                    let v1151 = constructor_output_reg(ctx, v1150);
                    // Rule at src/isa/riscv64/lower.isle line 1183.
                    return Some(v1151);
                }
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v23,
            imm: v24,
        } => {
            if let &Opcode::F32const = v23 {
                let v25 = C::u32_from_ieee32(ctx, v24);
                let v27 = C::u32_as_u64(ctx, v25);
                let v28 = C::imm(ctx, F32, v27);
                let v29 = constructor_output_reg(ctx, v28);
                // Rule at src/isa/riscv64/lower.isle line 24.
                return Some(v29);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v30,
            imm: v31,
        } => {
            if let &Opcode::F64const = v30 {
                let v32 = C::u64_from_ieee64(ctx, v31);
                let v34 = C::imm(ctx, F64, v32);
                let v35 = constructor_output_reg(ctx, v34);
                // Rule at src/isa/riscv64/lower.isle line 29.
                return Some(v35);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = C::imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    // Rule at src/isa/riscv64/lower.isle line 9.
                    return Some(v9);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd.
pub fn constructor_match_shnadd<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            // Rule at src/isa/riscv64/lower.isle line 63.
            return Some(AluOPRRR::Sh1add);
        }
        0x2 => {
            // Rule at src/isa/riscv64/lower.isle line 64.
            return Some(AluOPRRR::Sh2add);
        }
        0x3 => {
            // Rule at src/isa/riscv64/lower.isle line 65.
            return Some(AluOPRRR::Sh3add);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd_uw.
pub fn constructor_match_shnadd_uw<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            // Rule at src/isa/riscv64/lower.isle line 85.
            return Some(AluOPRRR::Sh1adduw);
        }
        0x2 => {
            // Rule at src/isa/riscv64/lower.isle line 86.
            return Some(AluOPRRR::Sh2adduw);
        }
        0x3 => {
            // Rule at src/isa/riscv64/lower.isle line 87.
            return Some(AluOPRRR::Sh3adduw);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term gen_atomic_rmw_loop.
pub fn constructor_gen_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
    arg1: Type,
    arg2: XReg,
    arg3: XReg,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = constructor_gen_atomic_offset(ctx, arg2, arg1);
    let v9 = constructor_gen_atomic_p(ctx, arg2, arg1);
    let v7 = C::xreg_to_reg(ctx, v6);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v10 = C::xreg_to_reg(ctx, v9);
    let v11 = C::xreg_to_reg(ctx, arg3);
    let v12 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v13 = MInst::AtomicRmwLoop {
        offset: v7,
        op: arg0.clone(),
        dst: v8,
        ty: arg1,
        p: v10,
        x: v11,
        t0: v12,
    };
    let v14 = C::emit(ctx, &v13);
    let v15 = C::writable_reg_to_reg(ctx, v8);
    let v16 = C::xreg_new(ctx, v15);
    // Rule at src/isa/riscv64/lower.isle line 770.
    return v16;
}

// Generated as internal constructor for term gen_atomic_offset.
pub fn constructor_gen_atomic_offset<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, 0x3);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        let v7 = constructor_rv_slli(ctx, v6, v5);
        // Rule at src/isa/riscv64/lower.isle line 798.
        return v7;
    }
    let v8 = C::zero_reg(ctx);
    let v9 = C::xreg_new(ctx, v8);
    // Rule at src/isa/riscv64/lower.isle line 801.
    return v9;
}

// Generated as internal constructor for term gen_atomic_p.
pub fn constructor_gen_atomic_p<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, -0x4);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        // Rule at src/isa/riscv64/lower.isle line 805.
        return v6;
    }
    // Rule at src/isa/riscv64/lower.isle line 808.
    return arg0;
}

// Generated as internal constructor for term gen_icmp.
pub fn constructor_gen_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
    arg3: Type,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = MInst::Icmp {
        cc: arg0.clone(),
        rd: v5,
        a: arg1,
        b: arg2,
        ty: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xreg_to_xreg(ctx, v4);
    // Rule at src/isa/riscv64/lower.isle line 1126.
    return v8;
}
